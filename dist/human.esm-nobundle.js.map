{
  "version": 3,
  "sources": ["../src/util/util.ts", "../src/config.ts", "tfjs.esm.js", "../src/image/imagefxshaders.ts", "../src/image/imagefx.ts", "../src/image/enhance.ts", "../src/image/image.ts", "../src/util/env.ts", "../src/tfjs/load.ts", "../src/models.ts", "../src/gear/gear.ts", "../src/tfjs/constants.ts", "../src/gear/ssrnet-age.ts", "../src/gear/ssrnet-gender.ts", "../src/face/antispoof.ts", "../src/face/facemeshcoords.ts", "../src/face/facemeshutil.ts", "../src/face/blazeface.ts", "../src/body/blazeposecoords.ts", "../src/body/blazeposedetector.ts", "../src/body/blazepose.ts", "../src/object/centernet.ts", "../src/body/efficientposecoords.ts", "../src/body/efficientpose.ts", "../src/gear/emotion.ts", "../src/face/mobilefacenet.ts", "../src/face/insightface.ts", "../src/face/facemesh.ts", "../src/face/faceres.ts", "../src/hand/handposeutil.ts", "../src/hand/handposeanchors.ts", "../src/hand/handposedetector.ts", "../src/hand/handposepipeline.ts", "../src/hand/fingerdef.ts", "../src/hand/fingergesture.ts", "../src/hand/handpose.ts", "../src/hand/handtrack.ts", "../src/face/iris.ts", "../src/face/liveness.ts", "../src/body/movenetcoords.ts", "../src/body/movenet.ts", "../src/object/nanodet.ts", "../src/body/posenetutils.ts", "../src/body/posenet.ts", "../src/segmentation/segmentation.ts", "../src/tfjs/humangl.ts", "../src/tfjs/backend.ts", "../src/face/face.ts", "../src/util/interpolate.ts", "../src/face/match.ts", "../src/util/persons.ts", "../src/sample.ts", "../src/warmup.ts", "../src/human.ts"],
  "sourcesContent": ["import type { Config } from '../exports';\n\n/**\n * Simple helper functions used accross codebase\n */\n\n// helper function: wrapper around console output\nexport function log(...msg): void {\n  const dt = new Date();\n  const ts = `${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}:${dt.getSeconds().toString().padStart(2, '0')}.${dt.getMilliseconds().toString().padStart(3, '0')}`;\n  // eslint-disable-next-line no-console\n  if (msg) console.log(ts, 'Human:', ...msg);\n}\n\n// helper function: join two paths\nexport function join(folder: string, file: string): string {\n  const separator = folder.endsWith('/') ? '' : '/';\n  const skipJoin = file.startsWith('.') || file.startsWith('/') || file.startsWith('http:') || file.startsWith('https:') || file.startsWith('file:');\n  const path = skipJoin ? `${file}` : `${folder}${separator}${file}`;\n  if (!path.toLocaleLowerCase().includes('.json')) throw new Error(`modelpath error: expecting json file: ${path}`);\n  return path;\n}\n\n// helper function: gets elapsed time on both browser and nodejs\nexport const now = () => {\n  if (typeof performance !== 'undefined') return performance.now();\n  return parseInt((Number(process.hrtime.bigint()) / 1000 / 1000).toString());\n};\n\n// helper function: checks current config validity\nexport function validate(defaults: Partial<Config>, config: Partial<Config>, parent = 'config', msgs: Array<{ reason: string, where: string, expected?: string }> = []) {\n  for (const key of Object.keys(config)) {\n    if (typeof config[key] === 'object') {\n      validate(defaults[key], config[key], key, msgs);\n    } else {\n      const defined = defaults && (typeof defaults[key] !== 'undefined');\n      if (!defined) msgs.push({ reason: 'unknown property', where: `${parent}.${key} = ${config[key]}` });\n      const same = defaults && typeof defaults[key] === typeof config[key];\n      if (defined && !same) msgs.push({ reason: 'property type mismatch', where: `${parent}.${key} = ${config[key]}`, expected: typeof defaults[key] });\n    }\n    // ok = ok && defined && same;\n  }\n  if (config.debug && parent === 'config' && msgs.length > 0) log('invalid configuration', msgs);\n  return msgs;\n}\n\n// helper function: perform deep merge of multiple objects so it allows full inheritance with overrides\nexport function mergeDeep(...objects) {\n  const isObject = (obj) => obj && typeof obj === 'object';\n  return objects.reduce((prev, obj) => {\n    Object.keys(obj || {}).forEach((key) => {\n      const pVal = prev[key];\n      const oVal = obj[key];\n      if (Array.isArray(pVal) && Array.isArray(oVal)) prev[key] = pVal.concat(...oVal);\n      else if (isObject(pVal) && isObject(oVal)) prev[key] = mergeDeep(pVal, oVal);\n      else prev[key] = oVal;\n    });\n    return prev;\n  }, {});\n}\n\n// helper function: return min and max from input array\nexport const minmax = (data: Array<number>) => data.reduce((acc: Array<number>, val) => {\n  acc[0] = (acc[0] === undefined || val < acc[0]) ? val : acc[0];\n  acc[1] = (acc[1] === undefined || val > acc[1]) ? val : acc[1];\n  return acc;\n}, []);\n\n// helper function: async wait\nexport async function wait(time: number) {\n  const waiting = new Promise((resolve) => { setTimeout(() => resolve(true), time); });\n  await waiting;\n}\n", "/* eslint-disable indent */\n/* eslint-disable no-multi-spaces */\n\n/** Generic config type inherited by all module types */\nexport interface GenericConfig {\n  /** is module enabled? */\n  enabled: boolean,\n  /** path to model json file (relative to `modelBasePath` */\n  modelPath: string,\n  /** how many max frames to go without re-running model if cached results are acceptable\n   * for two-phase models such as face and hand caching applies to bounding boxes detection only */\n  skipFrames: number,\n  /** how many max milliseconds to go without re-running model if cached results are acceptable\n  * for two-phase models such as face and hand caching applies to bounding boxes detection only */\n  skipTime: number,\n}\n\n/** Detector part of face configuration */\nexport interface FaceDetectorConfig extends GenericConfig {\n  /** is face rotation correction performed after detecting face?\n   * used to correctly analyze faces under high angles\n  */\n  rotation: boolean,\n  /** maximum number of detected faces */\n  maxDetected: number,\n  /** minimum confidence for a detected face before results are discarded */\n  minConfidence: number,\n  /** minimum overlap between two detected faces before one is discarded */\n  iouThreshold: number,\n  /** should child models perform on masked image of a face */\n  mask: boolean,\n  /** should face detection return processed and cropped face tensor that can with an external model for addtional processing?\n   * if enabled it must be manually deallocated to avoid memory leak */\n  return: boolean,\n}\n\n/** Mesh part of face configuration */\nexport interface FaceMeshConfig extends GenericConfig {\n  /** Keep detected faces that cannot be verified using facemesh */\n  keepInvalid: boolean\n}\n\n/** Iris part of face configuration */\nexport interface FaceIrisConfig extends GenericConfig {}\n\n/** Attention part of face configuration */\nexport interface FaceAttentionConfig extends GenericConfig {}\n\n/** Description or face embedding part of face configuration\n * - also used by age and gender detection\n */\nexport interface FaceDescriptionConfig extends GenericConfig {\n  /** minimum confidence for a detected face before results are discarded */\n  minConfidence: number,\n}\n\n/** Emotion part of face configuration */\nexport interface FaceEmotionConfig extends GenericConfig {\n  /** minimum confidence for a detected face before results are discarded */\n  minConfidence: number,\n}\n\n/** Anti-spoofing part of face configuration */\nexport interface FaceAntiSpoofConfig extends GenericConfig {}\n\n/** Liveness part of face configuration */\nexport interface FaceLivenessConfig extends GenericConfig {}\n\n/** Gear part of face configuration */\nexport interface FaceGearConfig extends GenericConfig {\n  /** minimum confidence for a detected race before results are discarded */\n  minConfidence: number,\n}\n\n/** Configures all face-specific options: face detection, mesh analysis, age, gender, emotion detection and face description */\nexport interface FaceConfig extends GenericConfig {\n  detector: Partial<FaceDetectorConfig>,\n  mesh: Partial<FaceMeshConfig>,\n  attention: Partial<FaceAttentionConfig>,\n  iris: Partial<FaceIrisConfig>,\n  description: Partial<FaceDescriptionConfig>,\n  emotion: Partial<FaceEmotionConfig>,\n  antispoof: Partial<FaceAntiSpoofConfig>,\n  liveness: Partial<FaceLivenessConfig>,\n  gear: Partial<FaceGearConfig>,\n}\n\n/** Configures all body detection specific options */\nexport interface BodyConfig extends GenericConfig {\n  /** maximum number of detected bodies */\n  maxDetected: number,\n  /** minimum confidence for a detected body before results are discarded */\n  minConfidence: number,\n  /* experimental\n  /** experimental: detector used for body model before actual analysis\n  detector?: {\n    /** experimental: enable body detector before body landmarks\n    enabled: boolean,\n    /** experimental: path to optional body detector model json file\n    modelPath: string,\n    /** experimental: minimum confidence for a detected body before results are discarded\n    minConfidence: number,\n    /** experimental: minimum overlap between two detected bodies before one is discarded\n    iouThreshold: number\n  },\n  */\n}\n\n/** Configures all hand detection specific options */\nexport interface HandConfig extends GenericConfig {\n  /** should hand rotation correction be performed after hand detection? */\n  rotation: boolean,\n  /** minimum confidence for a detected hand before results are discarded */\n  minConfidence: number,\n  /** minimum overlap between two detected hands before one is discarded */\n  iouThreshold: number,\n  /** maximum number of detected hands */\n  maxDetected: number,\n  /** should hand landmarks be detected or just return detected hand box */\n  landmarks: boolean,\n  detector: {\n    /** path to hand detector model json */\n    modelPath?: string,\n  },\n  skeleton: {\n    /** path to hand skeleton model json */\n    modelPath?: string,\n  },\n}\n\n/** Configures all object detection specific options */\nexport interface ObjectConfig extends GenericConfig {\n  /** minimum confidence for a detected objects before results are discarded */\n  minConfidence: number,\n  /** minimum overlap between two detected objects before one is discarded */\n  iouThreshold: number,\n  /** maximum number of detected objects */\n  maxDetected: number,\n}\n\n/** Configures all body segmentation module\n * removes background from input containing person\n * if segmentation is enabled it will run as preprocessing task before any other model\n * alternatively leave it disabled and use it on-demand using human.segmentation method which can\n * remove background or replace it with user-provided background\n*/\nexport interface SegmentationConfig extends GenericConfig {\n  /** blur segmentation output by <number> pixels for more realistic image */\n  blur: number,\n}\n\n/** Run input through image filters before inference\n * - available only in Browser environments\n * - image filters run with near-zero latency as they are executed on the GPU using WebGL\n*/\nexport interface FilterConfig {\n  /** are image filters enabled? */\n  enabled: boolean,\n  /** perform image histogram equalization\n   * - equalization is performed on input as a whole and detected face before its passed for further analysis\n  */\n  equalization: boolean,\n  /** resize input width\n  * - if both width and height are set to 0, there is no resizing\n  * - if just one is set, second one is scaled automatically\n  * - if both are set, values are used as-is\n  */\n  width: number,\n  /** resize input height\n  * - if both width and height are set to 0, there is no resizing\n  * - if just one is set, second one is scaled automatically\n  * - if both are set, values are used as-is\n  */\n  height: number,\n  /** return processed canvas imagedata in result */\n  return: boolean,\n  /** flip input as mirror image */\n  flip: boolean,\n  /** range: -1 (darken) to 1 (lighten) */\n  brightness: number,\n  /** range: -1 (reduce contrast) to 1 (increase contrast) */\n  contrast: number,\n  /** range: 0 (no sharpening) to 1 (maximum sharpening) */\n  sharpness: number,\n  /** range: 0 (no blur) to N (blur radius in pixels) */\n  blur: number\n  /** range: -1 (reduce saturation) to 1 (increase saturation) */\n  saturation: number,\n  /** range: 0 (no change) to 360 (hue rotation in degrees) */\n  hue: number,\n  /** image negative */\n  negative: boolean,\n  /** image sepia colors */\n  sepia: boolean,\n  /** image vintage colors */\n  vintage: boolean,\n  /** image kodachrome colors */\n  kodachrome: boolean,\n  /** image technicolor colors */\n  technicolor: boolean,\n  /** image polaroid camera effect */\n  polaroid: boolean,\n  /** range: 0 (no pixelate) to N (number of pixels to pixelate) */\n  pixelate: number,\n}\n\n/** Controlls gesture detection */\nexport interface GestureConfig {\n  /** is gesture detection enabled? */\n  enabled: boolean,\n}\n/** Possible TensorFlow backends */\nexport type BackendType = ['cpu', 'wasm', 'webgl', 'humangl', 'tensorflow', 'webgpu'];\n\n/** Possible values for `human.warmup` */\nexport type WarmupType = ['' | 'none' | 'face' | 'full' | 'body'];\n\n/**\n * Configuration interface definition for **Human** library\n * Contains all configurable parameters\n * Defaults: [config](https://github.com/vladmandic/human/blob/main/src/config.ts#L262)\n */\nexport interface Config {\n  /** Backend used for TFJS operations\n   * valid build-in backends are:\n   * - Browser: `cpu`, `wasm`, `webgl`, `humangl`, `webgpu`\n   * - NodeJS: `cpu`, `wasm`, `tensorflow`\n   * default: `humangl` for browser and `tensorflow` for nodejs\n  */\n  backend: '' | 'cpu' | 'wasm' | 'webgl' | 'humangl' | 'tensorflow' | 'webgpu',\n\n  /** Path to *.wasm files if backend is set to `wasm`\n   *\n   * default: auto-detects to link to CDN `jsdelivr` when running in browser\n  */\n  wasmPath: string,\n\n  /** Force WASM loader to use platform fetch\n   *\n   * default: auto-detects to link to CDN `jsdelivr` when running in browser\n  */\n  wasmPlatformFetch: boolean,\n\n  /** Print debug statements to console\n   *\n   * default: `true`\n  */\n  debug: boolean,\n\n  /** Perform model loading and inference concurrently or sequentially\n   *\n   * default: `true`\n  */\n  async: boolean,\n\n  /** What to use for `human.warmup()`\n   * - warmup pre-initializes all models for faster inference but can take significant time on startup\n   * - used by `webgl`, `humangl` and `webgpu` backends\n   *\n   * default: `full`\n  */\n  warmup: '' | 'none' | 'face' | 'full' | 'body',\n\n  /** Base model path (typically starting with file://, http:// or https://) for all models\n   * - individual modelPath values are relative to this path\n   *\n   * default: `../models/` for browsers and `file://models/` for nodejs\n  */\n  modelBasePath: string,\n\n  /** Cache models in IndexDB on first sucessfull load\n   * default: true if indexdb is available (browsers), false if its not (nodejs)\n   */\n  cacheModels: boolean,\n\n  /** Cache sensitivity\n   * - values 0..1 where 0.01 means reset cache if input changed more than 1%\n   * - set to 0 to disable caching\n   *\n   * default: 0.7\n  */\n  cacheSensitivity: number;\n\n  /** Perform immediate garbage collection on deallocated tensors instead of caching them */\n  deallocate: boolean;\n\n  /** Internal Variable */\n  skipAllowed: boolean;\n\n  /** Filter config {@link FilterConfig} */\n  filter: Partial<FilterConfig>,\n\n  /** Gesture config {@link GestureConfig} */\n  gesture: Partial<GestureConfig>;\n\n  /** Face config {@link FaceConfig} */\n  face: Partial<FaceConfig>,\n\n  /** Body config {@link BodyConfig} */\n  body: Partial<BodyConfig>,\n\n  /** Hand config {@link HandConfig} */\n  hand: Partial<HandConfig>,\n\n  /** Object config {@link ObjectConfig} */\n  object: Partial<ObjectConfig>,\n\n  /** Segmentation config {@link SegmentationConfig} */\n  segmentation: Partial<SegmentationConfig>,\n}\n\n/** - [See all default Config values...](https://github.com/vladmandic/human/blob/main/src/config.ts#L262) */\nconst config: Config = {\n  backend: '',\n  modelBasePath: '',\n  cacheModels: true,\n  wasmPath: '',\n  wasmPlatformFetch: false,\n  debug: false,\n  async: true,\n  warmup: 'full',\n  cacheSensitivity: 0.70,\n  skipAllowed: false,\n  deallocate: false,\n  filter: {\n    enabled: true,\n    equalization: false,\n    width: 0,\n    height: 0,\n    flip: false,\n    return: true,\n    brightness: 0,\n    contrast: 0,\n    sharpness: 0,\n    blur: 0,\n    saturation: 0,\n    hue: 0,\n    negative: false,\n    sepia: false,\n    vintage: false,\n    kodachrome: false,\n    technicolor: false,\n    polaroid: false,\n    pixelate: 0,\n  },\n  gesture: {\n    enabled: true,\n  },\n  face: {\n    enabled: true,\n    detector: {\n      modelPath: 'blazeface.json',\n      rotation: true,\n      maxDetected: 1,\n      skipFrames: 99,\n      skipTime: 2500,\n      minConfidence: 0.2,\n      iouThreshold: 0.1,\n      mask: false,\n      return: false,\n    },\n    mesh: {\n      enabled: true,\n      modelPath: 'facemesh.json',\n      keepInvalid: false,\n    },\n    attention: {\n      enabled: false,\n      modelPath: 'facemesh-attention.json',\n    },\n    iris: {\n      enabled: true,\n      modelPath: 'iris.json',\n    },\n    emotion: {\n      enabled: true,\n      minConfidence: 0.1,\n      skipFrames: 99,\n      skipTime: 1500,\n      modelPath: 'emotion.json',\n    },\n    description: {\n      enabled: true,\n      modelPath: 'faceres.json',\n      skipFrames: 99,\n      skipTime: 3000,\n      minConfidence: 0.1,\n    },\n    antispoof: {\n      enabled: false,\n      skipFrames: 99,\n      skipTime: 4000,\n      modelPath: 'antispoof.json',\n    },\n    liveness: {\n      enabled: false,\n      skipFrames: 99,\n      skipTime: 4000,\n      modelPath: 'liveness.json',\n    },\n  },\n  body: {\n    enabled: true,\n    modelPath: 'movenet-lightning.json',\n    maxDetected: -1,\n    minConfidence: 0.3,\n    skipFrames: 1,\n    skipTime: 200,\n  },\n  hand: {\n    enabled: true,\n    rotation: true,\n    skipFrames: 99,\n    skipTime: 1000,\n    minConfidence: 0.50,\n    iouThreshold: 0.2,\n    maxDetected: -1,\n    landmarks: true,\n    detector: {\n      modelPath: 'handtrack.json',\n    },\n    skeleton: {\n      modelPath: 'handlandmark-full.json',\n    },\n  },\n  object: {\n    enabled: false,\n    modelPath: 'mb3-centernet.json',\n    minConfidence: 0.2,\n    iouThreshold: 0.4,\n    maxDetected: 10,\n    skipFrames: 99,\n    skipTime: 2000,\n  },\n  segmentation: {\n    enabled: false,\n    modelPath: 'selfie.json',\n    blur: 8,\n  },\n};\n\nexport { config as defaults };\n", "/*\n  Human\n  homepage: <https://github.com/vladmandic/human>\n  author: <https://github.com/vladmandic>'\n*/\n\nexport*from\"@tensorflow/tfjs/dist/index.js\";export*from\"@tensorflow/tfjs-backend-webgl/dist/index.js\";var r=\"3.19.0\",e=\"3.19.0\",o=\"3.19.0\",a=\"3.19.0\",t=\"3.19.0\",s=\"3.19.0\",f=\"3.19.0\",v={tfjs:r,\"tfjs-core\":e,\"tfjs-data\":o,\"tfjs-layers\":a,\"tfjs-converter\":t,\"tfjs-backend-webgl\":s,\"tfjs-backend-wasm\":f};import{Tensor as d}from\"@tensorflow/tfjs/dist/index.js\";import{GraphModel as l}from\"@tensorflow/tfjs-converter/dist/index\";export{l as GraphModel,d as Tensor,v as version};\n", "export const vertexIdentity = `\n  precision highp float;\n  attribute vec2 pos;\n  attribute vec2 uv;\n  varying vec2 vUv;\n  uniform float flipY;\n  void main(void) {\n    vUv = uv;\n    gl_Position = vec4(pos.x, pos.y*flipY, 0.0, 1.);\n  }\n`;\n\nexport const fragmentIdentity = `\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  void main(void) {\n    gl_FragColor = texture2D(texture, vUv);\n  }\n`;\n\nexport const colorMatrixWithAlpha = `\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  uniform float m[20];\n  void main(void) {\n    vec4 c = texture2D(texture, vUv);\n    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];\n    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];\n    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];\n    gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];\n  }\n`;\n\nexport const colorMatrixWithoutAlpha = `\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  uniform float m[20];\n  void main(void) {\n    vec4 c = texture2D(texture, vUv);\n    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[4];\n    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[9];\n    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[14];\n    gl_FragColor.a = c.a;\n  }\n`;\n\nexport const pixelate = `\n  precision highp float;\n  varying vec2 vUv;\n  uniform vec2 size;\n  uniform sampler2D texture;\n  vec2 pixelate(vec2 coord, vec2 size) {\n    return floor( coord / size ) * size;\n  }\n  void main(void) {\n    gl_FragColor = vec4(0.0);\n    vec2 coord = pixelate(vUv, size);\n    gl_FragColor += texture2D(texture, coord);\n  }\n`;\n\nexport const blur = `\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  uniform vec2 px;\n  void main(void) {\n    gl_FragColor = vec4(0.0);\n    gl_FragColor += texture2D(texture, vUv + vec2(-7.0*px.x, -7.0*px.y))*0.0044299121055113265;\n    gl_FragColor += texture2D(texture, vUv + vec2(-6.0*px.x, -6.0*px.y))*0.00895781211794;\n    gl_FragColor += texture2D(texture, vUv + vec2(-5.0*px.x, -5.0*px.y))*0.0215963866053;\n    gl_FragColor += texture2D(texture, vUv + vec2(-4.0*px.x, -4.0*px.y))*0.0443683338718;\n    gl_FragColor += texture2D(texture, vUv + vec2(-3.0*px.x, -3.0*px.y))*0.0776744219933;\n    gl_FragColor += texture2D(texture, vUv + vec2(-2.0*px.x, -2.0*px.y))*0.115876621105;\n    gl_FragColor += texture2D(texture, vUv + vec2(-1.0*px.x, -1.0*px.y))*0.147308056121;\n    gl_FragColor += texture2D(texture, vUv                             )*0.159576912161;\n    gl_FragColor += texture2D(texture, vUv + vec2( 1.0*px.x,  1.0*px.y))*0.147308056121;\n    gl_FragColor += texture2D(texture, vUv + vec2( 2.0*px.x,  2.0*px.y))*0.115876621105;\n    gl_FragColor += texture2D(texture, vUv + vec2( 3.0*px.x,  3.0*px.y))*0.0776744219933;\n    gl_FragColor += texture2D(texture, vUv + vec2( 4.0*px.x,  4.0*px.y))*0.0443683338718;\n    gl_FragColor += texture2D(texture, vUv + vec2( 5.0*px.x,  5.0*px.y))*0.0215963866053;\n    gl_FragColor += texture2D(texture, vUv + vec2( 6.0*px.x,  6.0*px.y))*0.00895781211794;\n    gl_FragColor += texture2D(texture, vUv + vec2( 7.0*px.x,  7.0*px.y))*0.0044299121055113265;\n  }\n`;\n\nexport const convolution = `\n  precision highp float;\n  varying vec2 vUv;\n  uniform sampler2D texture;\n  uniform vec2 px;\n  uniform float m[9];\n  void main(void) {\n    vec4 c11 = texture2D(texture, vUv - px); // top left\n    vec4 c12 = texture2D(texture, vec2(vUv.x, vUv.y - px.y)); // top center\n    vec4 c13 = texture2D(texture, vec2(vUv.x + px.x, vUv.y - px.y)); // top right\n    vec4 c21 = texture2D(texture, vec2(vUv.x - px.x, vUv.y) ); // mid left\n    vec4 c22 = texture2D(texture, vUv); // mid center\n    vec4 c23 = texture2D(texture, vec2(vUv.x + px.x, vUv.y) ); // mid right\n    vec4 c31 = texture2D(texture, vec2(vUv.x - px.x, vUv.y + px.y) ); // bottom left\n    vec4 c32 = texture2D(texture, vec2(vUv.x, vUv.y + px.y) ); // bottom center\n    vec4 c33 = texture2D(texture, vUv + px ); // bottom right\n    gl_FragColor = \n    c11 * m[0] + c12 * m[1] + c22 * m[2] +\n    c21 * m[3] + c22 * m[4] + c23 * m[5] +\n    c31 * m[6] + c32 * m[7] + c33 * m[8];\n    gl_FragColor.a = c22.a;\n  }\n`;\n", "/**\n * Image Filters in WebGL algoritm implementation\n * Based on: [WebGLImageFilter](https://github.com/phoboslab/WebGLImageFilter)\n */\n\nimport * as shaders from './imagefxshaders';\nimport { canvas } from './image';\nimport { log } from '../util/util';\n\nconst collect = (source, prefix, collection) => {\n  const r = new RegExp('\\\\b' + prefix + ' \\\\w+ (\\\\w+)', 'ig');\n  source.replace(r, (match, name) => {\n    collection[name] = 0;\n    return match;\n  });\n};\n\nclass GLProgram {\n  uniform = {};\n  attribute = {};\n  gl: WebGLRenderingContext;\n  id: WebGLProgram;\n\n  constructor(gl, vertexSource, fragmentSource) {\n    this.gl = gl;\n    const vertexShader = this.compile(vertexSource, this.gl.VERTEX_SHADER);\n    const fragmentShader = this.compile(fragmentSource, this.gl.FRAGMENT_SHADER);\n    this.id = this.gl.createProgram() as WebGLProgram;\n    if (!vertexShader || !fragmentShader) return;\n    if (!this.id) {\n      log('filter: could not create webgl program');\n      return;\n    }\n    this.gl.attachShader(this.id, vertexShader);\n    this.gl.attachShader(this.id, fragmentShader);\n    this.gl.linkProgram(this.id);\n    if (!this.gl.getProgramParameter(this.id, this.gl.LINK_STATUS)) {\n      log(`filter: gl link failed: ${this.gl.getProgramInfoLog(this.id)}`);\n      return;\n    }\n    this.gl.useProgram(this.id);\n    collect(vertexSource, 'attribute', this.attribute); // Collect attributes\n    for (const a in this.attribute) this.attribute[a] = this.gl.getAttribLocation(this.id, a);\n    collect(vertexSource, 'uniform', this.uniform); // Collect uniforms\n    collect(fragmentSource, 'uniform', this.uniform);\n    for (const u in this.uniform) this.uniform[u] = this.gl.getUniformLocation(this.id, u);\n  }\n\n  compile = (source, type): WebGLShader | null => {\n    const shader = this.gl.createShader(type) as WebGLShader;\n    if (!shader) {\n      log('filter: could not create shader');\n      return null;\n    }\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n      log(`filter: gl compile failed: ${this.gl.getShaderInfoLog(shader)}`);\n      return null;\n    }\n    return shader;\n  };\n}\n\n// function that is instantiated as class so it has private this members\n/**\n * @class GLImageFilter\n * @property {function} reset reset current filter chain\n * @property {function} add add specified filter to filter chain\n * @property {function} apply execute filter chain and draw result\n * @property {function} draw just draw input to result\n */\n\nexport function GLImageFilter() {\n  let drawCount = 0;\n  let sourceTexture: WebGLTexture | null = null;\n  let lastInChain = false;\n  let currentFramebufferIndex = -1;\n  let tempFramebuffers: [null, null] | [{ fbo: WebGLFramebuffer | null, texture: WebGLTexture | null }] = [null, null];\n  let filterChain: Record<string, unknown>[] = [];\n  let vertexBuffer: WebGLBuffer | null = null;\n  let currentProgram: GLProgram | null = null;\n  const fxcanvas = canvas(100, 100);\n  const shaderProgramCache = { }; // key is the shader program source, value is the compiled program\n  const DRAW = { INTERMEDIATE: 1 };\n  const gl = fxcanvas.getContext('webgl') as WebGLRenderingContext;\n  if (!gl) {\n    log('filter: cannot get webgl context');\n    return;\n  }\n  // @ts-ignore used for sanity checks outside of imagefx\n  this.gl = gl;\n\n  function resize(width, height) {\n    if (width === fxcanvas.width && height === fxcanvas.height) return; // Same width/height? Nothing to do here\n    fxcanvas.width = width;\n    fxcanvas.height = height;\n    if (!vertexBuffer) { // Create the context if we don't have it yet\n      const vertices = new Float32Array([-1, -1, 0, 1, 1, -1, 1, 1, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 1, 1, 1, 1, 1, 0]); // Create the vertex buffer for the two triangles [x, y, u, v] * 6\n      vertexBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n    }\n    gl.viewport(0, 0, fxcanvas.width, fxcanvas.height);\n    tempFramebuffers = [null, null]; // Delete old temp framebuffers\n  }\n\n  function createFramebufferTexture(width, height) {\n    const fbo = gl.createFramebuffer() as WebGLFramebuffer;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    const renderbuffer = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n    const texture = gl.createTexture() as WebGLTexture;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return { fbo, texture };\n  }\n\n  function getTempFramebuffer(index): { fbo: WebGLFramebuffer | null, texture: WebGLTexture | null } {\n    tempFramebuffers[index] = tempFramebuffers[index] || createFramebufferTexture(fxcanvas.width, fxcanvas.height);\n    return tempFramebuffers[index] as { fbo: WebGLFramebuffer, texture: WebGLTexture };\n  }\n\n  function draw(flags = 0) {\n    if (!currentProgram) return;\n    let source: WebGLTexture | null = null;\n    let target: WebGLFramebuffer | null = null;\n    let flipY = false;\n    if (drawCount === 0) source = sourceTexture; // First draw call - use the source texture\n    else source = getTempFramebuffer(currentFramebufferIndex).texture || null; // All following draw calls use the temp buffer last drawn to\n    drawCount++;\n    if (lastInChain && !(flags & DRAW.INTERMEDIATE)) { // Last filter in our chain - draw directly to the WebGL Canvas. We may also have to flip the image vertically now\n      target = null;\n      flipY = drawCount % 2 === 0;\n    } else {\n      currentFramebufferIndex = (currentFramebufferIndex + 1) % 2;\n      target = getTempFramebuffer(currentFramebufferIndex).fbo || null; // Intermediate draw call - get a temp buffer to draw to\n    }\n    gl.bindTexture(gl.TEXTURE_2D, source); // Bind the source and target and draw the two triangles\n    gl.bindFramebuffer(gl.FRAMEBUFFER, target);\n    gl.uniform1f(currentProgram.uniform['flipY'], (flipY ? -1 : 1));\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n  }\n\n  function compileShader(fragmentSource): GLProgram | null {\n    if (shaderProgramCache[fragmentSource]) {\n      currentProgram = shaderProgramCache[fragmentSource];\n      gl.useProgram((currentProgram ? currentProgram.id : null) || null);\n      return currentProgram as GLProgram;\n    }\n    currentProgram = new GLProgram(gl, shaders.vertexIdentity, fragmentSource);\n    if (!currentProgram) {\n      log('filter: could not get webgl program');\n      return null;\n    }\n    const floatSize = Float32Array.BYTES_PER_ELEMENT;\n    const vertSize = 4 * floatSize;\n    gl.enableVertexAttribArray(currentProgram.attribute['pos']);\n    gl.vertexAttribPointer(currentProgram.attribute['pos'], 2, gl.FLOAT, false, vertSize, 0 * floatSize);\n    gl.enableVertexAttribArray(currentProgram.attribute['uv']);\n    gl.vertexAttribPointer(currentProgram.attribute['uv'], 2, gl.FLOAT, false, vertSize, 2 * floatSize);\n    shaderProgramCache[fragmentSource] = currentProgram;\n    return currentProgram as GLProgram;\n  }\n\n  const filter = {\n    colorMatrix: (matrix) => { // general color matrix filter\n      const m = new Float32Array(matrix);\n      m[4] /= 255;\n      m[9] /= 255;\n      m[14] /= 255;\n      m[19] /= 255;\n      const shader = (m[18] === 1 && m[3] === 0 && m[8] === 0 && m[13] === 0 && m[15] === 0 && m[16] === 0 && m[17] === 0 && m[19] === 0) // Can we ignore the alpha value? Makes things a bit faster.\n        ? shaders.colorMatrixWithoutAlpha\n        : shaders.colorMatrixWithAlpha;\n      const program = compileShader(shader);\n      if (!program) return;\n      gl.uniform1fv(program.uniform['m'], m);\n      draw();\n    },\n\n    brightness: (brightness) => {\n      const b = (brightness || 0) + 1;\n      filter.colorMatrix([\n        b, 0, 0, 0, 0,\n        0, b, 0, 0, 0,\n        0, 0, b, 0, 0,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    saturation: (amount) => {\n      const x = (amount || 0) * 2 / 3 + 1;\n      const y = ((x - 1) * -0.5);\n      filter.colorMatrix([\n        x, y, y, 0, 0,\n        y, x, y, 0, 0,\n        y, y, x, 0, 0,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    desaturate: () => {\n      filter.saturation(-1);\n    },\n\n    contrast: (amount) => {\n      const v = (amount || 0) + 1;\n      const o = -128 * (v - 1);\n      filter.colorMatrix([\n        v, 0, 0, 0, o,\n        0, v, 0, 0, o,\n        0, 0, v, 0, o,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    negative: () => {\n      filter.contrast(-2);\n    },\n\n    hue: (rotation) => {\n      rotation = (rotation || 0) / 180 * Math.PI;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const lumR = 0.213;\n      const lumG = 0.715;\n      const lumB = 0.072;\n      filter.colorMatrix([\n        lumR + cos * (1 - lumR) + sin * (-lumR), lumG + cos * (-lumG) + sin * (-lumG), lumB + cos * (-lumB) + sin * (1 - lumB), 0, 0,\n        lumR + cos * (-lumR) + sin * (0.143), lumG + cos * (1 - lumG) + sin * (0.140), lumB + cos * (-lumB) + sin * (-0.283), 0, 0,\n        lumR + cos * (-lumR) + sin * (-(1 - lumR)), lumG + cos * (-lumG) + sin * (lumG), lumB + cos * (1 - lumB) + sin * (lumB), 0, 0,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    desaturateLuminance: () => {\n      filter.colorMatrix([\n        0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n        0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n        0.2764723, 0.9297080, 0.0938197, 0, -37.1,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    sepia: () => {\n      filter.colorMatrix([\n        0.393, 0.7689999, 0.18899999, 0, 0,\n        0.349, 0.6859999, 0.16799999, 0, 0,\n        0.272, 0.5339999, 0.13099999, 0, 0,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    brownie: () => {\n      filter.colorMatrix([\n        0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,\n        -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,\n        0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    vintagePinhole: () => {\n      filter.colorMatrix([\n        0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,\n        0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,\n        0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    kodachrome: () => {\n      filter.colorMatrix([\n        1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n        -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n        -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    technicolor: () => {\n      filter.colorMatrix([\n        1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,\n        -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,\n        -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    polaroid: () => {\n      filter.colorMatrix([\n        1.438, -0.062, -0.062, 0, 0,\n        -0.122, 1.378, -0.122, 0, 0,\n        -0.016, -0.016, 1.483, 0, 0,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    shiftToBGR: () => {\n      filter.colorMatrix([\n        0, 0, 1, 0, 0,\n        0, 1, 0, 0, 0,\n        1, 0, 0, 0, 0,\n        0, 0, 0, 1, 0,\n      ]);\n    },\n\n    convolution: (matrix) => { // general convolution Filter\n      const m = new Float32Array(matrix);\n      const pixelSizeX = 1 / fxcanvas.width;\n      const pixelSizeY = 1 / fxcanvas.height;\n      const program = compileShader(shaders.convolution);\n      if (!program) return;\n      gl.uniform1fv(program.uniform['m'], m);\n      gl.uniform2f(program.uniform['px'], pixelSizeX, pixelSizeY);\n      draw();\n    },\n\n    detectEdges: () => {\n      // @ts-ignore this\n      filter.convolution.call(this, [\n        0, 1, 0,\n        1, -4, 1,\n        0, 1, 0,\n      ]);\n    },\n\n    sobelX: () => {\n      // @ts-ignore this\n      filter.convolution.call(this, [\n        -1, 0, 1,\n        -2, 0, 2,\n        -1, 0, 1,\n      ]);\n    },\n\n    sobelY: () => {\n      // @ts-ignore this\n      filter.convolution.call(this, [\n        -1, -2, -1,\n        0, 0, 0,\n        1, 2, 1,\n      ]);\n    },\n\n    sharpen: (amount) => {\n      const a = amount || 1;\n      // @ts-ignore this\n      filter.convolution.call(this, [\n        0, -1 * a, 0,\n        -1 * a, 1 + 4 * a, -1 * a,\n        0, -1 * a, 0,\n      ]);\n    },\n\n    emboss: (size) => {\n      const s = size || 1;\n      // @ts-ignore this\n      filter.convolution.call(this, [\n        -2 * s, -1 * s, 0,\n        -1 * s, 1, 1 * s,\n        0, 1 * s, 2 * s,\n      ]);\n    },\n\n    blur: (size) => {\n      const blurSizeX = (size / 7) / fxcanvas.width;\n      const blurSizeY = (size / 7) / fxcanvas.height;\n      const program = compileShader(shaders.blur);\n      if (!program) return;\n      // Vertical\n      gl.uniform2f(program.uniform['px'], 0, blurSizeY);\n      draw(DRAW.INTERMEDIATE);\n      // Horizontal\n      gl.uniform2f(program.uniform['px'], blurSizeX, 0);\n      draw();\n    },\n\n    pixelate: (size) => {\n      const blurSizeX = (size) / fxcanvas.width;\n      const blurSizeY = (size) / fxcanvas.height;\n      const program = compileShader(shaders.pixelate);\n      if (!program) return;\n      gl.uniform2f(program.uniform['size'], blurSizeX, blurSizeY);\n      draw();\n    },\n  };\n\n  // @ts-ignore this\n  this.add = function (name) {\n    // eslint-disable-next-line prefer-rest-params\n    const args = Array.prototype.slice.call(arguments, 1);\n    const func = filter[name];\n    filterChain.push({ func, args });\n  };\n\n  // @ts-ignore this\n  this.reset = function () {\n    filterChain = [];\n  };\n\n  // @ts-ignore this\n  this.get = function () {\n    return filterChain;\n  };\n\n  // @ts-ignore this\n  this.apply = function (image) {\n    resize(image.width, image.height);\n    drawCount = 0;\n    if (!sourceTexture) sourceTexture = gl.createTexture(); // Create the texture for the input image if we haven't yet\n    gl.bindTexture(gl.TEXTURE_2D, sourceTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n    for (let i = 0; i < filterChain.length; i++) {\n      lastInChain = (i === filterChain.length - 1);\n      const f = filterChain[i];\n      // @ts-ignore function assigment\n      f.func.apply(this, f.args || []);\n    }\n    return fxcanvas;\n  };\n\n  // @ts-ignore this\n  this.draw = function (image) {\n    this.add('brightness', 0);\n    return this.apply(image);\n  };\n}\n", "/**\n * Image enhancements\n */\n\nimport * as tf from '../../dist/tfjs.esm.js';\nimport type { Tensor } from '../exports';\n\nexport async function histogramEqualization(inputImage: Tensor): Promise<Tensor> {\n  // const maxValue = 254; // using 255 results in values slightly larger than 1 due to math rounding errors\n  const squeeze = inputImage.shape.length === 4 ? tf.squeeze(inputImage) : inputImage;\n  const channels = tf.split(squeeze, 3, 2);\n  const min: Tensor[] = [tf.min(channels[0]), tf.min(channels[1]), tf.min(channels[2])];\n  const max: Tensor[] = [tf.max(channels[0]), tf.max(channels[1]), tf.max(channels[2])];\n  const absMax = await Promise.all(max.map((channel) => channel.data()));\n  const maxValue = 0.99 * Math.max(absMax[0][0], absMax[1][0], absMax[2][0]);\n  const sub = [tf.sub(channels[0], min[0]), tf.sub(channels[1], min[1]), tf.sub(channels[2], min[2])];\n  const range = [tf.sub(max[0], min[0]), tf.sub(max[1], min[1]), tf.sub(max[2], min[2])];\n  const fact = [tf.div(maxValue, range[0]), tf.div(maxValue, range[1]), tf.div(maxValue, range[2])];\n  const enh = [tf.mul(sub[0], fact[0]), tf.mul(sub[1], fact[1]), tf.mul(sub[2], fact[2])];\n  const rgb = tf.stack([enh[0], enh[1], enh[2]], 2);\n  const reshape = tf.reshape(rgb, [1, squeeze.shape[0], squeeze.shape[1], 3]);\n  tf.dispose([...channels, ...min, ...max, ...sub, ...range, ...fact, ...enh, rgb, squeeze]);\n  return reshape; // output shape is [1, height, width, 3]\n}\n", "/**\n * Image Processing algorithm implementation\n */\n\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as fxImage from './imagefx';\nimport type { Input, AnyCanvas, Tensor, Config } from '../exports';\nimport { env } from '../util/env';\nimport { log } from '../util/util';\nimport * as enhance from './enhance';\n\nconst maxSize = 3840;\n// internal temp canvases\nlet inCanvas: AnyCanvas | null = null; // use global variable to avoid recreating canvas on each frame\nlet outCanvas: AnyCanvas | null = null; // use global variable to avoid recreating canvas on each frame\nlet tmpCanvas: AnyCanvas | null = null; // use global variable to avoid recreating canvas on each frame\n// @ts-ignore // imagefx is js module that should be converted to a class\nlet fx: fxImage.GLImageFilter | null; // instance of imagefx\n\nconst last: { inputSum: number, cacheDiff: number, sumMethod: number, inputTensor: undefined | Tensor } = {\n  inputSum: 0,\n  cacheDiff: 1,\n  sumMethod: 0,\n  inputTensor: undefined,\n};\n\nexport function canvas(width: number, height: number): AnyCanvas {\n  let c;\n  if (env.browser) { // browser defines canvas object\n    if (env.worker) { // if runing in web  worker use OffscreenCanvas\n      if (typeof OffscreenCanvas === 'undefined') throw new Error('canvas error: attempted to run in web worker but OffscreenCanvas is not supported');\n      c = new OffscreenCanvas(width, height);\n    } else { // otherwise use DOM canvas\n      if (typeof document === 'undefined') throw new Error('canvas error: attempted to run in browser but DOM is not defined');\n      c = document.createElement('canvas');\n      c.width = width;\n      c.height = height;\n    }\n  } else { // if not running in browser, there is no \"default\" canvas object, so we need monkey patch or fail\n    // @ts-ignore // env.canvas is an external monkey-patch\n    if (typeof env.Canvas !== 'undefined') c = new env.Canvas(width, height);\n    else if (typeof globalThis.Canvas !== 'undefined') c = new globalThis.Canvas(width, height);\n    // else throw new Error('canvas error: attempted to use canvas in nodejs without canvas support installed');\n  }\n  return c;\n}\n\n// helper function to copy canvas from input to output\nexport function copy(input: AnyCanvas, output?: AnyCanvas) {\n  const outputCanvas = output || canvas(input.width, input.height);\n  const ctx = outputCanvas.getContext('2d') as CanvasRenderingContext2D;\n  ctx.drawImage(input, 0, 0);\n  return outputCanvas;\n}\n\n// process input image and return tensor\n// input can be tensor, imagedata, htmlimageelement, htmlvideoelement\n// input is resized and run through imagefx filter\nexport async function process(input: Input, config: Config, getTensor: boolean = true): Promise<{ tensor: Tensor | null, canvas: AnyCanvas | null }> {\n  if (!input) {\n    // throw new Error('input is missing');\n    if (config.debug) log('input error: input is missing');\n    return { tensor: null, canvas: null }; // video may become temporarily unavailable due to onresize\n  }\n  // sanity checks since different browsers do not implement all dom elements\n  if (\n    !(input instanceof tf.Tensor)\n    && !(typeof Image !== 'undefined' && input instanceof Image)\n    && !(typeof env.Canvas !== 'undefined' && input instanceof env.Canvas)\n    && !(typeof globalThis.Canvas !== 'undefined' && input instanceof globalThis.Canvas)\n    && !(typeof ImageData !== 'undefined' && input instanceof ImageData)\n    && !(typeof ImageBitmap !== 'undefined' && input instanceof ImageBitmap)\n    && !(typeof HTMLImageElement !== 'undefined' && input instanceof HTMLImageElement)\n    && !(typeof HTMLMediaElement !== 'undefined' && input instanceof HTMLMediaElement)\n    && !(typeof HTMLVideoElement !== 'undefined' && input instanceof HTMLVideoElement)\n    && !(typeof HTMLCanvasElement !== 'undefined' && input instanceof HTMLCanvasElement)\n    && !(typeof OffscreenCanvas !== 'undefined' && input instanceof OffscreenCanvas)\n  ) {\n    throw new Error('input error: type is not recognized');\n  }\n  if (input instanceof tf.Tensor) { // if input is tensor use as-is without filters but correct shape as needed\n    let tensor: Tensor | null = null;\n    if ((input as Tensor)['isDisposedInternal']) throw new Error('input error: attempted to use tensor but it is disposed');\n    if (!(input as Tensor)['shape']) throw new Error('input error: attempted to use tensor without a shape');\n    if ((input as Tensor).shape.length === 3) { // [height, width, 3 || 4]\n      if ((input as Tensor).shape[2] === 3) { // [height, width, 3] so add batch\n        tensor = tf.expandDims(input, 0);\n      } else if ((input as Tensor).shape[2] === 4) { // [height, width, 4] so strip alpha and add batch\n        const rgb = tf.slice3d(input, [0, 0, 0], [-1, -1, 3]);\n        tensor = tf.expandDims(rgb, 0);\n        tf.dispose(rgb);\n      }\n    } else if ((input as Tensor).shape.length === 4) { // [1, width, height, 3 || 4]\n      if ((input as Tensor).shape[3] === 3) { // [1, width, height, 3] just clone\n        tensor = tf.clone(input);\n      } else if ((input as Tensor).shape[3] === 4) { // [1, width, height, 4] so strip alpha\n        tensor = tf.slice4d(input, [0, 0, 0, 0], [-1, -1, -1, 3]);\n      }\n    }\n    // at the end shape must be [1, height, width, 3]\n    if (tensor == null || tensor.shape.length !== 4 || tensor.shape[0] !== 1 || tensor.shape[3] !== 3) throw new Error(`input error: attempted to use tensor with unrecognized shape: ${input['shape']}`);\n    if ((tensor as Tensor).dtype === 'int32') {\n      const cast = tf.cast(tensor, 'float32');\n      tf.dispose(tensor);\n      tensor = cast;\n    }\n    return { tensor, canvas: (config.filter.return ? outCanvas : null) };\n  } else {\n    // check if resizing will be needed\n    if (typeof input['readyState'] !== 'undefined' && input['readyState'] <= 2) {\n      if (config.debug) log('input stream is not ready');\n      return { tensor: null, canvas: inCanvas }; // video may become temporarily unavailable due to onresize\n    }\n    const originalWidth = input['naturalWidth'] || input['videoWidth'] || input['width'] || (input['shape'] && (input['shape'][1] > 0));\n    const originalHeight = input['naturalHeight'] || input['videoHeight'] || input['height'] || (input['shape'] && (input['shape'][2] > 0));\n    if (!originalWidth || !originalHeight) {\n      if (config.debug) log('cannot determine input dimensions');\n      return { tensor: null, canvas: inCanvas }; // video may become temporarily unavailable due to onresize\n    }\n    let targetWidth = originalWidth;\n    let targetHeight = originalHeight;\n    if (targetWidth > maxSize) {\n      targetWidth = maxSize;\n      targetHeight = Math.trunc(targetWidth * originalHeight / originalWidth);\n    }\n    if (targetHeight > maxSize) {\n      targetHeight = maxSize;\n      targetWidth = Math.trunc(targetHeight * originalWidth / originalHeight);\n    }\n\n    // create our canvas and resize it if needed\n    if ((config.filter.width || 0) > 0) targetWidth = config.filter.width;\n    else if ((config.filter.height || 0) > 0) targetWidth = originalWidth * ((config.filter.height || 0) / originalHeight);\n    if ((config.filter.height || 0) > 0) targetHeight = config.filter.height;\n    else if ((config.filter.width || 0) > 0) targetHeight = originalHeight * ((config.filter.width || 0) / originalWidth);\n    if (!targetWidth || !targetHeight) throw new Error('input error: cannot determine dimension');\n    if (!inCanvas || (inCanvas?.width !== targetWidth) || (inCanvas?.height !== targetHeight)) inCanvas = canvas(targetWidth, targetHeight);\n\n    // draw input to our canvas\n    const inCtx = inCanvas.getContext('2d') as CanvasRenderingContext2D;\n    if ((typeof ImageData !== 'undefined') && (input instanceof ImageData)) {\n      inCtx.putImageData(input, 0, 0);\n    } else {\n      if (config.filter.flip && typeof inCtx.translate !== 'undefined') {\n        inCtx.translate(originalWidth, 0);\n        inCtx.scale(-1, 1);\n        inCtx.drawImage(input as AnyCanvas, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas?.width, inCanvas?.height);\n        inCtx.setTransform(1, 0, 0, 1, 0, 0); // resets transforms to defaults\n      } else {\n        inCtx.drawImage(input as AnyCanvas, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas?.width, inCanvas?.height);\n      }\n    }\n\n    if (!outCanvas || (inCanvas.width !== outCanvas.width) || (inCanvas?.height !== outCanvas?.height)) outCanvas = canvas(inCanvas.width, inCanvas.height); // init output canvas\n\n    // imagefx transforms using gl from input canvas to output canvas\n    if (config.filter.enabled && env.webgl.supported) {\n      if (!fx) fx = env.browser ? new fxImage.GLImageFilter() : null; // && (typeof document !== 'undefined')\n      env.filter = !!fx;\n      if (!fx || !fx.add) {\n        if (config.debug) log('input process error: cannot initialize filters');\n        env.webgl.supported = false;\n        config.filter.enabled = false;\n        copy(inCanvas, outCanvas); // filter failed to initialize\n        // return { tensor: null, canvas: inCanvas };\n      } else {\n        fx.reset();\n        if (config.filter.brightness !== 0) fx.add('brightness', config.filter.brightness);\n        if (config.filter.contrast !== 0) fx.add('contrast', config.filter.contrast);\n        if (config.filter.sharpness !== 0) fx.add('sharpen', config.filter.sharpness);\n        if (config.filter.blur !== 0) fx.add('blur', config.filter.blur);\n        if (config.filter.saturation !== 0) fx.add('saturation', config.filter.saturation);\n        if (config.filter.hue !== 0) fx.add('hue', config.filter.hue);\n        if (config.filter.negative) fx.add('negative');\n        if (config.filter.sepia) fx.add('sepia');\n        if (config.filter.vintage) fx.add('brownie');\n        if (config.filter.sepia) fx.add('sepia');\n        if (config.filter.kodachrome) fx.add('kodachrome');\n        if (config.filter.technicolor) fx.add('technicolor');\n        if (config.filter.polaroid) fx.add('polaroid');\n        if (config.filter.pixelate !== 0) fx.add('pixelate', config.filter.pixelate);\n        if (fx.get() > 0) outCanvas = fx.apply(inCanvas);\n        else outCanvas = fx.draw(inCanvas);\n      }\n    } else {\n      copy(inCanvas, outCanvas); // if no filters applied, output canvas is input canvas\n      if (fx) fx = null;\n      env.filter = !!fx;\n    }\n\n    if (!getTensor) return { tensor: null, canvas: outCanvas }; // just canvas was requested\n    if (!outCanvas) throw new Error('canvas error: cannot create output');\n\n    // create tensor from image unless input was a tensor already\n    let pixels;\n    let depth = 3;\n    if ((typeof ImageData !== 'undefined' && input instanceof ImageData) || (input['data'] && input['width'] && input['height'])) { // if input is imagedata, just use it\n      if (env.browser && tf.browser) {\n        pixels = tf.browser ? tf.browser.fromPixels(input) : null;\n      } else {\n        depth = input['data'].length / input['height'] / input['width'];\n        // const arr = Uint8Array.from(input['data']);\n        const arr = new Uint8Array(input['data']['buffer']);\n        pixels = tf.tensor(arr, [input['height'], input['width'], depth], 'int32');\n      }\n    } else {\n      if (!tmpCanvas || (outCanvas.width !== tmpCanvas.width) || (outCanvas.height !== tmpCanvas.height)) tmpCanvas = canvas(outCanvas.width, outCanvas.height); // init output canvas\n      if (tf.browser && env.browser) {\n        if (config.backend === 'webgl' || config.backend === 'humangl' || config.backend === 'webgpu') {\n          pixels = tf.browser.fromPixels(outCanvas); // safe to reuse since both backend and context are gl based\n        } else {\n          tmpCanvas = copy(outCanvas); // cannot use output canvas as it already has gl context so we do a silly one more canvas\n          pixels = tf.browser.fromPixels(tmpCanvas);\n        }\n      } else {\n        const tempCanvas = copy(outCanvas); // cannot use output canvas as it already has gl context so we do a silly one more canvas\n        const tempCtx = tempCanvas.getContext('2d') as CanvasRenderingContext2D;\n        const tempData = tempCtx.getImageData(0, 0, targetWidth, targetHeight);\n        depth = tempData.data.length / targetWidth / targetHeight;\n        const arr = new Uint8Array(tempData.data.buffer);\n        pixels = tf.tensor(arr, [targetWidth, targetHeight, depth]);\n      }\n    }\n    if (depth === 4) { // rgba to rgb\n      const rgb = tf.slice3d(pixels, [0, 0, 0], [-1, -1, 3]); // strip alpha channel\n      tf.dispose(pixels);\n      pixels = rgb;\n    }\n    if (!pixels) throw new Error('input error: cannot create tensor');\n    const casted = tf.cast(pixels, 'float32');\n    const tensor = config.filter.equalization ? await enhance.histogramEqualization(casted) : tf.expandDims(casted, 0);\n    tf.dispose([pixels, casted]);\n    return { tensor, canvas: (config.filter.return ? outCanvas : null) };\n  }\n}\n\n/*\nconst checksum = async (input: Tensor): Promise<number> => { // use tf sum or js based sum loop depending on which is faster\n  const resizeFact = 48;\n  const reduced: Tensor = tf.image.resizeBilinear(input, [Math.trunc((input.shape[1] || 1) / resizeFact), Math.trunc((input.shape[2] || 1) / resizeFact)]);\n  const tfSum = async (): Promise<number> => {\n    const sumT = tf.sum(reduced);\n    const sum0 = await sumT.data();\n    tf.dispose(sumT);\n    return sum0[0];\n  };\n  const jsSum = async (): Promise<number> => {\n    const reducedData = await reduced.data(); // raw image rgb array\n    let sum0 = 0;\n    for (let i = 0; i < reducedData.length / 3; i++) sum0 += reducedData[3 * i + 2]; // look only at green value of each pixel\n    return sum0;\n  };\n  if (last.sumMethod === 0) {\n    const t0 = now();\n    await jsSum();\n    const t1 = now();\n    await tfSum();\n    const t2 = now();\n    last.sumMethod = t1 - t0 < t2 - t1 ? 1 : 2;\n  }\n  const res = last.sumMethod === 1 ? await jsSum() : await tfSum();\n  tf.dispose(reduced);\n  return res;\n};\n*/\n\nexport async function skip(config: Partial<Config>, input: Tensor) {\n  let skipFrame = false;\n  if (config.cacheSensitivity === 0 || !input.shape || input.shape.length !== 4 || input.shape[1] > 2048 || input.shape[2] > 2048) return skipFrame; // cache disabled or input is invalid or too large for cache analysis\n\n  /*\n  const checkSum = await checksum(input);\n  const diff = 100 * (Math.max(checkSum, last.inputSum) / Math.min(checkSum, last.inputSum) - 1);\n  last.inputSum = checkSum;\n  // if previous frame was skipped, skip this frame if changed more than cacheSensitivity\n  // if previous frame was not skipped, then look for cacheSensitivity or difference larger than one in previous frame to avoid resetting cache in subsequent frames unnecessarily\n  let skipFrame = diff < Math.max(config.cacheSensitivity, last.cacheDiff);\n  // if difference is above 10x threshold, don't use last value to force reset cache for significant change of scenes or images\n  last.cacheDiff = diff > 10 * config.cacheSensitivity ? 0 : diff;\n  skipFrame = skipFrame && (last.cacheDiff > 0); // if no cached diff value then force no skip\n  */\n\n  if (!last.inputTensor) {\n    last.inputTensor = tf.clone(input);\n  } else if (last.inputTensor.shape[1] !== input.shape[1] || last.inputTensor.shape[2] !== input.shape[2]) { // input resolution changed\n    tf.dispose(last.inputTensor);\n    last.inputTensor = tf.clone(input);\n  } else {\n    const t: Record<string, Tensor> = {};\n    t.diff = tf.sub(input, last.inputTensor);\n    t.squared = tf.mul(t.diff, t.diff);\n    t.sum = tf.sum(t.squared);\n    const diffSum = await t.sum.data();\n    const diffRelative = diffSum[0] / (input.shape[1] || 1) / (input.shape[2] || 1) / 255 / 3; // squared difference relative to input resolution and averaged per channel\n    tf.dispose([last.inputTensor, t.diff, t.squared, t.sum]);\n    last.inputTensor = tf.clone(input);\n    skipFrame = diffRelative <= (config.cacheSensitivity || 0);\n  }\n  return skipFrame;\n}\n\nexport async function compare(config: Partial<Config>, input1: Tensor, input2: Tensor): Promise<number> {\n  const t: Record<string, Tensor> = {};\n  if (!input1 || !input2 || input1.shape.length !== 4 || input1.shape.length !== input2.shape.length) {\n    if (!config.debug) log('invalid input tensor or tensor shapes do not match:', input1.shape, input2.shape);\n    return 0;\n  }\n  if (input1.shape[0] !== 1 || input2.shape[0] !== 1 || input1.shape[3] !== 3 || input2.shape[3] !== 3) {\n    if (!config.debug) log('input tensors must be of shape [1, height, width, 3]:', input1.shape, input2.shape);\n    return 0;\n  }\n  t.input1 = tf.clone(input1);\n  t.input2 = (input1.shape[1] !== input2.shape[1] || input1.shape[2] !== input2.shape[2]) ? tf.image.resizeBilinear(input2, [input1.shape[1], input1.shape[2]]) : tf.clone(input2);\n  t.diff = tf.sub(t.input1, t.input2);\n  t.squared = tf.mul(t.diff, t.diff);\n  t.sum = tf.sum(t.squared);\n  const diffSum = await t.sum.data();\n  const diffRelative = diffSum[0] / (input1.shape[1] || 1) / (input1.shape[2] || 1) / 255 / 3;\n  tf.dispose([t.input1, t.input2, t.diff, t.squared, t.sum]);\n  return diffRelative;\n}\n", "import * as tf from '../../dist/tfjs.esm.js';\nimport * as image from '../image/image';\n\n/** Env class that holds detected capabilities */\nexport class Env {\n  /** Running in Browser */\n  browser: boolean;\n  /** Running in NodeJS */\n  node: boolean;\n  /** Running in WebWorker thread */\n  worker: boolean;\n  /** Detected platform */\n  platform: string = '';\n  /** Detected agent */\n  agent: string = '';\n  /** List of supported backends */\n  backends: string[] = [];\n  /** Has any work been performed so far */\n  initial: boolean;\n  /** Are image filters supported? */\n  filter: boolean | undefined;\n  /** TFJS instance details */\n  tfjs: {\n    version: undefined | string,\n  };\n  /** Is offscreenCanvas supported? */\n  offscreen: undefined | boolean;\n  /** Are performance counter instant values or additive */\n  perfadd: boolean = false;\n  /** WASM detected capabilities */\n  wasm: {\n    supported: undefined | boolean,\n    backend: undefined | boolean,\n    simd: undefined | boolean,\n    multithread: undefined | boolean,\n  } = {\n      supported: undefined,\n      backend: undefined,\n      simd: undefined,\n      multithread: undefined,\n    };\n  /** WebGL detected capabilities */\n  webgl: {\n    supported: undefined | boolean,\n    backend: undefined | boolean,\n    version: undefined | string,\n    renderer: undefined | string,\n  } = {\n      supported: undefined,\n      backend: undefined,\n      version: undefined,\n      renderer: undefined,\n    };\n  /** WebGPU detected capabilities */\n  webgpu: {\n    supported: undefined | boolean,\n    backend: undefined | boolean,\n    adapter: undefined | string,\n  } = {\n      supported: undefined,\n      backend: undefined,\n      adapter: undefined,\n    };\n  /** CPU info */\n  cpu: {\n    model: undefined | string,\n    flags: string[],\n  } = {\n      model: undefined,\n      flags: [],\n    };\n  /** List of supported kernels for current backend */\n  kernels: string[] = [];\n  /** MonkeyPatch for Canvas */\n  Canvas: undefined;\n  /** MonkeyPatch for Image */\n  Image: undefined;\n  /** MonkeyPatch for ImageData */\n  ImageData: undefined;\n\n  constructor() {\n    this.browser = typeof navigator !== 'undefined';\n    this.node = (typeof process !== 'undefined') && (typeof process.versions !== 'undefined') && (typeof process.versions.node !== 'undefined');\n    this.tfjs = { version: tf.version['tfjs-core'] };\n    this.offscreen = typeof OffscreenCanvas !== 'undefined';\n    this.initial = true;\n    // @ts-ignore WorkerGlobalScope evaluated in browser only\n    this.worker = this.browser && this.offscreen ? (typeof WorkerGlobalScope !== 'undefined') : undefined;\n    if (typeof navigator !== 'undefined') {\n      const raw = navigator.userAgent.match(/\\(([^()]+)\\)/g);\n      if (raw && raw[0]) {\n        const platformMatch = raw[0].match(/\\(([^()]+)\\)/g);\n        this.platform = (platformMatch && platformMatch[0]) ? platformMatch[0].replace(/\\(|\\)/g, '') : '';\n        this.agent = navigator.userAgent.replace(raw[0], '');\n        if (this.platform[1]) this.agent = this.agent.replace(raw[1], '');\n        this.agent = this.agent.replace(/  /g, ' ');\n        // chrome offscreencanvas gpu memory leak\n        /*\n        const isChrome = env.agent.match(/Chrome\\/.[0-9]/g);\n        const verChrome = isChrome && isChrome[0] ? isChrome[0].split('/')[1] : 0;\n        if (verChrome > 92 && verChrome < 96) {\n          log('disabling offscreenCanvas due to browser error:', isChrome ? isChrome[0] : 'unknown');\n          this.offscreen = false;\n        }\n        */\n      }\n    } else if (typeof process !== 'undefined') {\n      this.platform = `${process.platform} ${process.arch}`;\n      this.agent = `NodeJS ${process.version}`;\n    }\n  }\n\n  /** update backend information */\n  async updateBackend() {\n    // analyze backends\n    this.backends = Object.keys(tf.engine().registryFactory);\n    this.wasm.supported = typeof WebAssembly !== 'undefined';\n    this.wasm.backend = this.backends.includes('wasm');\n    if (this.wasm.supported && this.wasm.backend && tf.getBackend() === 'wasm') {\n      this.wasm.simd = await tf.env().getAsync('WASM_HAS_SIMD_SUPPORT');\n      this.wasm.multithread = await tf.env().getAsync('WASM_HAS_MULTITHREAD_SUPPORT');\n    }\n    const c = image.canvas(100, 100);\n    const ctx = c ? c.getContext('webgl2') : undefined; // causes too many gl contexts\n    // const ctx = typeof tf.backend().getGPGPUContext !== undefined ? tf.backend().getGPGPUContext : null;\n    this.webgl.supported = typeof ctx !== 'undefined';\n    this.webgl.backend = this.backends.includes('webgl');\n    if (this.webgl.supported && this.webgl.backend && (tf.getBackend() === 'webgl' || tf.getBackend() === 'humangl')) {\n      // @ts-ignore getGPGPUContext only exists on WebGL backend\n      const gl = tf.backend().gpgpu !== 'undefined' ? await tf.backend().getGPGPUContext().gl : null;\n      if (gl) {\n        this.webgl.version = gl.getParameter(gl.VERSION);\n        this.webgl.renderer = gl.getParameter(gl.RENDERER);\n      }\n    }\n    // @ts-ignore navigator.gpu is only defined when webgpu is available in browser\n    this.webgpu.supported = this.browser && typeof navigator['gpu'] !== 'undefined';\n    this.webgpu.backend = this.backends.includes('webgpu');\n    try {\n      // @ts-ignore navigator.gpu is only defined when webgpu is available in browser\n      if (this.webgpu.supported) this.webgpu.adapter = (await navigator['gpu'].requestAdapter()).name;\n    } catch {\n      this.webgpu.supported = false;\n    }\n    try {\n      this.kernels = tf.getKernelsForBackend(tf.getBackend()).map((kernel) => kernel.kernelName.toLowerCase());\n    } catch { /**/ }\n  }\n\n  /** update cpu information */\n  async updateCPU() {\n    const cpu = { model: '', flags: [] };\n    if (this.node && this.platform.startsWith('linux')) {\n      /*\n      const fs = require('fs');\n      try {\n        const data = fs.readFileSync('/proc/cpuinfo').toString();\n        for (const line of data.split('\\n')) {\n          if (line.startsWith('model name')) cpu.model = line.match(/:(.*)/g)[0].replace(':', '').trim();\n          if (line.startsWith('flags')) cpu.flags = line.match(/:(.*)/g)[0].replace(':', '').trim().split(' ').sort();\n        }\n      } catch { }\n      */\n    }\n    if (!this['cpu']) Object.defineProperty(this, 'cpu', { value: cpu });\n    else this['cpu'] = cpu;\n  }\n}\n\nexport const env = new Env();\n", "import { log, join } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport type { GraphModel } from './types';\nimport type { Config } from '../config';\nimport * as modelsDefs from '../../models/models.json';\n\nconst options = {\n  cacheModels: true,\n  cacheSupported: true,\n  verbose: true,\n  debug: false,\n  modelBasePath: '',\n};\n\nexport type ModelInfo = {\n  name: string,\n  inCache: boolean,\n  sizeDesired: number,\n  sizeFromManifest: number,\n  sizeLoadedWeights: number,\n}\n\nexport const modelStats: Record<string, ModelInfo> = {};\n\nasync function httpHandler(url, init?): Promise<Response | null> {\n  if (options.debug) log('load model fetch:', url, init);\n  return fetch(url, init);\n}\n\nexport function setModelLoadOptions(config: Config) {\n  options.cacheModels = config.cacheModels;\n  options.verbose = config.debug;\n  options.modelBasePath = config.modelBasePath;\n}\n\nexport async function loadModel(modelPath: string | undefined): Promise<GraphModel> {\n  let modelUrl = join(options.modelBasePath, modelPath || '');\n  if (!modelUrl.toLowerCase().endsWith('.json')) modelUrl += '.json';\n  const modelPathSegments = modelUrl.includes('/') ? modelUrl.split('/') : modelUrl.split('\\\\');\n  const shortModelName = modelPathSegments[modelPathSegments.length - 1].replace('.json', '');\n  const cachedModelName = 'indexeddb://' + shortModelName; // generate short model name for cache\n  modelStats[shortModelName] = {\n    name: shortModelName,\n    sizeFromManifest: 0,\n    sizeLoadedWeights: 0,\n    sizeDesired: modelsDefs[shortModelName],\n    inCache: false,\n  };\n  options.cacheSupported = (typeof window !== 'undefined') && (typeof window.localStorage !== 'undefined') && (typeof window.indexedDB !== 'undefined'); // check if running in browser and if indexedb is available\n  let cachedModels = {};\n  try {\n    cachedModels = (options.cacheSupported && options.cacheModels) ? await tf.io.listModels() : {}; // list all models already in cache // this fails for webview although localStorage is defined\n  } catch {\n    options.cacheSupported = false;\n  }\n  modelStats[shortModelName].inCache = (options.cacheSupported && options.cacheModels) && Object.keys(cachedModels).includes(cachedModelName); // is model found in cache\n  const tfLoadOptions = typeof fetch === 'undefined' ? {} : { fetchFunc: (url, init?) => httpHandler(url, init) };\n  const model: GraphModel = new tf.GraphModel(modelStats[shortModelName].inCache ? cachedModelName : modelUrl, tfLoadOptions) as unknown as GraphModel; // create model prototype and decide if load from cache or from original modelurl\n  let loaded = false;\n  try {\n    // @ts-ignore private function\n    model.findIOHandler(); // decide how to actually load a model\n    if (options.debug) log('model load handler:', model['handler']);\n    // @ts-ignore private property\n    const artifacts = await model.handler.load(); // load manifest\n    modelStats[shortModelName].sizeFromManifest = artifacts?.weightData?.byteLength || 0;\n    model.loadSync(artifacts); // load weights\n    // @ts-ignore private property\n    modelStats[shortModelName].sizeLoadedWeights = model?.artifacts?.weightData?.byteLength || 0;\n    if (options.verbose) log('load model:', model['modelUrl'], { bytes: modelStats[shortModelName].sizeLoadedWeights }, options);\n    loaded = true;\n  } catch (err) {\n    log('error loading model:', modelUrl, err);\n  }\n  if (loaded && options.cacheModels && options.cacheSupported && !modelStats[shortModelName].inCache) { // save model to cache\n    try {\n      const saveResult = await model.save(cachedModelName);\n      log('model saved:', cachedModelName, saveResult);\n    } catch (err) {\n      log('error saving model:', modelUrl, err);\n    }\n  }\n  return model;\n}\n", "/**\n * Loader and Validator for all models used by Human\n */\n\nimport { env } from './util/env';\nimport { log } from './util/util';\nimport * as gear from './gear/gear';\nimport * as ssrnetAge from './gear/ssrnet-age';\nimport * as ssrnetGender from './gear/ssrnet-gender';\nimport * as antispoof from './face/antispoof';\nimport * as blazeface from './face/blazeface';\nimport * as blazepose from './body/blazepose';\nimport * as centernet from './object/centernet';\nimport * as efficientpose from './body/efficientpose';\nimport * as emotion from './gear/emotion';\nimport * as mobilefacenet from './face/mobilefacenet';\nimport * as insightface from './face/insightface';\nimport * as facemesh from './face/facemesh';\nimport * as faceres from './face/faceres';\nimport * as handpose from './hand/handpose';\nimport * as handtrack from './hand/handtrack';\nimport * as iris from './face/iris';\nimport * as liveness from './face/liveness';\nimport * as movenet from './body/movenet';\nimport * as nanodet from './object/nanodet';\nimport * as posenet from './body/posenet';\nimport * as segmentation from './segmentation/segmentation';\nimport { modelStats, ModelInfo } from './tfjs/load';\nimport type { GraphModel } from './tfjs/types';\nimport type { Human } from './human';\n\n/** Instances of all possible TFJS Graph Models used by Human\n * - loaded as needed based on configuration\n * - initialized explictly with `human.load()` method\n * - initialized implicity on first call to `human.detect()`\n * - each model can be `null` if not loaded, instance of `GraphModel` if loaded or `Promise` if loading\n */\nexport class Models {\n  ssrnetage: null | GraphModel | Promise<GraphModel> = null;\n  gear: null | GraphModel | Promise<GraphModel> = null;\n  blazeposedetect: null | GraphModel | Promise<GraphModel> = null;\n  blazepose: null | GraphModel | Promise<GraphModel> = null;\n  centernet: null | GraphModel | Promise<GraphModel> = null;\n  efficientpose: null | GraphModel | Promise<GraphModel> = null;\n  mobilefacenet: null | GraphModel | Promise<GraphModel> = null;\n  insightface: null | GraphModel | Promise<GraphModel> = null;\n  emotion: null | GraphModel | Promise<GraphModel> = null;\n  facedetect: null | GraphModel | Promise<GraphModel> = null;\n  faceiris: null | GraphModel | Promise<GraphModel> = null;\n  facemesh: null | GraphModel | Promise<GraphModel> = null;\n  faceres: null | GraphModel | Promise<GraphModel> = null;\n  ssrnetgender: null | GraphModel | Promise<GraphModel> = null;\n  handpose: null | GraphModel | Promise<GraphModel> = null;\n  handskeleton: null | GraphModel | Promise<GraphModel> = null;\n  handtrack: null | GraphModel | Promise<GraphModel> = null;\n  liveness: null | GraphModel | Promise<GraphModel> = null;\n  movenet: null | GraphModel | Promise<GraphModel> = null;\n  nanodet: null | GraphModel | Promise<GraphModel> = null;\n  posenet: null | GraphModel | Promise<GraphModel> = null;\n  segmentation: null | GraphModel | Promise<GraphModel> = null;\n  antispoof: null | GraphModel | Promise<GraphModel> = null;\n}\n\nexport type ModelStats = {\n  numLoadedModels: number,\n  numEnabledModels: undefined,\n  numDefinedModels: number,\n  percentageLoaded: number,\n  totalSizeFromManifest: number,\n  totalSizeWeights: number,\n  totalSizeLoading: number,\n  totalSizeEnabled: undefined,\n  modelStats: ModelInfo[],\n}\n\nexport const getModelStats = (instance: Human): ModelStats => {\n  let totalSizeFromManifest = 0;\n  let totalSizeWeights = 0;\n  let totalSizeLoading = 0;\n  for (const m of Object.values(modelStats)) {\n    totalSizeFromManifest += m.sizeFromManifest;\n    totalSizeWeights += m.sizeLoadedWeights;\n    totalSizeLoading += m.sizeDesired;\n  }\n  const percentageLoaded = totalSizeLoading > 0 ? totalSizeWeights / totalSizeLoading : 0;\n  return {\n    numLoadedModels: Object.values(modelStats).length,\n    numEnabledModels: undefined,\n    numDefinedModels: Object.keys(instance.models).length,\n    percentageLoaded,\n    totalSizeFromManifest,\n    totalSizeWeights,\n    totalSizeLoading,\n    totalSizeEnabled: undefined,\n    modelStats: Object.values(modelStats),\n  };\n};\n\nexport function reset(instance: Human): void {\n  // if (instance.config.debug) log('resetting loaded models');\n  for (const model of Object.keys(instance.models)) instance.models[model as keyof Models] = null;\n}\n\n/** Load method preloads all instance.configured models on-demand */\nexport async function load(instance: Human): Promise<void> {\n  if (env.initial) reset(instance);\n  if (instance.config.hand.enabled) { // handpose model is a combo that must be loaded as a whole\n    if (!instance.models.handpose && instance.config.hand.detector?.modelPath?.includes('handdetect')) {\n      [instance.models.handpose, instance.models.handskeleton] = await handpose.load(instance.config);\n    }\n    if (!instance.models.handskeleton && instance.config.hand.landmarks && instance.config.hand.detector?.modelPath?.includes('handdetect')) {\n      [instance.models.handpose, instance.models.handskeleton] = await handpose.load(instance.config);\n    }\n  }\n  if (instance.config.body.enabled && !instance.models.blazepose && instance.config.body?.modelPath?.includes('blazepose')) instance.models.blazepose = blazepose.loadPose(instance.config);\n  // @ts-ignore optional model\n  if (instance.config.body.enabled && !instance.models.blazeposedetect && instance.config.body['detector'] && instance.config.body['detector']['modelPath']) instance.models.blazeposedetect = blazepose.loadDetect(instance.config);\n  if (instance.config.body.enabled && !instance.models.efficientpose && instance.config.body?.modelPath?.includes('efficientpose')) instance.models.efficientpose = efficientpose.load(instance.config);\n  if (instance.config.body.enabled && !instance.models.movenet && instance.config.body?.modelPath?.includes('movenet')) instance.models.movenet = movenet.load(instance.config);\n  if (instance.config.body.enabled && !instance.models.posenet && instance.config.body?.modelPath?.includes('posenet')) instance.models.posenet = posenet.load(instance.config);\n  if (instance.config.face.enabled && !instance.models.facedetect) instance.models.facedetect = blazeface.load(instance.config);\n  if (instance.config.face.enabled && instance.config.face.antispoof?.enabled && !instance.models.antispoof) instance.models.antispoof = antispoof.load(instance.config);\n  if (instance.config.face.enabled && instance.config.face.liveness?.enabled && !instance.models.liveness) instance.models.liveness = liveness.load(instance.config);\n  if (instance.config.face.enabled && instance.config.face.description?.enabled && !instance.models.faceres) instance.models.faceres = faceres.load(instance.config);\n  if (instance.config.face.enabled && instance.config.face.emotion?.enabled && !instance.models.emotion) instance.models.emotion = emotion.load(instance.config);\n  if (instance.config.face.enabled && instance.config.face.iris?.enabled && !instance.config.face.attention?.enabled && !instance.models.faceiris) instance.models.faceiris = iris.load(instance.config);\n  if (instance.config.face.enabled && instance.config.face.mesh?.enabled && !instance.models.facemesh) instance.models.facemesh = facemesh.load(instance.config);\n  // @ts-ignore optional model\n  if (instance.config.face.enabled && instance.config.face['gear']?.enabled && !instance.models.gear) instance.models.gear = gear.load(instance.config);\n  // @ts-ignore optional model\n  if (instance.config.face.enabled && instance.config.face['ssrnet']?.enabled && !instance.models.ssrnetage) instance.models.ssrnetage = ssrnetAge.load(instance.config);\n  // @ts-ignore optional model\n  if (instance.config.face.enabled && instance.config.face['ssrnet']?.enabled && !instance.models.ssrnetgender) instance.models.ssrnetgender = ssrnetGender.load(instance.config);\n  // @ts-ignore optional model\n  if (instance.config.face.enabled && instance.config.face['mobilefacenet']?.enabled && !instance.models.mobilefacenet) instance.models.mobilefacenet = mobilefacenet.load(instance.config);\n  if (instance.config.face.enabled && instance.config.face['insightface']?.enabled && !instance.models.insightface) instance.models.insightface = insightface.load(instance.config);\n  if (instance.config.hand.enabled && !instance.models.handtrack && instance.config.hand.detector?.modelPath?.includes('handtrack')) instance.models.handtrack = handtrack.loadDetect(instance.config);\n  if (instance.config.hand.enabled && instance.config.hand.landmarks && !instance.models.handskeleton && instance.config.hand.detector?.modelPath?.includes('handtrack')) instance.models.handskeleton = handtrack.loadSkeleton(instance.config);\n  if (instance.config.object.enabled && !instance.models.centernet && instance.config.object?.modelPath?.includes('centernet')) instance.models.centernet = centernet.load(instance.config);\n  if (instance.config.object.enabled && !instance.models.nanodet && instance.config.object?.modelPath?.includes('nanodet')) instance.models.nanodet = nanodet.load(instance.config);\n  if (instance.config.segmentation.enabled && !instance.models.segmentation) instance.models.segmentation = segmentation.load(instance.config);\n\n  // models are loaded in parallel asynchronously so lets wait until they are actually loaded\n  for await (const model of Object.keys(instance.models)) {\n    if (instance.models[model as keyof Models] && typeof instance.models[model as keyof Models] !== 'undefined') {\n      instance.models[model as keyof Models] = await instance.models[model as keyof Models];\n    }\n  }\n}\n\nexport async function validate(instance: Human): Promise<void> {\n  interface Op { name: string, category: string, op: string }\n  const simpleOps = ['const', 'placeholder', 'noop', 'pad', 'squeeze', 'add', 'sub', 'mul', 'div'];\n  for (const defined of Object.keys(instance.models)) {\n    const model: GraphModel | null = instance.models[defined as keyof Models] as GraphModel | null;\n    if (!model) continue;\n    const ops: string[] = [];\n    // @ts-ignore // executor is a private method\n    const executor = model?.executor;\n    if (executor && executor.graph.nodes) {\n      for (const kernel of Object.values(executor.graph.nodes)) {\n        const op = (kernel as Op).op.toLowerCase();\n        if (!ops.includes(op)) ops.push(op);\n      }\n    } else {\n      if (!executor && instance.config.debug) log('model signature not determined:', defined);\n    }\n    const missing: string[] = [];\n    for (const op of ops) {\n      if (!simpleOps.includes(op) // exclude simple ops\n        && !instance.env.kernels.includes(op) // check actual kernel ops\n        && !instance.env.kernels.includes(op.replace('_', '')) // check variation without _\n        && !instance.env.kernels.includes(op.replace('native', '')) // check standard variation\n        && !instance.env.kernels.includes(op.replace('v2', ''))) { // check non-versioned variation\n        missing.push(op);\n      }\n    }\n    // log('model validation ops:', defined, ops);\n    if (instance.config.debug && missing.length > 0) log('model validation failed:', defined, missing);\n  }\n}\n", "/**\n * GEAR [gender/emotion/age/race] model implementation\n *\n * Based on: [**GEAR Predictor**](https://github.com/Udolf15/GEAR-Predictor)\n */\n\nimport { log, now } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport type { Gender, Race } from '../result';\nimport type { Config } from '../config';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport { env } from '../util/env';\n\nexport type GearType = { age: number, gender: Gender, genderScore: number, race: Array<{ score: number, race: Race }> }\nlet model: GraphModel | null;\nconst last: Array<GearType> = [];\nconst raceNames = ['white', 'black', 'asian', 'indian', 'other'];\nconst ageWeights = [15, 23, 28, 35.5, 45.5, 55.5, 65];\nlet lastCount = 0;\nlet lastTime = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function load(config: Config) {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face['gear']?.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function predict(image: Tensor, config: Config, idx: number, count: number): Promise<GearType> {\n  if (!model) return { age: 0, gender: 'unknown', genderScore: 0, race: [] };\n  const skipFrame = skipped < (config.face['gear']?.skipFrames || 0);\n  const skipTime = (config.face['gear']?.skipTime || 0) > (now() - lastTime);\n  if (config.skipAllowed && skipTime && skipFrame && (lastCount === count) && last[idx]) {\n    skipped++;\n    return last[idx];\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    if (!model?.inputs[0].shape) return;\n    const t: Record<string, Tensor> = {};\n    // t.resize = tf.image.resizeBilinear(image, [model?.inputs[0].shape[2], model?.inputs[0].shape[1]], false);\n    const box = [[0.0, 0.10, 0.90, 0.90]]; // empyrical values for top, left, bottom, right\n    t.resize = tf.image.cropAndResize(image, box, [0], [model.inputs[0].shape[2], model.inputs[0].shape[1]]);\n    const obj: GearType = { age: 0, gender: 'unknown', genderScore: 0, race: [] };\n    if (config.face['gear']?.enabled) [t.age, t.gender, t.race] = model.execute(t.resize, ['age_output', 'gender_output', 'race_output']) as Tensor[];\n    const gender = await t.gender.data();\n    obj.gender = gender[0] > gender[1] ? 'male' : 'female';\n    obj.genderScore = Math.round(100 * (gender[0] > gender[1] ? gender[0] : gender[1])) / 100;\n    const race = await t.race.data();\n    for (let i = 0; i < race.length; i++) {\n      if (race[i] > (config.face['gear']?.minConfidence || 0.2)) obj.race.push({ score: Math.round(100 * race[i]) / 100, race: raceNames[i] as Race });\n    }\n    obj.race.sort((a, b) => b.score - a.score);\n    // {0: 'Below20', 1: '21-25', 2: '26-30', 3: '31-40',4: '41-50', 5: '51-60', 6: 'Above60'}\n    const ageDistribution = Array.from(await t.age.data());\n    const ageSorted = ageDistribution.map((a, i) => [ageWeights[i], a]).sort((a, b) => b[1] - a[1]);\n    let age = ageSorted[0][0]; // pick best starting point\n    for (let i = 1; i < ageSorted.length; i++) age += ageSorted[i][1] * (ageSorted[i][0] - age); // adjust with each other choice by weight\n    obj.age = Math.round(10 * age) / 10;\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    last[idx] = obj;\n    lastCount = count;\n    lastTime = now();\n    resolve(obj);\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm.js';\nimport type { Tensor } from './types';\n\nexport const constants: Record<string, Tensor | number | number[]> = {\n  tf255: 255,\n  tf1: 1,\n  tf2: 2,\n  tf05: 0.5,\n  tf127: 127.5,\n  rgb: [0.2989, 0.5870, 0.1140],\n};\n\nexport function init() {\n  constants.tf255 = tf.scalar(255, 'float32');\n  constants.tf1 = tf.scalar(1, 'float32');\n  constants.tf2 = tf.scalar(2, 'float32');\n  constants.tf05 = tf.scalar(0.5, 'float32');\n  constants.tf127 = tf.scalar(127.5, 'float32');\n  constants.rgb = tf.tensor1d([0.2989, 0.5870, 0.1140], 'float32'); // factors for red/green/blue colors when converting to grayscale\n}\n", "/**\n * Age model implementation\n *\n * Based on: [**SSR-Net**](https://github.com/shamangary/SSR-Net)\n */\n\nimport { log, now } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport { env } from '../util/env';\nimport { constants } from '../tfjs/constants';\nimport type { Config } from '../config';\nimport type { GraphModel, Tensor } from '../tfjs/types';\n\nlet model: GraphModel | null;\nconst last: Array<{ age: number }> = [];\nlet lastCount = 0;\nlet lastTime = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function load(config: Config) {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face['ssrnet'].modelPathAge);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function predict(image: Tensor, config: Config, idx: number, count: number): Promise<{ age: number }> {\n  if (!model) return { age: 0 };\n  const skipFrame = skipped < (config.face['ssrnet']?.skipFrames || 0);\n  const skipTime = (config.face['ssrnet']?.skipTime || 0) > (now() - lastTime);\n  if (config.skipAllowed && skipFrame && skipTime && (lastCount === count) && last[idx]?.age && (last[idx]?.age > 0)) {\n    skipped++;\n    return last[idx];\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    if (!model?.inputs || !model.inputs[0] || !model.inputs[0].shape) return;\n    const t: Record<string, Tensor> = {};\n    t.resize = tf.image.resizeBilinear(image, [model.inputs[0].shape[2], model.inputs[0].shape[1]], false);\n    t.enhance = tf.mul(t.resize, constants.tf255);\n    const obj = { age: 0 };\n    if (config.face['ssrnet'].enabled) t.age = model.execute(t.enhance) as Tensor;\n    if (t.age) {\n      const data = await t.age.data();\n      obj.age = Math.trunc(10 * data[0]) / 10;\n    }\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    last[idx] = obj;\n    lastCount = count;\n    lastTime = now();\n    resolve(obj);\n  });\n}\n", "/**\n * Gender model implementation\n *\n * Based on: [**SSR-Net**](https://github.com/shamangary/SSR-Net)\n */\n\nimport { log, now } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport { constants } from '../tfjs/constants';\nimport type { Gender } from '../result';\nimport type { Config } from '../config';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport { env } from '../util/env';\n\nlet model: GraphModel | null;\nconst last: Array<{ gender: Gender, genderScore: number }> = [];\nlet lastCount = 0;\nlet lastTime = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\n// tuning values\nconst rgb = [0.2989, 0.5870, 0.1140]; // factors for red/green/blue colors when converting to grayscale\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function load(config: Config | any) {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face['ssrnet'].modelPathGender);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function predict(image: Tensor, config: Config, idx, count): Promise<{ gender: Gender, genderScore: number }> {\n  if (!model) return { gender: 'unknown', genderScore: 0 };\n  const skipFrame = skipped < (config.face['ssrnet']?.skipFrames || 0);\n  const skipTime = (config.face['ssrnet']?.skipTime || 0) > (now() - lastTime);\n  if (config.skipAllowed && skipFrame && skipTime && (lastCount === count) && last[idx]?.gender && (last[idx]?.genderScore > 0)) {\n    skipped++;\n    return last[idx];\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    if (!model?.inputs[0].shape) return;\n    const t: Record<string, Tensor> = {};\n    t.resize = tf.image.resizeBilinear(image, [model.inputs[0].shape[2], model.inputs[0].shape[1]], false);\n    t.enhance = tf.tidy(() => {\n      const [red, green, blue] = tf.split(t.resize, 3, 3);\n      const redNorm = tf.mul(red, rgb[0]);\n      const greenNorm = tf.mul(green, rgb[1]);\n      const blueNorm = tf.mul(blue, rgb[2]);\n      const grayscale = tf.addN([redNorm, greenNorm, blueNorm]);\n      const normalize = tf.mul(tf.sub(grayscale, constants.tf05), 2); // range grayscale:-1..1\n      return normalize;\n    });\n    const obj: { gender: Gender, genderScore: number } = { gender: 'unknown', genderScore: 0 };\n    if (config.face['ssrnet'].enabled) t.gender = model.execute(t.enhance) as Tensor;\n    const data = await t.gender.data();\n    obj.gender = data[0] > data[1] ? 'female' : 'male'; // returns two values 0..1, bigger one is prediction\n    obj.genderScore = data[0] > data[1] ? (Math.trunc(100 * data[0]) / 100) : (Math.trunc(100 * data[1]) / 100);\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    last[idx] = obj;\n    lastCount = count;\n    lastTime = now();\n    resolve(obj);\n  });\n}\n", "/**\n * Anti-spoofing model implementation\n */\n\nimport { log, now } from '../util/util';\nimport type { Config } from '../config';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport { env } from '../util/env';\n\nlet model: GraphModel | null;\nconst cached: Array<number> = [];\nlet skipped = Number.MAX_SAFE_INTEGER;\nlet lastCount = 0;\nlet lastTime = 0;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face.antispoof?.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\nexport async function predict(image: Tensor, config: Config, idx: number, count: number): Promise<number> {\n  if (!model) return 0;\n  const skipTime = (config.face.antispoof?.skipTime || 0) > (now() - lastTime);\n  const skipFrame = skipped < (config.face.antispoof?.skipFrames || 0);\n  if (config.skipAllowed && skipTime && skipFrame && (lastCount === count) && cached[idx]) {\n    skipped++;\n    return cached[idx];\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    const resize = tf.image.resizeBilinear(image, [model?.inputs[0].shape ? model.inputs[0].shape[2] : 0, model?.inputs[0].shape ? model.inputs[0].shape[1] : 0], false);\n    const res = model?.execute(resize) as Tensor;\n    const num = (await res.data())[0];\n    cached[idx] = Math.round(100 * num) / 100;\n    lastCount = count;\n    lastTime = now();\n    tf.dispose([resize, res]);\n    resolve(cached[idx]);\n  });\n}\n", "/**\n * BlazeFace, FaceMesh & Iris model implementation\n * See `facemesh.ts` for entry point\n */\n\nexport const meshAnnotations: Record<string, number[]> = {\n  silhouette: [\n    10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288,\n    397, 365, 379, 378, 400, 377, 152, 148, 176, 149, 150, 136,\n    172, 58, 132, 93, 234, 127, 162, 21, 54, 103, 67, 109,\n  ],\n  // lipsUpperOuter: [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291], // 11\n  // lipsLowerOuter: [146, 91, 181, 84, 17, 314, 405, 321, 375, 291], // 10\n  // lipsUpperInner: [78, 191, 80, 81, 82, 13, 312, 311, 310, 415, 308], // 11\n  // lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308], // 11\n  lipsUpperOuter: [185, 40, 39, 37, 0, 267, 269, 270, 409],\n  lipsLowerOuter: [61, 146, 91, 181, 84, 17, 314, 405, 321, 375, 291],\n  lipsUpperInner: [191, 80, 81, 82, 13, 312, 311, 310, 415],\n  lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308],\n  lipsLowerSemiOuter: [76, 77, 90, 180, 85, 16, 315, 404, 320, 307, 306],\n  lipsUpperSemiOuter: [184, 74, 73, 72, 11, 302, 303, 304, 408],\n  lipsLowerSemiInner: [62, 96, 89, 179, 86, 15, 316, 403, 319, 325, 292],\n  lipsUpperSemiInner: [183, 42, 41, 38, 12, 268, 271, 272, 407],\n  rightEyeUpper0: [246, 161, 160, 159, 158, 157, 173], // 7\n  rightEyeLower0: [33, 7, 163, 144, 145, 153, 154, 155, 133], // 9\n  rightEyeUpper1: [247, 30, 29, 27, 28, 56, 190], // 7\n  rightEyeLower1: [130, 25, 110, 24, 23, 22, 26, 112, 243], // 9\n  rightEyeUpper2: [113, 225, 224, 223, 222, 221, 189], // 7\n  rightEyeLower2: [226, 31, 228, 229, 230, 231, 232, 233, 244], // 9\n  rightEyeLower3: [143, 111, 117, 118, 119, 120, 121, 128, 245], // 9\n  rightEyebrowUpper: [156, 70, 63, 105, 66, 107, 55, 193], // 8\n  rightEyebrowLower: [35, 124, 46, 53, 52, 65], // 6\n  rightEyeIris: [473, 474, 475, 476, 477], // 5\n  leftEyeUpper0: [466, 388, 387, 386, 385, 384, 398],\n  leftEyeLower0: [263, 249, 390, 373, 374, 380, 381, 382, 362],\n  leftEyeUpper1: [467, 260, 259, 257, 258, 286, 414],\n  leftEyeLower1: [359, 255, 339, 254, 253, 252, 256, 341, 463],\n  leftEyeUpper2: [342, 445, 444, 443, 442, 441, 413],\n  leftEyeLower2: [446, 261, 448, 449, 450, 451, 452, 453, 464],\n  leftEyeLower3: [372, 340, 346, 347, 348, 349, 350, 357, 465],\n  leftEyebrowUpper: [383, 300, 293, 334, 296, 336, 285, 417],\n  leftEyebrowLower: [265, 353, 276, 283, 282, 295],\n  leftEyeIris: [468, 469, 470, 471, 472],\n  midwayBetweenEyes: [168],\n  noseTip: [1],\n  noseBottom: [2],\n  noseRightCorner: [98],\n  noseLeftCorner: [327],\n  rightCheek: [205],\n  leftCheek: [425],\n};\n\nexport const meshLandmarks: Record<string, number | number[]> = {\n  count: 468,\n  mouth: 13,\n  symmetryLine: [13, meshAnnotations['midwayBetweenEyes'][0]],\n};\n\nexport const blazeFaceLandmarks: Record<string, number | number[]> = {\n  leftEye: 0,\n  rightEye: 1,\n  nose: 2,\n  mouth: 3,\n  leftEar: 4,\n  rightEar: 5,\n  symmetryLine: [3, 2],\n};\n\nexport const irisIndices: Array<{ key: string, indices: number[] }> = [ // A mapping from facemesh model keypoints to iris model keypoints.\n  { key: 'EyeUpper0', indices: [9, 10, 11, 12, 13, 14, 15] }, // 7 x 3d\n  { key: 'EyeUpper1', indices: [25, 26, 27, 28, 29, 30, 31] }, // 7 x 3d\n  { key: 'EyeUpper2', indices: [41, 42, 43, 44, 45, 46, 47] }, // 7 x 3d\n  { key: 'EyeLower0', indices: [0, 1, 2, 3, 4, 5, 6, 7, 8] }, // 7 x 3d\n  { key: 'EyeLower1', indices: [16, 17, 18, 19, 20, 21, 22, 23, 24] }, // 9 x 3d\n  { key: 'EyeLower2', indices: [32, 33, 34, 35, 36, 37, 38, 39, 40] }, // 9 x 3d\n  { key: 'EyeLower3', indices: [54, 55, 56, 57, 58, 59, 60, 61, 62] }, // 9 x 3d\n  { key: 'EyebrowUpper', indices: [63, 64, 65, 66, 67, 68, 69, 70] }, // 8 x 3d\n  { key: 'EyebrowLower', indices: [48, 49, 50, 51, 52, 53] }, // 6 x 3d\n];\n\nexport const UV468: [number, number][] = [\n  [0.499976992607117, 0.652534008026123],\n  [0.500025987625122, 0.547487020492554],\n  [0.499974012374878, 0.602371990680695],\n  [0.482113003730774, 0.471979022026062],\n  [0.500150978565216, 0.527155995368958],\n  [0.499909996986389, 0.498252987861633],\n  [0.499523013830185, 0.40106201171875],\n  [0.289712011814117, 0.380764007568359],\n  [0.499954998493195, 0.312398016452789],\n  [0.499987006187439, 0.269918978214264],\n  [0.500023007392883, 0.107050001621246],\n  [0.500023007392883, 0.666234016418457],\n  [0.5000159740448, 0.679224014282227],\n  [0.500023007392883, 0.692348003387451],\n  [0.499976992607117, 0.695277988910675],\n  [0.499976992607117, 0.70593398809433],\n  [0.499976992607117, 0.719385027885437],\n  [0.499976992607117, 0.737019002437592],\n  [0.499967992305756, 0.781370997428894],\n  [0.499816000461578, 0.562981009483337],\n  [0.473773002624512, 0.573909997940063],\n  [0.104906998574734, 0.254140973091125],\n  [0.365929991006851, 0.409575998783112],\n  [0.338757991790771, 0.41302502155304],\n  [0.311120003461838, 0.409460008144379],\n  [0.274657994508743, 0.389131009578705],\n  [0.393361985683441, 0.403706014156342],\n  [0.345234006643295, 0.344011008739471],\n  [0.370094001293182, 0.346076011657715],\n  [0.319321990013123, 0.347265005111694],\n  [0.297903001308441, 0.353591024875641],\n  [0.24779200553894, 0.410809993743896],\n  [0.396889001131058, 0.842755019664764],\n  [0.280097991228104, 0.375599980354309],\n  [0.106310002505779, 0.399955987930298],\n  [0.2099249958992, 0.391353011131287],\n  [0.355807989835739, 0.534406006336212],\n  [0.471751004457474, 0.65040397644043],\n  [0.474155008792877, 0.680191993713379],\n  [0.439785003662109, 0.657229006290436],\n  [0.414617002010345, 0.66654098033905],\n  [0.450374007225037, 0.680860996246338],\n  [0.428770989179611, 0.682690978050232],\n  [0.374971002340317, 0.727805018424988],\n  [0.486716985702515, 0.547628998756409],\n  [0.485300987958908, 0.527395009994507],\n  [0.257764995098114, 0.314490020275116],\n  [0.401223003864288, 0.455172002315521],\n  [0.429818987846375, 0.548614978790283],\n  [0.421351999044418, 0.533740997314453],\n  [0.276895999908447, 0.532056987285614],\n  [0.483370006084442, 0.499586999416351],\n  [0.33721199631691, 0.282882988452911],\n  [0.296391993761063, 0.293242990970612],\n  [0.169294998049736, 0.193813979625702],\n  [0.447580009698868, 0.302609980106354],\n  [0.392390012741089, 0.353887975215912],\n  [0.354490011930466, 0.696784019470215],\n  [0.067304998636246, 0.730105042457581],\n  [0.442739009857178, 0.572826027870178],\n  [0.457098007202148, 0.584792017936707],\n  [0.381974011659622, 0.694710969924927],\n  [0.392388999462128, 0.694203019142151],\n  [0.277076005935669, 0.271932005882263],\n  [0.422551989555359, 0.563233017921448],\n  [0.385919004678726, 0.281364023685455],\n  [0.383103013038635, 0.255840003490448],\n  [0.331431001424789, 0.119714021682739],\n  [0.229923993349075, 0.232002973556519],\n  [0.364500999450684, 0.189113974571228],\n  [0.229622006416321, 0.299540996551514],\n  [0.173287004232407, 0.278747975826263],\n  [0.472878992557526, 0.666198015213013],\n  [0.446828007698059, 0.668527007102966],\n  [0.422762006521225, 0.673889994621277],\n  [0.445307999849319, 0.580065965652466],\n  [0.388103008270264, 0.693961024284363],\n  [0.403039008378983, 0.706539988517761],\n  [0.403629004955292, 0.693953037261963],\n  [0.460041999816895, 0.557139039039612],\n  [0.431158006191254, 0.692366003990173],\n  [0.452181994915009, 0.692366003990173],\n  [0.475387006998062, 0.692366003990173],\n  [0.465828001499176, 0.779190003871918],\n  [0.472328990697861, 0.736225962638855],\n  [0.473087012767792, 0.717857003211975],\n  [0.473122000694275, 0.704625964164734],\n  [0.473033010959625, 0.695277988910675],\n  [0.427942007780075, 0.695277988910675],\n  [0.426479011774063, 0.703539967536926],\n  [0.423162013292313, 0.711845993995667],\n  [0.4183090031147, 0.720062971115112],\n  [0.390094995498657, 0.639572978019714],\n  [0.013953999616206, 0.560034036636353],\n  [0.499913990497589, 0.58014702796936],\n  [0.413199990987778, 0.69539999961853],\n  [0.409626007080078, 0.701822996139526],\n  [0.468080013990402, 0.601534962654114],\n  [0.422728985548019, 0.585985004901886],\n  [0.463079988956451, 0.593783974647522],\n  [0.37211999297142, 0.47341400384903],\n  [0.334562003612518, 0.496073007583618],\n  [0.411671012639999, 0.546965003013611],\n  [0.242175996303558, 0.14767599105835],\n  [0.290776997804642, 0.201445996761322],\n  [0.327338010072708, 0.256527006626129],\n  [0.399509996175766, 0.748921036720276],\n  [0.441727995872498, 0.261676013469696],\n  [0.429764986038208, 0.187834024429321],\n  [0.412198007106781, 0.108901023864746],\n  [0.288955003023148, 0.398952007293701],\n  [0.218936994671822, 0.435410976409912],\n  [0.41278201341629, 0.398970007896423],\n  [0.257135003805161, 0.355440020561218],\n  [0.427684992551804, 0.437960982322693],\n  [0.448339998722076, 0.536936044692993],\n  [0.178560003638268, 0.45755398273468],\n  [0.247308000922203, 0.457193970680237],\n  [0.286267012357712, 0.467674970626831],\n  [0.332827985286713, 0.460712015628815],\n  [0.368755996227264, 0.447206974029541],\n  [0.398963987827301, 0.432654976844788],\n  [0.476410001516342, 0.405806005001068],\n  [0.189241006970406, 0.523923993110657],\n  [0.228962004184723, 0.348950982093811],\n  [0.490725994110107, 0.562400996685028],\n  [0.404670000076294, 0.485132992267609],\n  [0.019469000399113, 0.401564002037048],\n  [0.426243007183075, 0.420431017875671],\n  [0.396993011236191, 0.548797011375427],\n  [0.266469985246658, 0.376977026462555],\n  [0.439121007919312, 0.51895797252655],\n  [0.032313998788595, 0.644356966018677],\n  [0.419054001569748, 0.387154996395111],\n  [0.462783008813858, 0.505746960639954],\n  [0.238978996872902, 0.779744982719421],\n  [0.198220998048782, 0.831938028335571],\n  [0.107550002634525, 0.540755033493042],\n  [0.183610007166862, 0.740257024765015],\n  [0.134409993886948, 0.333683013916016],\n  [0.385764002799988, 0.883153975009918],\n  [0.490967005491257, 0.579378008842468],\n  [0.382384985685349, 0.508572995662689],\n  [0.174399003386497, 0.397670984268188],\n  [0.318785011768341, 0.39623498916626],\n  [0.343364000320435, 0.400596976280212],\n  [0.396100014448166, 0.710216999053955],\n  [0.187885001301765, 0.588537991046906],\n  [0.430987000465393, 0.944064974784851],\n  [0.318993002176285, 0.898285031318665],\n  [0.266247987747192, 0.869701027870178],\n  [0.500023007392883, 0.190576016902924],\n  [0.499976992607117, 0.954452991485596],\n  [0.366169989109039, 0.398822009563446],\n  [0.393207013607025, 0.39553701877594],\n  [0.410373002290726, 0.391080021858215],\n  [0.194993004202843, 0.342101991176605],\n  [0.388664990663528, 0.362284004688263],\n  [0.365961998701096, 0.355970978736877],\n  [0.343364000320435, 0.355356991291046],\n  [0.318785011768341, 0.35834002494812],\n  [0.301414996385574, 0.363156020641327],\n  [0.058132998645306, 0.319076001644135],\n  [0.301414996385574, 0.387449026107788],\n  [0.499987989664078, 0.618434011936188],\n  [0.415838003158569, 0.624195992946625],\n  [0.445681989192963, 0.566076993942261],\n  [0.465844005346298, 0.620640993118286],\n  [0.49992299079895, 0.351523995399475],\n  [0.288718998432159, 0.819945991039276],\n  [0.335278987884521, 0.852819979190826],\n  [0.440512001514435, 0.902418971061707],\n  [0.128294005990028, 0.791940987110138],\n  [0.408771991729736, 0.373893976211548],\n  [0.455606997013092, 0.451801002025604],\n  [0.499877005815506, 0.908990025520325],\n  [0.375436991453171, 0.924192011356354],\n  [0.11421000212431, 0.615022003650665],\n  [0.448662012815475, 0.695277988910675],\n  [0.4480200111866, 0.704632043838501],\n  [0.447111994028091, 0.715808033943176],\n  [0.444831997156143, 0.730794012546539],\n  [0.430011987686157, 0.766808986663818],\n  [0.406787008047104, 0.685672998428345],\n  [0.400738000869751, 0.681069016456604],\n  [0.392399996519089, 0.677703022956848],\n  [0.367855995893478, 0.663918972015381],\n  [0.247923001646996, 0.601333022117615],\n  [0.452769994735718, 0.420849978923798],\n  [0.43639200925827, 0.359887003898621],\n  [0.416164010763168, 0.368713974952698],\n  [0.413385987281799, 0.692366003990173],\n  [0.228018000721931, 0.683571994304657],\n  [0.468268007040024, 0.352671027183533],\n  [0.411361992359161, 0.804327011108398],\n  [0.499989002943039, 0.469825029373169],\n  [0.479153990745544, 0.442654013633728],\n  [0.499974012374878, 0.439637005329132],\n  [0.432112008333206, 0.493588984012604],\n  [0.499886006116867, 0.866917014122009],\n  [0.49991300702095, 0.821729004383087],\n  [0.456548988819122, 0.819200992584229],\n  [0.344549000263214, 0.745438992977142],\n  [0.37890899181366, 0.574010014533997],\n  [0.374292999505997, 0.780184984207153],\n  [0.319687992334366, 0.570737957954407],\n  [0.357154995203018, 0.604269981384277],\n  [0.295284003019333, 0.621580958366394],\n  [0.447750002145767, 0.862477004528046],\n  [0.410986006259918, 0.508723020553589],\n  [0.31395098567009, 0.775308012962341],\n  [0.354128003120422, 0.812552988529205],\n  [0.324548006057739, 0.703992962837219],\n  [0.189096003770828, 0.646299958229065],\n  [0.279776990413666, 0.71465802192688],\n  [0.1338230073452, 0.682700991630554],\n  [0.336768001317978, 0.644733011722565],\n  [0.429883986711502, 0.466521978378296],\n  [0.455527991056442, 0.548622965812683],\n  [0.437114000320435, 0.558896005153656],\n  [0.467287987470627, 0.529924988746643],\n  [0.414712011814117, 0.335219979286194],\n  [0.37704598903656, 0.322777986526489],\n  [0.344107985496521, 0.320150971412659],\n  [0.312875986099243, 0.32233202457428],\n  [0.283526003360748, 0.333190023899078],\n  [0.241245999932289, 0.382785975933075],\n  [0.102986000478268, 0.468762993812561],\n  [0.267612010240555, 0.424560010433197],\n  [0.297879010438919, 0.433175981044769],\n  [0.333433985710144, 0.433878004550934],\n  [0.366427004337311, 0.426115989685059],\n  [0.396012008190155, 0.416696012020111],\n  [0.420121014118195, 0.41022801399231],\n  [0.007561000064015, 0.480777025222778],\n  [0.432949006557465, 0.569517970085144],\n  [0.458638995885849, 0.479089021682739],\n  [0.473466008901596, 0.545744001865387],\n  [0.476087987422943, 0.563830018043518],\n  [0.468472003936768, 0.555056989192963],\n  [0.433990985155106, 0.582361996173859],\n  [0.483518004417419, 0.562983989715576],\n  [0.482482999563217, 0.57784903049469],\n  [0.42645001411438, 0.389798998832703],\n  [0.438998997211456, 0.39649498462677],\n  [0.450067013502121, 0.400434017181396],\n  [0.289712011814117, 0.368252992630005],\n  [0.276670008897781, 0.363372981548309],\n  [0.517862021923065, 0.471948027610779],\n  [0.710287988185883, 0.380764007568359],\n  [0.526226997375488, 0.573909997940063],\n  [0.895093023777008, 0.254140973091125],\n  [0.634069979190826, 0.409575998783112],\n  [0.661242008209229, 0.41302502155304],\n  [0.688880026340485, 0.409460008144379],\n  [0.725341975688934, 0.389131009578705],\n  [0.606630027294159, 0.40370500087738],\n  [0.654766023159027, 0.344011008739471],\n  [0.629905998706818, 0.346076011657715],\n  [0.680678009986877, 0.347265005111694],\n  [0.702096998691559, 0.353591024875641],\n  [0.75221198797226, 0.410804986953735],\n  [0.602918028831482, 0.842862963676453],\n  [0.719901978969574, 0.375599980354309],\n  [0.893692970275879, 0.399959981441498],\n  [0.790081977844238, 0.391354024410248],\n  [0.643998026847839, 0.534487962722778],\n  [0.528249025344849, 0.65040397644043],\n  [0.525849997997284, 0.680191040039062],\n  [0.560214996337891, 0.657229006290436],\n  [0.585384011268616, 0.66654098033905],\n  [0.549625992774963, 0.680860996246338],\n  [0.57122802734375, 0.682691991329193],\n  [0.624852001667023, 0.72809898853302],\n  [0.513050019741058, 0.547281980514526],\n  [0.51509702205658, 0.527251958847046],\n  [0.742246985435486, 0.314507007598877],\n  [0.598631024360657, 0.454979002475739],\n  [0.570338010787964, 0.548575043678284],\n  [0.578631997108459, 0.533622980117798],\n  [0.723087012767792, 0.532054007053375],\n  [0.516445994377136, 0.499638974666595],\n  [0.662801027297974, 0.282917976379395],\n  [0.70362401008606, 0.293271005153656],\n  [0.830704987049103, 0.193813979625702],\n  [0.552385985851288, 0.302568018436432],\n  [0.607609987258911, 0.353887975215912],\n  [0.645429015159607, 0.696707010269165],\n  [0.932694971561432, 0.730105042457581],\n  [0.557260990142822, 0.572826027870178],\n  [0.542901992797852, 0.584792017936707],\n  [0.6180260181427, 0.694710969924927],\n  [0.607590973377228, 0.694203019142151],\n  [0.722943007946014, 0.271963000297546],\n  [0.577413976192474, 0.563166975975037],\n  [0.614082992076874, 0.281386971473694],\n  [0.616907000541687, 0.255886018276215],\n  [0.668509006500244, 0.119913995265961],\n  [0.770092010498047, 0.232020974159241],\n  [0.635536015033722, 0.189248979091644],\n  [0.77039098739624, 0.299556016921997],\n  [0.826722025871277, 0.278755009174347],\n  [0.527121007442474, 0.666198015213013],\n  [0.553171992301941, 0.668527007102966],\n  [0.577238023281097, 0.673889994621277],\n  [0.554691970348358, 0.580065965652466],\n  [0.611896991729736, 0.693961024284363],\n  [0.59696102142334, 0.706539988517761],\n  [0.596370995044708, 0.693953037261963],\n  [0.539958000183105, 0.557139039039612],\n  [0.568841993808746, 0.692366003990173],\n  [0.547818005084991, 0.692366003990173],\n  [0.52461302280426, 0.692366003990173],\n  [0.534089982509613, 0.779141008853912],\n  [0.527670979499817, 0.736225962638855],\n  [0.526912987232208, 0.717857003211975],\n  [0.526877999305725, 0.704625964164734],\n  [0.526966989040375, 0.695277988910675],\n  [0.572058022022247, 0.695277988910675],\n  [0.573521018028259, 0.703539967536926],\n  [0.57683801651001, 0.711845993995667],\n  [0.581691026687622, 0.720062971115112],\n  [0.609944999217987, 0.639909982681274],\n  [0.986046016216278, 0.560034036636353],\n  [0.5867999792099, 0.69539999961853],\n  [0.590372025966644, 0.701822996139526],\n  [0.531915009021759, 0.601536989212036],\n  [0.577268004417419, 0.585934996604919],\n  [0.536915004253387, 0.593786001205444],\n  [0.627542972564697, 0.473352015018463],\n  [0.665585994720459, 0.495950996875763],\n  [0.588353991508484, 0.546862006187439],\n  [0.757824003696442, 0.14767599105835],\n  [0.709249973297119, 0.201507985591888],\n  [0.672684013843536, 0.256581008434296],\n  [0.600408971309662, 0.74900496006012],\n  [0.55826598405838, 0.261672019958496],\n  [0.570303976535797, 0.187870979309082],\n  [0.588165998458862, 0.109044015407562],\n  [0.711045026779175, 0.398952007293701],\n  [0.781069993972778, 0.435405015945435],\n  [0.587247014045715, 0.398931980133057],\n  [0.742869973182678, 0.355445981025696],\n  [0.572156012058258, 0.437651991844177],\n  [0.55186802148819, 0.536570012569427],\n  [0.821442008018494, 0.457556009292603],\n  [0.752701997756958, 0.457181990146637],\n  [0.71375697851181, 0.467626988887787],\n  [0.66711300611496, 0.460672974586487],\n  [0.631101012229919, 0.447153985500336],\n  [0.6008620262146, 0.432473003864288],\n  [0.523481011390686, 0.405627012252808],\n  [0.810747981071472, 0.523926019668579],\n  [0.771045982837677, 0.348959028720856],\n  [0.509127020835876, 0.562718033790588],\n  [0.595292985439301, 0.485023975372314],\n  [0.980530977249146, 0.401564002037048],\n  [0.573499977588654, 0.420000016689301],\n  [0.602994978427887, 0.548687994480133],\n  [0.733529984951019, 0.376977026462555],\n  [0.560611009597778, 0.519016981124878],\n  [0.967685997486115, 0.644356966018677],\n  [0.580985009670258, 0.387160003185272],\n  [0.537728011608124, 0.505385041236877],\n  [0.760966002941132, 0.779752969741821],\n  [0.801778972148895, 0.831938028335571],\n  [0.892440974712372, 0.54076099395752],\n  [0.816350996494293, 0.740260004997253],\n  [0.865594983100891, 0.333687007427216],\n  [0.614073991775513, 0.883246004581451],\n  [0.508952975273132, 0.579437971115112],\n  [0.617941975593567, 0.508316040039062],\n  [0.825608015060425, 0.397674977779388],\n  [0.681214988231659, 0.39623498916626],\n  [0.656635999679565, 0.400596976280212],\n  [0.603900015354156, 0.710216999053955],\n  [0.81208598613739, 0.588539004325867],\n  [0.56801301240921, 0.944564998149872],\n  [0.681007981300354, 0.898285031318665],\n  [0.733752012252808, 0.869701027870178],\n  [0.633830010890961, 0.398822009563446],\n  [0.606792986392975, 0.39553701877594],\n  [0.589659988880157, 0.391062021255493],\n  [0.805015981197357, 0.342108011245728],\n  [0.611334979534149, 0.362284004688263],\n  [0.634037971496582, 0.355970978736877],\n  [0.656635999679565, 0.355356991291046],\n  [0.681214988231659, 0.35834002494812],\n  [0.698584973812103, 0.363156020641327],\n  [0.941866993904114, 0.319076001644135],\n  [0.698584973812103, 0.387449026107788],\n  [0.584177017211914, 0.624107003211975],\n  [0.554318010807037, 0.566076993942261],\n  [0.534153997898102, 0.62064003944397],\n  [0.711217999458313, 0.819975018501282],\n  [0.664629995822906, 0.852871000766754],\n  [0.559099972248077, 0.902631998062134],\n  [0.871706008911133, 0.791940987110138],\n  [0.591234028339386, 0.373893976211548],\n  [0.544341027736664, 0.451583981513977],\n  [0.624562978744507, 0.924192011356354],\n  [0.88577002286911, 0.615028977394104],\n  [0.551338016986847, 0.695277988910675],\n  [0.551980018615723, 0.704632043838501],\n  [0.552887976169586, 0.715808033943176],\n  [0.555167973041534, 0.730794012546539],\n  [0.569944024085999, 0.767035007476807],\n  [0.593203008174896, 0.685675978660583],\n  [0.599261999130249, 0.681069016456604],\n  [0.607599973678589, 0.677703022956848],\n  [0.631937980651855, 0.663500010967255],\n  [0.752032995223999, 0.601315021514893],\n  [0.547226011753082, 0.420395016670227],\n  [0.563543975353241, 0.359827995300293],\n  [0.583841025829315, 0.368713974952698],\n  [0.586614012718201, 0.692366003990173],\n  [0.771915018558502, 0.683578014373779],\n  [0.531597018241882, 0.352482974529266],\n  [0.588370978832245, 0.804440975189209],\n  [0.52079701423645, 0.442565023899078],\n  [0.567984998226166, 0.493479013442993],\n  [0.543282985687256, 0.819254994392395],\n  [0.655317008495331, 0.745514988899231],\n  [0.621008992195129, 0.574018001556396],\n  [0.625559985637665, 0.78031200170517],\n  [0.680198013782501, 0.570719003677368],\n  [0.64276397228241, 0.604337990283966],\n  [0.704662978649139, 0.621529996395111],\n  [0.552012026309967, 0.862591981887817],\n  [0.589071989059448, 0.508637011051178],\n  [0.685944974422455, 0.775357007980347],\n  [0.645735025405884, 0.812640011310577],\n  [0.675342977046967, 0.703978002071381],\n  [0.810858011245728, 0.646304965019226],\n  [0.72012197971344, 0.714666962623596],\n  [0.866151988506317, 0.682704985141754],\n  [0.663187026977539, 0.644596993923187],\n  [0.570082008838654, 0.466325998306274],\n  [0.544561982154846, 0.548375964164734],\n  [0.562758982181549, 0.558784961700439],\n  [0.531987011432648, 0.530140042304993],\n  [0.585271000862122, 0.335177004337311],\n  [0.622952997684479, 0.32277899980545],\n  [0.655896008014679, 0.320163011550903],\n  [0.687132000923157, 0.322345972061157],\n  [0.716481983661652, 0.333200991153717],\n  [0.758756995201111, 0.382786989212036],\n  [0.897013008594513, 0.468769013881683],\n  [0.732392013072968, 0.424547016620636],\n  [0.70211398601532, 0.433162987232208],\n  [0.66652500629425, 0.433866024017334],\n  [0.633504986763, 0.426087975502014],\n  [0.603875994682312, 0.416586995124817],\n  [0.579657971858978, 0.409945011138916],\n  [0.992439985275269, 0.480777025222778],\n  [0.567192018032074, 0.569419980049133],\n  [0.54136598110199, 0.478899002075195],\n  [0.526564002037048, 0.546118021011353],\n  [0.523913025856018, 0.563830018043518],\n  [0.531529009342194, 0.555056989192963],\n  [0.566035985946655, 0.582329034805298],\n  [0.51631098985672, 0.563053965568542],\n  [0.5174720287323, 0.577877044677734],\n  [0.573594987392426, 0.389806985855103],\n  [0.560697972774506, 0.395331978797913],\n  [0.549755990505219, 0.399751007556915],\n  [0.710287988185883, 0.368252992630005],\n  [0.723330020904541, 0.363372981548309],\n];\n\nexport const TRI468: Array<number> = [\n  127, 34, 139, 11, 0, 37, 232, 231, 120, 72, 37, 39, 128, 121, 47, 232, 121, 128, 104, 69, 67, 175, 171, 148, 157, 154, 155, 118, 50, 101, 73, 39, 40, 9,\n  151, 108, 48, 115, 131, 194, 204, 211, 74, 40, 185, 80, 42, 183, 40, 92, 186, 230, 229, 118, 202, 212, 214, 83, 18, 17, 76, 61, 146, 160, 29, 30, 56,\n  157, 173, 106, 204, 194, 135, 214, 192, 203, 165, 98, 21, 71, 68, 51, 45, 4, 144, 24, 23, 77, 146, 91, 205, 50, 187, 201, 200, 18, 91, 106, 182, 90, 91,\n  181, 85, 84, 17, 206, 203, 36, 148, 171, 140, 92, 40, 39, 193, 189, 244, 159, 158, 28, 247, 246, 161, 236, 3, 196, 54, 68, 104, 193, 168, 8, 117,\n  228, 31, 189, 193, 55, 98, 97, 99, 126, 47, 100, 166, 79, 218, 155, 154, 26, 209, 49, 131, 135, 136, 150, 47, 126, 217, 223, 52, 53, 45, 51, 134, 211,\n  170, 140, 67, 69, 108, 43, 106, 91, 230, 119, 120, 226, 130, 247, 63, 53, 52, 238, 20, 242, 46, 70, 156, 78, 62, 96, 46, 53, 63, 143, 34, 227, 173,\n  155, 133, 123, 117, 111, 44, 125, 19, 236, 134, 51, 216, 206, 205, 154, 153, 22, 39, 37, 167, 200, 201, 208, 36, 142, 100, 57, 212, 202, 20, 60, 99, 28,\n  158, 157, 35, 226, 113, 160, 159, 27, 204, 202, 210, 113, 225, 46, 43, 202, 204, 62, 76, 77, 137, 123, 116, 41, 38, 72, 203, 129, 142, 64, 98, 240, 49,\n  102, 64, 41, 73, 74, 212, 216, 207, 42, 74, 184, 169, 170, 211, 170, 149, 176, 105, 66, 69, 122, 6, 168, 123, 147, 187, 96, 77, 90, 65, 55, 107, 89,\n  90, 180, 101, 100, 120, 63, 105, 104, 93, 137, 227, 15, 86, 85, 129, 102, 49, 14, 87, 86, 55, 8, 9, 100, 47, 121, 145, 23, 22, 88, 89, 179, 6, 122,\n  196, 88, 95, 96, 138, 172, 136, 215, 58, 172, 115, 48, 219, 42, 80, 81, 195, 3, 51, 43, 146, 61, 171, 175, 199, 81, 82, 38, 53, 46, 225, 144, 163, 110,\n  246, 33, 7, 52, 65, 66, 229, 228, 117, 34, 127, 234, 107, 108, 69, 109, 108, 151, 48, 64, 235, 62, 78, 191, 129, 209, 126, 111, 35, 143, 163, 161, 246,\n  117, 123, 50, 222, 65, 52, 19, 125, 141, 221, 55, 65, 3, 195, 197, 25, 7, 33, 220, 237, 44, 70, 71, 139, 122, 193, 245, 247, 130, 33, 71, 21, 162,\n  153, 158, 159, 170, 169, 150, 188, 174, 196, 216, 186, 92, 144, 160, 161, 2, 97, 167, 141, 125, 241, 164, 167, 37, 72, 38, 12, 145, 159, 160, 38, 82, 13,\n  63, 68, 71, 226, 35, 111, 158, 153, 154, 101, 50, 205, 206, 92, 165, 209, 198, 217, 165, 167, 97, 220, 115, 218, 133, 112, 243, 239, 238, 241, 214,\n  135, 169, 190, 173, 133, 171, 208, 32, 125, 44, 237, 86, 87, 178, 85, 86, 179, 84, 85, 180, 83, 84, 181, 201, 83, 182, 137, 93, 132, 76, 62, 183, 61,\n  76, 184, 57, 61, 185, 212, 57, 186, 214, 207, 187, 34, 143, 156, 79, 239, 237, 123, 137, 177, 44, 1, 4, 201, 194, 32, 64, 102, 129, 213, 215, 138, 59,\n  166, 219, 242, 99, 97, 2, 94, 141, 75, 59, 235, 24, 110, 228, 25, 130, 226, 23, 24, 229, 22, 23, 230, 26, 22, 231, 112, 26, 232, 189, 190, 243, 221, 56,\n  190, 28, 56, 221, 27, 28, 222, 29, 27, 223, 30, 29, 224, 247, 30, 225, 238, 79, 20, 166, 59, 75, 60, 75, 240, 147, 177, 215, 20, 79, 166, 187, 147, 213,\n  112, 233, 244, 233, 128, 245, 128, 114, 188, 114, 217, 174, 131, 115, 220, 217, 198, 236, 198, 131, 134, 177, 132, 58, 143, 35, 124, 110, 163, 7, 228,\n  110, 25, 356, 389, 368, 11, 302, 267, 452, 350, 349, 302, 303, 269, 357, 343, 277, 452, 453, 357, 333, 332, 297, 175, 152, 377, 384, 398, 382, 347,\n  348, 330, 303, 304, 270, 9, 336, 337, 278, 279, 360, 418, 262, 431, 304, 408, 409, 310, 415, 407, 270, 409, 410, 450, 348, 347, 422, 430, 434, 313,\n  314, 17, 306, 307, 375, 387, 388, 260, 286, 414, 398, 335, 406, 418, 364, 367, 416, 423, 358, 327, 251, 284, 298, 281, 5, 4, 373, 374, 253, 307, 320,\n  321, 425, 427, 411, 421, 313, 18, 321, 405, 406, 320, 404, 405, 315, 16, 17, 426, 425, 266, 377, 400, 369, 322, 391, 269, 417, 465, 464, 386, 257, 258,\n  466, 260, 388, 456, 399, 419, 284, 332, 333, 417, 285, 8, 346, 340, 261, 413, 441, 285, 327, 460, 328, 355, 371, 329, 392, 439, 438, 382, 341, 256,\n  429, 420, 360, 364, 394, 379, 277, 343, 437, 443, 444, 283, 275, 440, 363, 431, 262, 369, 297, 338, 337, 273, 375, 321, 450, 451, 349, 446, 342, 467,\n  293, 334, 282, 458, 461, 462, 276, 353, 383, 308, 324, 325, 276, 300, 293, 372, 345, 447, 382, 398, 362, 352, 345, 340, 274, 1, 19, 456, 248, 281, 436,\n  427, 425, 381, 256, 252, 269, 391, 393, 200, 199, 428, 266, 330, 329, 287, 273, 422, 250, 462, 328, 258, 286, 384, 265, 353, 342, 387, 259, 257, 424,\n  431, 430, 342, 353, 276, 273, 335, 424, 292, 325, 307, 366, 447, 345, 271, 303, 302, 423, 266, 371, 294, 455, 460, 279, 278, 294, 271, 272, 304, 432,\n  434, 427, 272, 407, 408, 394, 430, 431, 395, 369, 400, 334, 333, 299, 351, 417, 168, 352, 280, 411, 325, 319, 320, 295, 296, 336, 319, 403, 404, 330,\n  348, 349, 293, 298, 333, 323, 454, 447, 15, 16, 315, 358, 429, 279, 14, 15, 316, 285, 336, 9, 329, 349, 350, 374, 380, 252, 318, 402, 403, 6, 197, 419,\n  318, 319, 325, 367, 364, 365, 435, 367, 397, 344, 438, 439, 272, 271, 311, 195, 5, 281, 273, 287, 291, 396, 428, 199, 311, 271, 268, 283, 444, 445,\n  373, 254, 339, 263, 466, 249, 282, 334, 296, 449, 347, 346, 264, 447, 454, 336, 296, 299, 338, 10, 151, 278, 439, 455, 292, 407, 415, 358, 371, 355,\n  340, 345, 372, 390, 249, 466, 346, 347, 280, 442, 443, 282, 19, 94, 370, 441, 442, 295, 248, 419, 197, 263, 255, 359, 440, 275, 274, 300, 383, 368,\n  351, 412, 465, 263, 467, 466, 301, 368, 389, 380, 374, 386, 395, 378, 379, 412, 351, 419, 436, 426, 322, 373, 390, 388, 2, 164, 393, 370, 462, 461,\n  164, 0, 267, 302, 11, 12, 374, 373, 387, 268, 12, 13, 293, 300, 301, 446, 261, 340, 385, 384, 381, 330, 266, 425, 426, 423, 391, 429, 355, 437, 391,\n  327, 326, 440, 457, 438, 341, 382, 362, 459, 457, 461, 434, 430, 394, 414, 463, 362, 396, 369, 262, 354, 461, 457, 316, 403, 402, 315, 404, 403, 314,\n  405, 404, 313, 406, 405, 421, 418, 406, 366, 401, 361, 306, 408, 407, 291, 409, 408, 287, 410, 409, 432, 436, 410, 434, 416, 411, 264, 368, 383, 309,\n  438, 457, 352, 376, 401, 274, 275, 4, 421, 428, 262, 294, 327, 358, 433, 416, 367, 289, 455, 439, 462, 370, 326, 2, 326, 370, 305, 460, 455, 254,\n  449, 448, 255, 261, 446, 253, 450, 449, 252, 451, 450, 256, 452, 451, 341, 453, 452, 413, 464, 463, 441, 413, 414, 258, 442, 441, 257, 443, 442, 259,\n  444, 443, 260, 445, 444, 467, 342, 445, 459, 458, 250, 289, 392, 290, 290, 328, 460, 376, 433, 435, 250, 290, 392, 411, 416, 433, 341, 463, 464, 453,\n  464, 465, 357, 465, 412, 343, 412, 399, 360, 363, 440, 437, 399, 456, 420, 456, 363, 401, 435, 288, 372, 383, 353, 339, 255, 249, 448, 261, 255, 133,\n  243, 190, 133, 155, 112, 33, 246, 247, 33, 130, 25, 398, 384, 286, 362, 398, 414, 362, 463, 341, 263, 359, 467, 263, 249, 255, 466, 467, 260, 75, 60,\n  166, 238, 239, 79, 162, 127, 139, 72, 11, 37, 121, 232, 120, 73, 72, 39, 114, 128, 47, 233, 232, 128, 103, 104, 67, 152, 175, 148, 173, 157, 155,\n  119, 118, 101, 74, 73, 40, 107, 9, 108, 49, 48, 131, 32, 194, 211, 184, 74, 185, 191, 80, 183, 185, 40, 186, 119, 230, 118, 210, 202, 214, 84, 83, 17,\n  77, 76, 146, 161, 160, 30, 190, 56, 173, 182, 106, 194, 138, 135, 192, 129, 203, 98, 54, 21, 68, 5, 51, 4, 145, 144, 23, 90, 77, 91, 207, 205, 187, 83,\n  201, 18, 181, 91, 182, 180, 90, 181, 16, 85, 17, 205, 206, 36, 176, 148, 140, 165, 92, 39, 245, 193, 244, 27, 159, 28, 30, 247, 161, 174, 236, 196,\n  103, 54, 104, 55, 193, 8, 111, 117, 31, 221, 189, 55, 240, 98, 99, 142, 126, 100, 219, 166, 218, 112, 155, 26, 198, 209, 131, 169, 135, 150, 114, 47,\n  217, 224, 223, 53, 220, 45, 134, 32, 211, 140, 109, 67, 108, 146, 43, 91, 231, 230, 120, 113, 226, 247, 105, 63, 52, 241, 238, 242, 124, 46, 156, 95,\n  78, 96, 70, 46, 63, 116, 143, 227, 116, 123, 111, 1, 44, 19, 3, 236, 51, 207, 216, 205, 26, 154, 22, 165, 39, 167, 199, 200, 208, 101, 36, 100, 43,\n  57, 202, 242, 20, 99, 56, 28, 157, 124, 35, 113, 29, 160, 27, 211, 204, 210, 124, 113, 46, 106, 43, 204, 96, 62, 77, 227, 137, 116, 73, 41, 72, 36, 203,\n  142, 235, 64, 240, 48, 49, 64, 42, 41, 74, 214, 212, 207, 183, 42, 184, 210, 169, 211, 140, 170, 176, 104, 105, 69, 193, 122, 168, 50, 123, 187, 89, 96,\n  90, 66, 65, 107, 179, 89, 180, 119, 101, 120, 68, 63, 104, 234, 93, 227, 16, 15, 85, 209, 129, 49, 15, 14, 86, 107, 55, 9, 120, 100, 121, 153, 145, 22,\n  178, 88, 179, 197, 6, 196, 89, 88, 96, 135, 138, 136, 138, 215, 172, 218, 115, 219, 41, 42, 81, 5, 195, 51, 57, 43, 61, 208, 171, 199, 41, 81, 38,\n  224, 53, 225, 24, 144, 110, 105, 52, 66, 118, 229, 117, 227, 34, 234, 66, 107, 69, 10, 109, 151, 219, 48, 235, 183, 62, 191, 142, 129, 126, 116, 111,\n  143, 7, 163, 246, 118, 117, 50, 223, 222, 52, 94, 19, 141, 222, 221, 65, 196, 3, 197, 45, 220, 44, 156, 70, 139, 188, 122, 245, 139, 71, 162, 145,\n  153, 159, 149, 170, 150, 122, 188, 196, 206, 216, 92, 163, 144, 161, 164, 2, 167, 242, 141, 241, 0, 164, 37, 11, 72, 12, 144, 145, 160, 12, 38, 13, 70,\n  63, 71, 31, 226, 111, 157, 158, 154, 36, 101, 205, 203, 206, 165, 126, 209, 217, 98, 165, 97, 237, 220, 218, 237, 239, 241, 210, 214, 169, 140, 171, 32,\n  241, 125, 237, 179, 86, 178, 180, 85, 179, 181, 84, 180, 182, 83, 181, 194, 201, 182, 177, 137, 132, 184, 76, 183, 185, 61, 184, 186, 57, 185, 216, 212,\n  186, 192, 214, 187, 139, 34, 156, 218, 79, 237, 147, 123, 177, 45, 44, 4, 208, 201, 32, 98, 64, 129, 192, 213, 138, 235, 59, 219, 141, 242, 97, 97, 2,\n  141, 240, 75, 235, 229, 24, 228, 31, 25, 226, 230, 23, 229, 231, 22, 230, 232, 26, 231, 233, 112, 232, 244, 189, 243, 189, 221, 190, 222, 28, 221,\n  223, 27, 222, 224, 29, 223, 225, 30, 224, 113, 247, 225, 99, 60, 240, 213, 147, 215, 60, 20, 166, 192, 187, 213, 243, 112, 244, 244, 233, 245, 245,\n  128, 188, 188, 114, 174, 134, 131, 220, 174, 217, 236, 236, 198, 134, 215, 177, 58, 156, 143, 124, 25, 110, 7, 31, 228, 25, 264, 356, 368, 0, 11, 267,\n  451, 452, 349, 267, 302, 269, 350, 357, 277, 350, 452, 357, 299, 333, 297, 396, 175, 377, 381, 384, 382, 280, 347, 330, 269, 303, 270, 151, 9, 337,\n  344, 278, 360, 424, 418, 431, 270, 304, 409, 272, 310, 407, 322, 270, 410, 449, 450, 347, 432, 422, 434, 18, 313, 17, 291, 306, 375, 259, 387, 260,\n  424, 335, 418, 434, 364, 416, 391, 423, 327, 301, 251, 298, 275, 281, 4, 254, 373, 253, 375, 307, 321, 280, 425, 411, 200, 421, 18, 335, 321, 406,\n  321, 320, 405, 314, 315, 17, 423, 426, 266, 396, 377, 369, 270, 322, 269, 413, 417, 464, 385, 386, 258, 248, 456, 419, 298, 284, 333, 168, 417, 8,\n  448, 346, 261, 417, 413, 285, 326, 327, 328, 277, 355, 329, 309, 392, 438, 381, 382, 256, 279, 429, 360, 365, 364, 379, 355, 277, 437, 282, 443, 283,\n  281, 275, 363, 395, 431, 369, 299, 297, 337, 335, 273, 321, 348, 450, 349, 359, 446, 467, 283, 293, 282, 250, 458, 462, 300, 276, 383, 292, 308, 325,\n  283, 276, 293, 264, 372, 447, 346, 352, 340, 354, 274, 19, 363, 456, 281, 426, 436, 425, 380, 381, 252, 267, 269, 393, 421, 200, 428, 371, 266, 329,\n  432, 287, 422, 290, 250, 328, 385, 258, 384, 446, 265, 342, 386, 387, 257, 422, 424, 430, 445, 342, 276, 422, 273, 424, 306, 292, 307, 352, 366, 345,\n  268, 271, 302, 358, 423, 371, 327, 294, 460, 331, 279, 294, 303, 271, 304, 436, 432, 427, 304, 272, 408, 395, 394, 431, 378, 395, 400, 296, 334, 299,\n  6, 351, 168, 376, 352, 411, 307, 325, 320, 285, 295, 336, 320, 319, 404, 329, 330, 349, 334, 293, 333, 366, 323, 447, 316, 15, 315, 331, 358, 279,\n  317, 14, 316, 8, 285, 9, 277, 329, 350, 253, 374, 252, 319, 318, 403, 351, 6, 419, 324, 318, 325, 397, 367, 365, 288, 435, 397, 278, 344, 439, 310,\n  272, 311, 248, 195, 281, 375, 273, 291, 175, 396, 199, 312, 311, 268, 276, 283, 445, 390, 373, 339, 295, 282, 296, 448, 449, 346, 356, 264, 454, 337,\n  336, 299, 337, 338, 151, 294, 278, 455, 308, 292, 415, 429, 358, 355, 265, 340, 372, 388, 390, 466, 352, 346, 280, 295, 442, 282, 354, 19, 370, 285,\n  441, 295, 195, 248, 197, 457, 440, 274, 301, 300, 368, 417, 351, 465, 251, 301, 389, 385, 380, 386, 394, 395, 379, 399, 412, 419, 410, 436, 322, 387,\n  373, 388, 326, 2, 393, 354, 370, 461, 393, 164, 267, 268, 302, 12, 386, 374, 387, 312, 268, 13, 298, 293, 301, 265, 446, 340, 380, 385, 381, 280, 330,\n  425, 322, 426, 391, 420, 429, 437, 393, 391, 326, 344, 440, 438, 458, 459, 461, 364, 434, 394, 428, 396, 262, 274, 354, 457, 317, 316, 402, 316, 315,\n  403, 315, 314, 404, 314, 313, 405, 313, 421, 406, 323, 366, 361, 292, 306, 407, 306, 291, 408, 291, 287, 409, 287, 432, 410, 427, 434, 411, 372, 264,\n  383, 459, 309, 457, 366, 352, 401, 1, 274, 4, 418, 421, 262, 331, 294, 358, 435, 433, 367, 392, 289, 439, 328, 462, 326, 94, 2, 370, 289, 305, 455, 339,\n  254, 448, 359, 255, 446, 254, 253, 449, 253, 252, 450, 252, 256, 451, 256, 341, 452, 414, 413, 463, 286, 441, 414, 286, 258, 441, 258, 257, 442, 257,\n  259, 443, 259, 260, 444, 260, 467, 445, 309, 459, 250, 305, 289, 290, 305, 290, 460, 401, 376, 435, 309, 250, 392, 376, 411, 433, 453, 341, 464, 357,\n  453, 465, 343, 357, 412, 437, 343, 399, 344, 360, 440, 420, 437, 456, 360, 420, 363, 361, 401, 288, 265, 372, 353, 390, 339, 249, 339, 448, 255];\n\nexport const TRI68: Array<number> = [0, 1, 36, 0, 36, 17, 1, 2, 41, 1, 41, 36, 2, 3, 31, 2, 31, 41, 3, 4, 48, 3, 48, 31, 4, 5, 48, 5, 6, 48, 6, 7, 59, 6, 59, 48, 7, 8, 58, 7, 58, 59,\n  8, 9, 56, 8, 56, 57, 8, 57, 58, 9, 10, 55, 9, 55, 56, 10, 11, 54, 10, 54, 55, 11, 12, 54, 12, 13, 54, 13, 14, 35, 13, 35, 54, 14, 15, 46, 14, 46, 35, 15, 16,\n  45, 15, 45, 46, 16, 26, 45, 17, 36, 18, 18, 37, 19, 18, 36, 37, 19, 38, 20, 19, 37, 38, 20, 39, 21, 20, 38, 39, 21, 39, 27, 22, 42, 23, 22, 27, 42, 23, 43, 24,\n  23, 42, 43, 24, 44, 25, 24, 43, 44, 25, 45, 26, 25, 44, 45, 27, 39, 28, 27, 28, 42, 28, 39, 29, 28, 29, 42, 29, 31, 30, 29, 30, 35, 29, 40, 31, 29, 35, 47, 29,\n  39, 40, 29, 47, 42, 30, 31, 32, 30, 32, 33, 30, 33, 34, 30, 34, 35, 31, 50, 32, 31, 40, 41, 31, 48, 49, 31, 49, 50, 32, 51, 33, 32, 50, 51, 33, 51, 34, 34, 52,\n  35, 34, 51, 52, 35, 46, 47, 35, 52, 53, 35, 53, 54, 36, 41, 37, 37, 40, 38, 37, 41, 40, 38, 40, 39, 42, 47, 43, 43, 47, 44, 44, 46, 45, 44, 47, 46, 48, 60, 49,\n  48, 59, 60, 49, 61, 50, 49, 60, 61, 50, 62, 51, 50, 61, 62, 51, 62, 52, 52, 63, 53, 52, 62, 63, 53, 64, 54, 53, 63, 64, 54, 64, 55, 55, 65, 56, 55, 64, 65, 56,\n  66, 57, 56, 65, 66, 57, 66, 58, 58, 67, 59, 58, 66, 67, 59, 67, 60, 60, 67, 61, 61, 66, 62, 61, 67, 66, 62, 66, 63, 63, 65, 64, 63, 66, 65, 21, 27, 22];\n\nexport const TRI33: Array<number> = [\n  /*  eyes  */ 0, 8, 7, 7, 8, 1, 2, 10, 9, 9, 10, 3,\n  /*  brows */ 17, 0, 18, 18, 0, 7, 18, 7, 19, 19, 7, 1, 19, 1, 11, 19, 11, 20, 21, 3, 22, 21, 9, 3, 20, 9, 21, 20, 2, 9, 20, 11, 2,\n  /*  4head */ 23, 17, 18, 25, 21, 22, 24, 19, 20, 24, 18, 19, 24, 20, 21, 24, 23, 18, 24, 21, 25,\n  /*  nose  */ 11, 12, 4, 11, 4, 13, 1, 12, 11, 11, 13, 2, 12, 14, 4, 4, 14, 13,\n  /* up-lip */ 14, 5, 15, 14, 15, 6, 12, 5, 14, 14, 6, 13,\n  /* cheeks */ 8, 12, 1, 2, 13, 10, 8, 26, 12, 10, 13, 27, 26, 5, 12, 13, 6, 27, 0, 26, 8, 10, 27, 3,\n  /*  chin  */ 5, 32, 16, 16, 32, 6, 5, 30, 32, 6, 32, 31,\n  /*  cont  */ 26, 30, 5, 27, 6, 31, 0, 28, 26, 3, 27, 29, 17, 28, 0, 3, 29, 22, 23, 28, 17, 22, 29, 25, 28, 30, 26, 27, 31, 29,\n];\n\nexport const TRI7: Array<number> = [0, 4, 1, 2, 4, 3, 4, 5, 6];\n\nexport const VTX68: Array<number> = [\n  /* cont  */ 127, 234, 132, 58, 172, 150, 149, 148, 152, 377, 378, 379, 397, 288, 361, 454, 356,\n  /* brows */ 70, 63, 105, 66, 107, 336, 296, 334, 293, 300,\n  /* nose  */ 168, 6, 195, 4, 98, 97, 2, 326, 327,\n  /* eyes  */ 33, 160, 158, 133, 153, 144, 362, 385, 387, 263, 373, 380,\n  /* lip   */ 57, 40, 37, 0, 267, 270, 287, 321, 314, 17, 84, 91,\n  /* mouth */ 78, 81, 13, 311, 308, 402, 14, 178,\n];\n\nexport const VTX33: Array<number> = [33, 133, 362, 263, 1, 62, 308, 159, 145, 386, 374, 6, 102, 331, 2, 13, 14, 70, 105, 107, 336, 334, 300, 54, 10, 284, 50, 280, 234, 454, 58, 288, 152];\n\nexport const VTX7: Array<number> = [33, 133, 362, 263, 1, 78, 308];\n\nexport const UV68 = VTX68.map((x) => UV468[x]);\n\nexport const UV33 = VTX33.map((x) => UV468[x]);\n\nexport const UV7 = VTX7.map((x) => UV468[x]);\n\n// https://github.com/tensorflow/tfjs-models/blob/master/face-landmarks-detection/src/constants.ts\n// https://github.com/google/mediapipe/mediapipe/python/solutions/face_mesh_connections.py\n\ntype PairArray = Array<[number, number]>;\n\nfunction connectionsToIndices(connections: PairArray) {\n  const indices = connections.map((connection) => connection[0]);\n  indices.push(connections[connections.length - 1][1]);\n  return indices;\n}\n\nexport const pairsLips: PairArray = [\n  [61, 146], [146, 91], [91, 181], [181, 84], [84, 17], [17, 314], [314, 405], [405, 321], [321, 375], [375, 291], [61, 185], [185, 40], [40, 39], [39, 37], [37, 0], [0, 267], [267, 269], [269, 270], [270, 409], [409, 291],\n  [78, 95], [95, 88], [88, 178], [178, 87], [87, 14], [14, 317], [317, 402], [402, 318], [318, 324], [324, 308], [78, 191], [191, 80], [80, 81], [81, 82], [82, 13], [13, 312], [312, 311], [311, 310], [310, 415], [415, 308],\n];\n\nexport const pairsLeftEye: PairArray = [[263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [386, 385], [385, 384], [384, 398], [398, 362]];\n\nexport const pairsLeftEyebrow: PairArray = [[276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]];\n\nexport const pairsLeftIris: PairArray = [[474, 475], [475, 476], [476, 477], [477, 474]];\n\nexport const pairsRightEye: PairArray = [[33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]];\n\nexport const pairsRightEyebrow: PairArray = [[46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]];\n\nexport const pairsRightIris: PairArray = [[469, 470], [470, 471], [471, 472], [472, 469]];\n\nexport const pairsFaceContour: PairArray = [\n  [10, 338], [338, 297], [297, 332], [332, 284], [284, 251], [251, 389],\n  [389, 356], [356, 454], [454, 323], [323, 361], [361, 288], [288, 397],\n  [397, 365], [365, 379], [379, 378], [378, 400], [400, 377], [377, 152],\n  [152, 148], [148, 176], [176, 149], [149, 150], [150, 136], [136, 172],\n  [172, 58], [58, 132], [132, 93], [93, 234], [234, 127], [127, 162],\n  [162, 21], [21, 54], [54, 103], [103, 67], [67, 109], [109, 10],\n];\n\nexport const contourKeypoints = {\n  lips: connectionsToIndices(pairsLips),\n  leftEye: connectionsToIndices(pairsLeftEye),\n  leftEyebrow: connectionsToIndices(pairsLeftEyebrow),\n  leftIris: connectionsToIndices(pairsLeftIris),\n  rightEye: connectionsToIndices(pairsRightEye),\n  rightEyebrow: connectionsToIndices(pairsRightEyebrow),\n  rightIris: connectionsToIndices(pairsRightIris),\n  faceOval: connectionsToIndices(pairsFaceContour),\n};\n\nexport const pairsFaceMesh: PairArray = [\n  [127, 34], [34, 139], [139, 127], [11, 0], [0, 37], [37, 11],\n  [232, 231], [231, 120], [120, 232], [72, 37], [37, 39], [39, 72],\n  [128, 121], [121, 47], [47, 128], [232, 121], [121, 128], [128, 232],\n  [104, 69], [69, 67], [67, 104], [175, 171], [171, 148], [148, 175],\n  [118, 50], [50, 101], [101, 118], [73, 39], [39, 40], [40, 73],\n  [9, 151], [151, 108], [108, 9], [48, 115], [115, 131], [131, 48],\n  [194, 204], [204, 211], [211, 194], [74, 40], [40, 185], [185, 74],\n  [80, 42], [42, 183], [183, 80], [40, 92], [92, 186], [186, 40],\n  [230, 229], [229, 118], [118, 230], [202, 212], [212, 214], [214, 202],\n  [83, 18], [18, 17], [17, 83], [76, 61], [61, 146], [146, 76],\n  [160, 29], [29, 30], [30, 160], [56, 157], [157, 173], [173, 56],\n  [106, 204], [204, 194], [194, 106], [135, 214], [214, 192], [192, 135],\n  [203, 165], [165, 98], [98, 203], [21, 71], [71, 68], [68, 21],\n  [51, 45], [45, 4], [4, 51], [144, 24], [24, 23], [23, 144],\n  [77, 146], [146, 91], [91, 77], [205, 50], [50, 187], [187, 205],\n  [201, 200], [200, 18], [18, 201], [91, 106], [106, 182], [182, 91],\n  [90, 91], [91, 181], [181, 90], [85, 84], [84, 17], [17, 85],\n  [206, 203], [203, 36], [36, 206], [148, 171], [171, 140], [140, 148],\n  [92, 40], [40, 39], [39, 92], [193, 189], [189, 244], [244, 193],\n  [159, 158], [158, 28], [28, 159], [247, 246], [246, 161], [161, 247],\n  [236, 3], [3, 196], [196, 236], [54, 68], [68, 104], [104, 54],\n  [193, 168], [168, 8], [8, 193], [117, 228], [228, 31], [31, 117],\n  [189, 193], [193, 55], [55, 189], [98, 97], [97, 99], [99, 98],\n  [126, 47], [47, 100], [100, 126], [166, 79], [79, 218], [218, 166],\n  [155, 154], [154, 26], [26, 155], [209, 49], [49, 131], [131, 209],\n  [135, 136], [136, 150], [150, 135], [47, 126], [126, 217], [217, 47],\n  [223, 52], [52, 53], [53, 223], [45, 51], [51, 134], [134, 45],\n  [211, 170], [170, 140], [140, 211], [67, 69], [69, 108], [108, 67],\n  [43, 106], [106, 91], [91, 43], [230, 119], [119, 120], [120, 230],\n  [226, 130], [130, 247], [247, 226], [63, 53], [53, 52], [52, 63],\n  [238, 20], [20, 242], [242, 238], [46, 70], [70, 156], [156, 46],\n  [78, 62], [62, 96], [96, 78], [46, 53], [53, 63], [63, 46],\n  [143, 34], [34, 227], [227, 143], [123, 117], [117, 111], [111, 123],\n  [44, 125], [125, 19], [19, 44], [236, 134], [134, 51], [51, 236],\n  [216, 206], [206, 205], [205, 216], [154, 153], [153, 22], [22, 154],\n  [39, 37], [37, 167], [167, 39], [200, 201], [201, 208], [208, 200],\n  [36, 142], [142, 100], [100, 36], [57, 212], [212, 202], [202, 57],\n  [20, 60], [60, 99], [99, 20], [28, 158], [158, 157], [157, 28],\n  [35, 226], [226, 113], [113, 35], [160, 159], [159, 27], [27, 160],\n  [204, 202], [202, 210], [210, 204], [113, 225], [225, 46], [46, 113],\n  [43, 202], [202, 204], [204, 43], [62, 76], [76, 77], [77, 62],\n  [137, 123], [123, 116], [116, 137], [41, 38], [38, 72], [72, 41],\n  [203, 129], [129, 142], [142, 203], [64, 98], [98, 240], [240, 64],\n  [49, 102], [102, 64], [64, 49], [41, 73], [73, 74], [74, 41],\n  [212, 216], [216, 207], [207, 212], [42, 74], [74, 184], [184, 42],\n  [169, 170], [170, 211], [211, 169], [170, 149], [149, 176], [176, 170],\n  [105, 66], [66, 69], [69, 105], [122, 6], [6, 168], [168, 122],\n  [123, 147], [147, 187], [187, 123], [96, 77], [77, 90], [90, 96],\n  [65, 55], [55, 107], [107, 65], [89, 90], [90, 180], [180, 89],\n  [101, 100], [100, 120], [120, 101], [63, 105], [105, 104], [104, 63],\n  [93, 137], [137, 227], [227, 93], [15, 86], [86, 85], [85, 15],\n  [129, 102], [102, 49], [49, 129], [14, 87], [87, 86], [86, 14],\n  [55, 8], [8, 9], [9, 55], [100, 47], [47, 121], [121, 100],\n  [145, 23], [23, 22], [22, 145], [88, 89], [89, 179], [179, 88],\n  [6, 122], [122, 196], [196, 6], [88, 95], [95, 96], [96, 88],\n  [138, 172], [172, 136], [136, 138], [215, 58], [58, 172], [172, 215],\n  [115, 48], [48, 219], [219, 115], [42, 80], [80, 81], [81, 42],\n  [195, 3], [3, 51], [51, 195], [43, 146], [146, 61], [61, 43],\n  [171, 175], [175, 199], [199, 171], [81, 82], [82, 38], [38, 81],\n  [53, 46], [46, 225], [225, 53], [144, 163], [163, 110], [110, 144],\n  [52, 65], [65, 66], [66, 52], [229, 228], [228, 117], [117, 229],\n  [34, 127], [127, 234], [234, 34], [107, 108], [108, 69], [69, 107],\n  [109, 108], [108, 151], [151, 109], [48, 64], [64, 235], [235, 48],\n  [62, 78], [78, 191], [191, 62], [129, 209], [209, 126], [126, 129],\n  [111, 35], [35, 143], [143, 111], [117, 123], [123, 50], [50, 117],\n  [222, 65], [65, 52], [52, 222], [19, 125], [125, 141], [141, 19],\n  [221, 55], [55, 65], [65, 221], [3, 195], [195, 197], [197, 3],\n  [25, 7], [7, 33], [33, 25], [220, 237], [237, 44], [44, 220],\n  [70, 71], [71, 139], [139, 70], [122, 193], [193, 245], [245, 122],\n  [247, 130], [130, 33], [33, 247], [71, 21], [21, 162], [162, 71],\n  [170, 169], [169, 150], [150, 170], [188, 174], [174, 196], [196, 188],\n  [216, 186], [186, 92], [92, 216], [2, 97], [97, 167], [167, 2],\n  [141, 125], [125, 241], [241, 141], [164, 167], [167, 37], [37, 164],\n  [72, 38], [38, 12], [12, 72], [38, 82], [82, 13], [13, 38],\n  [63, 68], [68, 71], [71, 63], [226, 35], [35, 111], [111, 226],\n  [101, 50], [50, 205], [205, 101], [206, 92], [92, 165], [165, 206],\n  [209, 198], [198, 217], [217, 209], [165, 167], [167, 97], [97, 165],\n  [220, 115], [115, 218], [218, 220], [133, 112], [112, 243], [243, 133],\n  [239, 238], [238, 241], [241, 239], [214, 135], [135, 169], [169, 214],\n  [190, 173], [173, 133], [133, 190], [171, 208], [208, 32], [32, 171],\n  [125, 44], [44, 237], [237, 125], [86, 87], [87, 178], [178, 86],\n  [85, 86], [86, 179], [179, 85], [84, 85], [85, 180], [180, 84],\n  [83, 84], [84, 181], [181, 83], [201, 83], [83, 182], [182, 201],\n  [137, 93], [93, 132], [132, 137], [76, 62], [62, 183], [183, 76],\n  [61, 76], [76, 184], [184, 61], [57, 61], [61, 185], [185, 57],\n  [212, 57], [57, 186], [186, 212], [214, 207], [207, 187], [187, 214],\n  [34, 143], [143, 156], [156, 34], [79, 239], [239, 237], [237, 79],\n  [123, 137], [137, 177], [177, 123], [44, 1], [1, 4], [4, 44],\n  [201, 194], [194, 32], [32, 201], [64, 102], [102, 129], [129, 64],\n  [213, 215], [215, 138], [138, 213], [59, 166], [166, 219], [219, 59],\n  [242, 99], [99, 97], [97, 242], [2, 94], [94, 141], [141, 2],\n  [75, 59], [59, 235], [235, 75], [24, 110], [110, 228], [228, 24],\n  [25, 130], [130, 226], [226, 25], [23, 24], [24, 229], [229, 23],\n  [22, 23], [23, 230], [230, 22], [26, 22], [22, 231], [231, 26],\n  [112, 26], [26, 232], [232, 112], [189, 190], [190, 243], [243, 189],\n  [221, 56], [56, 190], [190, 221], [28, 56], [56, 221], [221, 28],\n  [27, 28], [28, 222], [222, 27], [29, 27], [27, 223], [223, 29],\n  [30, 29], [29, 224], [224, 30], [247, 30], [30, 225], [225, 247],\n  [238, 79], [79, 20], [20, 238], [166, 59], [59, 75], [75, 166],\n  [60, 75], [75, 240], [240, 60], [147, 177], [177, 215], [215, 147],\n  [20, 79], [79, 166], [166, 20], [187, 147], [147, 213], [213, 187],\n  [112, 233], [233, 244], [244, 112], [233, 128], [128, 245], [245, 233],\n  [128, 114], [114, 188], [188, 128], [114, 217], [217, 174], [174, 114],\n  [131, 115], [115, 220], [220, 131], [217, 198], [198, 236], [236, 217],\n  [198, 131], [131, 134], [134, 198], [177, 132], [132, 58], [58, 177],\n  [143, 35], [35, 124], [124, 143], [110, 163], [163, 7], [7, 110],\n  [228, 110], [110, 25], [25, 228], [356, 389], [389, 368], [368, 356],\n  [11, 302], [302, 267], [267, 11], [452, 350], [350, 349], [349, 452],\n  [302, 303], [303, 269], [269, 302], [357, 343], [343, 277], [277, 357],\n  [452, 453], [453, 357], [357, 452], [333, 332], [332, 297], [297, 333],\n  [175, 152], [152, 377], [377, 175], [347, 348], [348, 330], [330, 347],\n  [303, 304], [304, 270], [270, 303], [9, 336], [336, 337], [337, 9],\n  [278, 279], [279, 360], [360, 278], [418, 262], [262, 431], [431, 418],\n  [304, 408], [408, 409], [409, 304], [310, 415], [415, 407], [407, 310],\n  [270, 409], [409, 410], [410, 270], [450, 348], [348, 347], [347, 450],\n  [422, 430], [430, 434], [434, 422], [313, 314], [314, 17], [17, 313],\n  [306, 307], [307, 375], [375, 306], [387, 388], [388, 260], [260, 387],\n  [286, 414], [414, 398], [398, 286], [335, 406], [406, 418], [418, 335],\n  [364, 367], [367, 416], [416, 364], [423, 358], [358, 327], [327, 423],\n  [251, 284], [284, 298], [298, 251], [281, 5], [5, 4], [4, 281],\n  [373, 374], [374, 253], [253, 373], [307, 320], [320, 321], [321, 307],\n  [425, 427], [427, 411], [411, 425], [421, 313], [313, 18], [18, 421],\n  [321, 405], [405, 406], [406, 321], [320, 404], [404, 405], [405, 320],\n  [315, 16], [16, 17], [17, 315], [426, 425], [425, 266], [266, 426],\n  [377, 400], [400, 369], [369, 377], [322, 391], [391, 269], [269, 322],\n  [417, 465], [465, 464], [464, 417], [386, 257], [257, 258], [258, 386],\n  [466, 260], [260, 388], [388, 466], [456, 399], [399, 419], [419, 456],\n  [284, 332], [332, 333], [333, 284], [417, 285], [285, 8], [8, 417],\n  [346, 340], [340, 261], [261, 346], [413, 441], [441, 285], [285, 413],\n  [327, 460], [460, 328], [328, 327], [355, 371], [371, 329], [329, 355],\n  [392, 439], [439, 438], [438, 392], [382, 341], [341, 256], [256, 382],\n  [429, 420], [420, 360], [360, 429], [364, 394], [394, 379], [379, 364],\n  [277, 343], [343, 437], [437, 277], [443, 444], [444, 283], [283, 443],\n  [275, 440], [440, 363], [363, 275], [431, 262], [262, 369], [369, 431],\n  [297, 338], [338, 337], [337, 297], [273, 375], [375, 321], [321, 273],\n  [450, 451], [451, 349], [349, 450], [446, 342], [342, 467], [467, 446],\n  [293, 334], [334, 282], [282, 293], [458, 461], [461, 462], [462, 458],\n  [276, 353], [353, 383], [383, 276], [308, 324], [324, 325], [325, 308],\n  [276, 300], [300, 293], [293, 276], [372, 345], [345, 447], [447, 372],\n  [352, 345], [345, 340], [340, 352], [274, 1], [1, 19], [19, 274],\n  [456, 248], [248, 281], [281, 456], [436, 427], [427, 425], [425, 436],\n  [381, 256], [256, 252], [252, 381], [269, 391], [391, 393], [393, 269],\n  [200, 199], [199, 428], [428, 200], [266, 330], [330, 329], [329, 266],\n  [287, 273], [273, 422], [422, 287], [250, 462], [462, 328], [328, 250],\n  [258, 286], [286, 384], [384, 258], [265, 353], [353, 342], [342, 265],\n  [387, 259], [259, 257], [257, 387], [424, 431], [431, 430], [430, 424],\n  [342, 353], [353, 276], [276, 342], [273, 335], [335, 424], [424, 273],\n  [292, 325], [325, 307], [307, 292], [366, 447], [447, 345], [345, 366],\n  [271, 303], [303, 302], [302, 271], [423, 266], [266, 371], [371, 423],\n  [294, 455], [455, 460], [460, 294], [279, 278], [278, 294], [294, 279],\n  [271, 272], [272, 304], [304, 271], [432, 434], [434, 427], [427, 432],\n  [272, 407], [407, 408], [408, 272], [394, 430], [430, 431], [431, 394],\n  [395, 369], [369, 400], [400, 395], [334, 333], [333, 299], [299, 334],\n  [351, 417], [417, 168], [168, 351], [352, 280], [280, 411], [411, 352],\n  [325, 319], [319, 320], [320, 325], [295, 296], [296, 336], [336, 295],\n  [319, 403], [403, 404], [404, 319], [330, 348], [348, 349], [349, 330],\n  [293, 298], [298, 333], [333, 293], [323, 454], [454, 447], [447, 323],\n  [15, 16], [16, 315], [315, 15], [358, 429], [429, 279], [279, 358],\n  [14, 15], [15, 316], [316, 14], [285, 336], [336, 9], [9, 285],\n  [329, 349], [349, 350], [350, 329], [374, 380], [380, 252], [252, 374],\n  [318, 402], [402, 403], [403, 318], [6, 197], [197, 419], [419, 6],\n  [318, 319], [319, 325], [325, 318], [367, 364], [364, 365], [365, 367],\n  [435, 367], [367, 397], [397, 435], [344, 438], [438, 439], [439, 344],\n  [272, 271], [271, 311], [311, 272], [195, 5], [5, 281], [281, 195],\n  [273, 287], [287, 291], [291, 273], [396, 428], [428, 199], [199, 396],\n  [311, 271], [271, 268], [268, 311], [283, 444], [444, 445], [445, 283],\n  [373, 254], [254, 339], [339, 373], [282, 334], [334, 296], [296, 282],\n  [449, 347], [347, 346], [346, 449], [264, 447], [447, 454], [454, 264],\n  [336, 296], [296, 299], [299, 336], [338, 10], [10, 151], [151, 338],\n  [278, 439], [439, 455], [455, 278], [292, 407], [407, 415], [415, 292],\n  [358, 371], [371, 355], [355, 358], [340, 345], [345, 372], [372, 340],\n  [346, 347], [347, 280], [280, 346], [442, 443], [443, 282], [282, 442],\n  [19, 94], [94, 370], [370, 19], [441, 442], [442, 295], [295, 441],\n  [248, 419], [419, 197], [197, 248], [263, 255], [255, 359], [359, 263],\n  [440, 275], [275, 274], [274, 440], [300, 383], [383, 368], [368, 300],\n  [351, 412], [412, 465], [465, 351], [263, 467], [467, 466], [466, 263],\n  [301, 368], [368, 389], [389, 301], [395, 378], [378, 379], [379, 395],\n  [412, 351], [351, 419], [419, 412], [436, 426], [426, 322], [322, 436],\n  [2, 164], [164, 393], [393, 2], [370, 462], [462, 461], [461, 370],\n  [164, 0], [0, 267], [267, 164], [302, 11], [11, 12], [12, 302],\n  [268, 12], [12, 13], [13, 268], [293, 300], [300, 301], [301, 293],\n  [446, 261], [261, 340], [340, 446], [330, 266], [266, 425], [425, 330],\n  [426, 423], [423, 391], [391, 426], [429, 355], [355, 437], [437, 429],\n  [391, 327], [327, 326], [326, 391], [440, 457], [457, 438], [438, 440],\n  [341, 382], [382, 362], [362, 341], [459, 457], [457, 461], [461, 459],\n  [434, 430], [430, 394], [394, 434], [414, 463], [463, 362], [362, 414],\n  [396, 369], [369, 262], [262, 396], [354, 461], [461, 457], [457, 354],\n  [316, 403], [403, 402], [402, 316], [315, 404], [404, 403], [403, 315],\n  [314, 405], [405, 404], [404, 314], [313, 406], [406, 405], [405, 313],\n  [421, 418], [418, 406], [406, 421], [366, 401], [401, 361], [361, 366],\n  [306, 408], [408, 407], [407, 306], [291, 409], [409, 408], [408, 291],\n  [287, 410], [410, 409], [409, 287], [432, 436], [436, 410], [410, 432],\n  [434, 416], [416, 411], [411, 434], [264, 368], [368, 383], [383, 264],\n  [309, 438], [438, 457], [457, 309], [352, 376], [376, 401], [401, 352],\n  [274, 275], [275, 4], [4, 274], [421, 428], [428, 262], [262, 421],\n  [294, 327], [327, 358], [358, 294], [433, 416], [416, 367], [367, 433],\n  [289, 455], [455, 439], [439, 289], [462, 370], [370, 326], [326, 462],\n  [2, 326], [326, 370], [370, 2], [305, 460], [460, 455], [455, 305],\n  [254, 449], [449, 448], [448, 254], [255, 261], [261, 446], [446, 255],\n  [253, 450], [450, 449], [449, 253], [252, 451], [451, 450], [450, 252],\n  [256, 452], [452, 451], [451, 256], [341, 453], [453, 452], [452, 341],\n  [413, 464], [464, 463], [463, 413], [441, 413], [413, 414], [414, 441],\n  [258, 442], [442, 441], [441, 258], [257, 443], [443, 442], [442, 257],\n  [259, 444], [444, 443], [443, 259], [260, 445], [445, 444], [444, 260],\n  [467, 342], [342, 445], [445, 467], [459, 458], [458, 250], [250, 459],\n  [289, 392], [392, 290], [290, 289], [290, 328], [328, 460], [460, 290],\n  [376, 433], [433, 435], [435, 376], [250, 290], [290, 392], [392, 250],\n  [411, 416], [416, 433], [433, 411], [341, 463], [463, 464], [464, 341],\n  [453, 464], [464, 465], [465, 453], [357, 465], [465, 412], [412, 357],\n  [343, 412], [412, 399], [399, 343], [360, 363], [363, 440], [440, 360],\n  [437, 399], [399, 456], [456, 437], [420, 456], [456, 363], [363, 420],\n  [401, 435], [435, 288], [288, 401], [372, 383], [383, 353], [353, 372],\n  [339, 255], [255, 249], [249, 339], [448, 261], [261, 255], [255, 448],\n  [133, 243], [243, 190], [190, 133], [133, 155], [155, 112], [112, 133],\n  [33, 246], [246, 247], [247, 33], [33, 130], [130, 25], [25, 33],\n  [398, 384], [384, 286], [286, 398], [362, 398], [398, 414], [414, 362],\n  [362, 463], [463, 341], [341, 362], [263, 359], [359, 467], [467, 263],\n  [263, 249], [249, 255], [255, 263], [466, 467], [467, 260], [260, 466],\n  [75, 60], [60, 166], [166, 75], [238, 239], [239, 79], [79, 238],\n  [162, 127], [127, 139], [139, 162], [72, 11], [11, 37], [37, 72],\n  [121, 232], [232, 120], [120, 121], [73, 72], [72, 39], [39, 73],\n  [114, 128], [128, 47], [47, 114], [233, 232], [232, 128], [128, 233],\n  [103, 104], [104, 67], [67, 103], [152, 175], [175, 148], [148, 152],\n  [119, 118], [118, 101], [101, 119], [74, 73], [73, 40], [40, 74],\n  [107, 9], [9, 108], [108, 107], [49, 48], [48, 131], [131, 49],\n  [32, 194], [194, 211], [211, 32], [184, 74], [74, 185], [185, 184],\n  [191, 80], [80, 183], [183, 191], [185, 40], [40, 186], [186, 185],\n  [119, 230], [230, 118], [118, 119], [210, 202], [202, 214], [214, 210],\n  [84, 83], [83, 17], [17, 84], [77, 76], [76, 146], [146, 77],\n  [161, 160], [160, 30], [30, 161], [190, 56], [56, 173], [173, 190],\n  [182, 106], [106, 194], [194, 182], [138, 135], [135, 192], [192, 138],\n  [129, 203], [203, 98], [98, 129], [54, 21], [21, 68], [68, 54],\n  [5, 51], [51, 4], [4, 5], [145, 144], [144, 23], [23, 145],\n  [90, 77], [77, 91], [91, 90], [207, 205], [205, 187], [187, 207],\n  [83, 201], [201, 18], [18, 83], [181, 91], [91, 182], [182, 181],\n  [180, 90], [90, 181], [181, 180], [16, 85], [85, 17], [17, 16],\n  [205, 206], [206, 36], [36, 205], [176, 148], [148, 140], [140, 176],\n  [165, 92], [92, 39], [39, 165], [245, 193], [193, 244], [244, 245],\n  [27, 159], [159, 28], [28, 27], [30, 247], [247, 161], [161, 30],\n  [174, 236], [236, 196], [196, 174], [103, 54], [54, 104], [104, 103],\n  [55, 193], [193, 8], [8, 55], [111, 117], [117, 31], [31, 111],\n  [221, 189], [189, 55], [55, 221], [240, 98], [98, 99], [99, 240],\n  [142, 126], [126, 100], [100, 142], [219, 166], [166, 218], [218, 219],\n  [112, 155], [155, 26], [26, 112], [198, 209], [209, 131], [131, 198],\n  [169, 135], [135, 150], [150, 169], [114, 47], [47, 217], [217, 114],\n  [224, 223], [223, 53], [53, 224], [220, 45], [45, 134], [134, 220],\n  [32, 211], [211, 140], [140, 32], [109, 67], [67, 108], [108, 109],\n  [146, 43], [43, 91], [91, 146], [231, 230], [230, 120], [120, 231],\n  [113, 226], [226, 247], [247, 113], [105, 63], [63, 52], [52, 105],\n  [241, 238], [238, 242], [242, 241], [124, 46], [46, 156], [156, 124],\n  [95, 78], [78, 96], [96, 95], [70, 46], [46, 63], [63, 70],\n  [116, 143], [143, 227], [227, 116], [116, 123], [123, 111], [111, 116],\n  [1, 44], [44, 19], [19, 1], [3, 236], [236, 51], [51, 3],\n  [207, 216], [216, 205], [205, 207], [26, 154], [154, 22], [22, 26],\n  [165, 39], [39, 167], [167, 165], [199, 200], [200, 208], [208, 199],\n  [101, 36], [36, 100], [100, 101], [43, 57], [57, 202], [202, 43],\n  [242, 20], [20, 99], [99, 242], [56, 28], [28, 157], [157, 56],\n  [124, 35], [35, 113], [113, 124], [29, 160], [160, 27], [27, 29],\n  [211, 204], [204, 210], [210, 211], [124, 113], [113, 46], [46, 124],\n  [106, 43], [43, 204], [204, 106], [96, 62], [62, 77], [77, 96],\n  [227, 137], [137, 116], [116, 227], [73, 41], [41, 72], [72, 73],\n  [36, 203], [203, 142], [142, 36], [235, 64], [64, 240], [240, 235],\n  [48, 49], [49, 64], [64, 48], [42, 41], [41, 74], [74, 42],\n  [214, 212], [212, 207], [207, 214], [183, 42], [42, 184], [184, 183],\n  [210, 169], [169, 211], [211, 210], [140, 170], [170, 176], [176, 140],\n  [104, 105], [105, 69], [69, 104], [193, 122], [122, 168], [168, 193],\n  [50, 123], [123, 187], [187, 50], [89, 96], [96, 90], [90, 89],\n  [66, 65], [65, 107], [107, 66], [179, 89], [89, 180], [180, 179],\n  [119, 101], [101, 120], [120, 119], [68, 63], [63, 104], [104, 68],\n  [234, 93], [93, 227], [227, 234], [16, 15], [15, 85], [85, 16],\n  [209, 129], [129, 49], [49, 209], [15, 14], [14, 86], [86, 15],\n  [107, 55], [55, 9], [9, 107], [120, 100], [100, 121], [121, 120],\n  [153, 145], [145, 22], [22, 153], [178, 88], [88, 179], [179, 178],\n  [197, 6], [6, 196], [196, 197], [89, 88], [88, 96], [96, 89],\n  [135, 138], [138, 136], [136, 135], [138, 215], [215, 172], [172, 138],\n  [218, 115], [115, 219], [219, 218], [41, 42], [42, 81], [81, 41],\n  [5, 195], [195, 51], [51, 5], [57, 43], [43, 61], [61, 57],\n  [208, 171], [171, 199], [199, 208], [41, 81], [81, 38], [38, 41],\n  [224, 53], [53, 225], [225, 224], [24, 144], [144, 110], [110, 24],\n  [105, 52], [52, 66], [66, 105], [118, 229], [229, 117], [117, 118],\n  [227, 34], [34, 234], [234, 227], [66, 107], [107, 69], [69, 66],\n  [10, 109], [109, 151], [151, 10], [219, 48], [48, 235], [235, 219],\n  [183, 62], [62, 191], [191, 183], [142, 129], [129, 126], [126, 142],\n  [116, 111], [111, 143], [143, 116], [118, 117], [117, 50], [50, 118],\n  [223, 222], [222, 52], [52, 223], [94, 19], [19, 141], [141, 94],\n  [222, 221], [221, 65], [65, 222], [196, 3], [3, 197], [197, 196],\n  [45, 220], [220, 44], [44, 45], [156, 70], [70, 139], [139, 156],\n  [188, 122], [122, 245], [245, 188], [139, 71], [71, 162], [162, 139],\n  [149, 170], [170, 150], [150, 149], [122, 188], [188, 196], [196, 122],\n  [206, 216], [216, 92], [92, 206], [164, 2], [2, 167], [167, 164],\n  [242, 141], [141, 241], [241, 242], [0, 164], [164, 37], [37, 0],\n  [11, 72], [72, 12], [12, 11], [12, 38], [38, 13], [13, 12],\n  [70, 63], [63, 71], [71, 70], [31, 226], [226, 111], [111, 31],\n  [36, 101], [101, 205], [205, 36], [203, 206], [206, 165], [165, 203],\n  [126, 209], [209, 217], [217, 126], [98, 165], [165, 97], [97, 98],\n  [237, 220], [220, 218], [218, 237], [237, 239], [239, 241], [241, 237],\n  [210, 214], [214, 169], [169, 210], [140, 171], [171, 32], [32, 140],\n  [241, 125], [125, 237], [237, 241], [179, 86], [86, 178], [178, 179],\n  [180, 85], [85, 179], [179, 180], [181, 84], [84, 180], [180, 181],\n  [182, 83], [83, 181], [181, 182], [194, 201], [201, 182], [182, 194],\n  [177, 137], [137, 132], [132, 177], [184, 76], [76, 183], [183, 184],\n  [185, 61], [61, 184], [184, 185], [186, 57], [57, 185], [185, 186],\n  [216, 212], [212, 186], [186, 216], [192, 214], [214, 187], [187, 192],\n  [139, 34], [34, 156], [156, 139], [218, 79], [79, 237], [237, 218],\n  [147, 123], [123, 177], [177, 147], [45, 44], [44, 4], [4, 45],\n  [208, 201], [201, 32], [32, 208], [98, 64], [64, 129], [129, 98],\n  [192, 213], [213, 138], [138, 192], [235, 59], [59, 219], [219, 235],\n  [141, 242], [242, 97], [97, 141], [97, 2], [2, 141], [141, 97],\n  [240, 75], [75, 235], [235, 240], [229, 24], [24, 228], [228, 229],\n  [31, 25], [25, 226], [226, 31], [230, 23], [23, 229], [229, 230],\n  [231, 22], [22, 230], [230, 231], [232, 26], [26, 231], [231, 232],\n  [233, 112], [112, 232], [232, 233], [244, 189], [189, 243], [243, 244],\n  [189, 221], [221, 190], [190, 189], [222, 28], [28, 221], [221, 222],\n  [223, 27], [27, 222], [222, 223], [224, 29], [29, 223], [223, 224],\n  [225, 30], [30, 224], [224, 225], [113, 247], [247, 225], [225, 113],\n  [99, 60], [60, 240], [240, 99], [213, 147], [147, 215], [215, 213],\n  [60, 20], [20, 166], [166, 60], [192, 187], [187, 213], [213, 192],\n  [243, 112], [112, 244], [244, 243], [244, 233], [233, 245], [245, 244],\n  [245, 128], [128, 188], [188, 245], [188, 114], [114, 174], [174, 188],\n  [134, 131], [131, 220], [220, 134], [174, 217], [217, 236], [236, 174],\n  [236, 198], [198, 134], [134, 236], [215, 177], [177, 58], [58, 215],\n  [156, 143], [143, 124], [124, 156], [25, 110], [110, 7], [7, 25],\n  [31, 228], [228, 25], [25, 31], [264, 356], [356, 368], [368, 264],\n  [0, 11], [11, 267], [267, 0], [451, 452], [452, 349], [349, 451],\n  [267, 302], [302, 269], [269, 267], [350, 357], [357, 277], [277, 350],\n  [350, 452], [452, 357], [357, 350], [299, 333], [333, 297], [297, 299],\n  [396, 175], [175, 377], [377, 396], [280, 347], [347, 330], [330, 280],\n  [269, 303], [303, 270], [270, 269], [151, 9], [9, 337], [337, 151],\n  [344, 278], [278, 360], [360, 344], [424, 418], [418, 431], [431, 424],\n  [270, 304], [304, 409], [409, 270], [272, 310], [310, 407], [407, 272],\n  [322, 270], [270, 410], [410, 322], [449, 450], [450, 347], [347, 449],\n  [432, 422], [422, 434], [434, 432], [18, 313], [313, 17], [17, 18],\n  [291, 306], [306, 375], [375, 291], [259, 387], [387, 260], [260, 259],\n  [424, 335], [335, 418], [418, 424], [434, 364], [364, 416], [416, 434],\n  [391, 423], [423, 327], [327, 391], [301, 251], [251, 298], [298, 301],\n  [275, 281], [281, 4], [4, 275], [254, 373], [373, 253], [253, 254],\n  [375, 307], [307, 321], [321, 375], [280, 425], [425, 411], [411, 280],\n  [200, 421], [421, 18], [18, 200], [335, 321], [321, 406], [406, 335],\n  [321, 320], [320, 405], [405, 321], [314, 315], [315, 17], [17, 314],\n  [423, 426], [426, 266], [266, 423], [396, 377], [377, 369], [369, 396],\n  [270, 322], [322, 269], [269, 270], [413, 417], [417, 464], [464, 413],\n  [385, 386], [386, 258], [258, 385], [248, 456], [456, 419], [419, 248],\n  [298, 284], [284, 333], [333, 298], [168, 417], [417, 8], [8, 168],\n  [448, 346], [346, 261], [261, 448], [417, 413], [413, 285], [285, 417],\n  [326, 327], [327, 328], [328, 326], [277, 355], [355, 329], [329, 277],\n  [309, 392], [392, 438], [438, 309], [381, 382], [382, 256], [256, 381],\n  [279, 429], [429, 360], [360, 279], [365, 364], [364, 379], [379, 365],\n  [355, 277], [277, 437], [437, 355], [282, 443], [443, 283], [283, 282],\n  [281, 275], [275, 363], [363, 281], [395, 431], [431, 369], [369, 395],\n  [299, 297], [297, 337], [337, 299], [335, 273], [273, 321], [321, 335],\n  [348, 450], [450, 349], [349, 348], [359, 446], [446, 467], [467, 359],\n  [283, 293], [293, 282], [282, 283], [250, 458], [458, 462], [462, 250],\n  [300, 276], [276, 383], [383, 300], [292, 308], [308, 325], [325, 292],\n  [283, 276], [276, 293], [293, 283], [264, 372], [372, 447], [447, 264],\n  [346, 352], [352, 340], [340, 346], [354, 274], [274, 19], [19, 354],\n  [363, 456], [456, 281], [281, 363], [426, 436], [436, 425], [425, 426],\n  [380, 381], [381, 252], [252, 380], [267, 269], [269, 393], [393, 267],\n  [421, 200], [200, 428], [428, 421], [371, 266], [266, 329], [329, 371],\n  [432, 287], [287, 422], [422, 432], [290, 250], [250, 328], [328, 290],\n  [385, 258], [258, 384], [384, 385], [446, 265], [265, 342], [342, 446],\n  [386, 387], [387, 257], [257, 386], [422, 424], [424, 430], [430, 422],\n  [445, 342], [342, 276], [276, 445], [422, 273], [273, 424], [424, 422],\n  [306, 292], [292, 307], [307, 306], [352, 366], [366, 345], [345, 352],\n  [268, 271], [271, 302], [302, 268], [358, 423], [423, 371], [371, 358],\n  [327, 294], [294, 460], [460, 327], [331, 279], [279, 294], [294, 331],\n  [303, 271], [271, 304], [304, 303], [436, 432], [432, 427], [427, 436],\n  [304, 272], [272, 408], [408, 304], [395, 394], [394, 431], [431, 395],\n  [378, 395], [395, 400], [400, 378], [296, 334], [334, 299], [299, 296],\n  [6, 351], [351, 168], [168, 6], [376, 352], [352, 411], [411, 376],\n  [307, 325], [325, 320], [320, 307], [285, 295], [295, 336], [336, 285],\n  [320, 319], [319, 404], [404, 320], [329, 330], [330, 349], [349, 329],\n  [334, 293], [293, 333], [333, 334], [366, 323], [323, 447], [447, 366],\n  [316, 15], [15, 315], [315, 316], [331, 358], [358, 279], [279, 331],\n  [317, 14], [14, 316], [316, 317], [8, 285], [285, 9], [9, 8],\n  [277, 329], [329, 350], [350, 277], [253, 374], [374, 252], [252, 253],\n  [319, 318], [318, 403], [403, 319], [351, 6], [6, 419], [419, 351],\n  [324, 318], [318, 325], [325, 324], [397, 367], [367, 365], [365, 397],\n  [288, 435], [435, 397], [397, 288], [278, 344], [344, 439], [439, 278],\n  [310, 272], [272, 311], [311, 310], [248, 195], [195, 281], [281, 248],\n  [375, 273], [273, 291], [291, 375], [175, 396], [396, 199], [199, 175],\n  [312, 311], [311, 268], [268, 312], [276, 283], [283, 445], [445, 276],\n  [390, 373], [373, 339], [339, 390], [295, 282], [282, 296], [296, 295],\n  [448, 449], [449, 346], [346, 448], [356, 264], [264, 454], [454, 356],\n  [337, 336], [336, 299], [299, 337], [337, 338], [338, 151], [151, 337],\n  [294, 278], [278, 455], [455, 294], [308, 292], [292, 415], [415, 308],\n  [429, 358], [358, 355], [355, 429], [265, 340], [340, 372], [372, 265],\n  [352, 346], [346, 280], [280, 352], [295, 442], [442, 282], [282, 295],\n  [354, 19], [19, 370], [370, 354], [285, 441], [441, 295], [295, 285],\n  [195, 248], [248, 197], [197, 195], [457, 440], [440, 274], [274, 457],\n  [301, 300], [300, 368], [368, 301], [417, 351], [351, 465], [465, 417],\n  [251, 301], [301, 389], [389, 251], [394, 395], [395, 379], [379, 394],\n  [399, 412], [412, 419], [419, 399], [410, 436], [436, 322], [322, 410],\n  [326, 2], [2, 393], [393, 326], [354, 370], [370, 461], [461, 354],\n  [393, 164], [164, 267], [267, 393], [268, 302], [302, 12], [12, 268],\n  [312, 268], [268, 13], [13, 312], [298, 293], [293, 301], [301, 298],\n  [265, 446], [446, 340], [340, 265], [280, 330], [330, 425], [425, 280],\n  [322, 426], [426, 391], [391, 322], [420, 429], [429, 437], [437, 420],\n  [393, 391], [391, 326], [326, 393], [344, 440], [440, 438], [438, 344],\n  [458, 459], [459, 461], [461, 458], [364, 434], [434, 394], [394, 364],\n  [428, 396], [396, 262], [262, 428], [274, 354], [354, 457], [457, 274],\n  [317, 316], [316, 402], [402, 317], [316, 315], [315, 403], [403, 316],\n  [315, 314], [314, 404], [404, 315], [314, 313], [313, 405], [405, 314],\n  [313, 421], [421, 406], [406, 313], [323, 366], [366, 361], [361, 323],\n  [292, 306], [306, 407], [407, 292], [306, 291], [291, 408], [408, 306],\n  [291, 287], [287, 409], [409, 291], [287, 432], [432, 410], [410, 287],\n  [427, 434], [434, 411], [411, 427], [372, 264], [264, 383], [383, 372],\n  [459, 309], [309, 457], [457, 459], [366, 352], [352, 401], [401, 366],\n  [1, 274], [274, 4], [4, 1], [418, 421], [421, 262], [262, 418],\n  [331, 294], [294, 358], [358, 331], [435, 433], [433, 367], [367, 435],\n  [392, 289], [289, 439], [439, 392], [328, 462], [462, 326], [326, 328],\n  [94, 2], [2, 370], [370, 94], [289, 305], [305, 455], [455, 289],\n  [339, 254], [254, 448], [448, 339], [359, 255], [255, 446], [446, 359],\n  [254, 253], [253, 449], [449, 254], [253, 252], [252, 450], [450, 253],\n  [252, 256], [256, 451], [451, 252], [256, 341], [341, 452], [452, 256],\n  [414, 413], [413, 463], [463, 414], [286, 441], [441, 414], [414, 286],\n  [286, 258], [258, 441], [441, 286], [258, 257], [257, 442], [442, 258],\n  [257, 259], [259, 443], [443, 257], [259, 260], [260, 444], [444, 259],\n  [260, 467], [467, 445], [445, 260], [309, 459], [459, 250], [250, 309],\n  [305, 289], [289, 290], [290, 305], [305, 290], [290, 460], [460, 305],\n  [401, 376], [376, 435], [435, 401], [309, 250], [250, 392], [392, 309],\n  [376, 411], [411, 433], [433, 376], [453, 341], [341, 464], [464, 453],\n  [357, 453], [453, 465], [465, 357], [343, 357], [357, 412], [412, 343],\n  [437, 343], [343, 399], [399, 437], [344, 360], [360, 440], [440, 344],\n  [420, 437], [437, 456], [456, 420], [360, 420], [420, 363], [363, 360],\n  [361, 401], [401, 288], [288, 361], [265, 372], [372, 353], [353, 265],\n  [390, 339], [339, 249], [249, 390], [339, 448], [448, 255], [255, 339],\n];\n", "/**\n * BlazeFace, FaceMesh & Iris model implementation\n * See `facemesh.ts` for entry point\n */\n\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as coords from './facemeshcoords';\nimport { constants } from '../tfjs/constants';\nimport type { Box, Point } from '../result';\nimport { env } from '../util/env';\n\nexport const createBox = (startEndTensor) => ({ startPoint: tf.slice(startEndTensor, [0, 0], [-1, 2]), endPoint: tf.slice(startEndTensor, [0, 2], [-1, 2]) });\n\nexport const disposeBox = (t) => tf.dispose([t.startPoint, t.endPoint]);\n\nexport const getBoxSize = (box): [number, number] => [Math.abs(box.endPoint[0] - box.startPoint[0]), Math.abs(box.endPoint[1] - box.startPoint[1])];\n\nexport const getBoxCenter = (box): [number, number, number] => [box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2, box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2, 1];\n\nexport const clampBox = (box, input): Box => (box ? [\n  Math.trunc(Math.max(0, box.startPoint[0])),\n  Math.trunc(Math.max(0, box.startPoint[1])),\n  Math.trunc(Math.min((input.shape[2] || 0), box.endPoint[0]) - Math.max(0, box.startPoint[0])),\n  Math.trunc(Math.min((input.shape[1] || 0), box.endPoint[1]) - Math.max(0, box.startPoint[1])),\n] : [0, 0, 0, 0]);\n\nexport const getRawBox = (box, input): Box => (box ? [\n  box.startPoint[0] / (input.shape[2] || 0),\n  box.startPoint[1] / (input.shape[1] || 0),\n  (box.endPoint[0] - box.startPoint[0]) / (input.shape[2] || 0),\n  (box.endPoint[1] - box.startPoint[1]) / (input.shape[1] || 0),\n] : [0, 0, 0, 0]);\n\nexport const scaleBoxCoordinates = (box, factor) => {\n  const startPoint: Point = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];\n  const endPoint: Point = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];\n  return { startPoint, endPoint, landmarks: box.landmarks, confidence: box.confidence };\n};\n\nexport const cutAndResize = (box, image, cropSize) => {\n  const h = image.shape[1];\n  const w = image.shape[2];\n  const cutBox = [box.startPoint[1] / h, box.startPoint[0] / w, box.endPoint[1] / h, box.endPoint[0] / w];\n  const crop = tf.image.cropAndResize(image, [cutBox], [0], cropSize);\n  const norm = tf.div(crop, constants.tf255);\n  tf.dispose(crop);\n  return norm;\n};\n\nexport const enlargeBox = (box, factor) => {\n  const center = getBoxCenter(box);\n  const size = getBoxSize(box);\n  const halfSize: [number, number] = [factor * size[0] / 2, factor * size[1] / 2];\n  return { startPoint: [center[0] - halfSize[0], center[1] - halfSize[1]] as Point, endPoint: [center[0] + halfSize[0], center[1] + halfSize[1]] as Point, landmarks: box.landmarks, confidence: box.confidence };\n};\n\nexport const squarifyBox = (box) => {\n  const centers = getBoxCenter(box);\n  const size = getBoxSize(box);\n  const halfSize = Math.max(...size) / 2;\n  return { startPoint: [Math.round(centers[0] - halfSize), Math.round(centers[1] - halfSize)] as Point, endPoint: [Math.round(centers[0] + halfSize), Math.round(centers[1] + halfSize)] as Point, landmarks: box.landmarks, confidence: box.confidence };\n};\n\nexport const calculateLandmarksBoundingBox = (landmarks) => {\n  const x = landmarks.map((d) => d[0]);\n  const y = landmarks.map((d) => d[1]);\n  return { startPoint: [Math.min(...x), Math.min(...y)] as Point, endPoint: [Math.max(...x), Math.max(...y)] as Point, landmarks };\n};\n\nexport const fixedRotationMatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n\nexport const normalizeRadians = (angle) => angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));\n\nexport const computeRotation = (point1, point2) => normalizeRadians(Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]));\n\nexport const radToDegrees = (rad) => rad * 180 / Math.PI;\n\nexport const buildTranslationMatrix = (x, y) => [[1, 0, x], [0, 1, y], [0, 0, 1]];\n\nexport const dot = (v1: number[], v2: number[]) => {\n  let product = 0;\n  for (let i = 0; i < v1.length; i++) product += v1[i] * v2[i];\n  return product;\n};\n\nexport const getColumnFrom2DArr = (arr, columnIndex) => {\n  const column: Array<number> = [];\n  for (let i = 0; i < arr.length; i++) column.push(arr[i][columnIndex]);\n  return column;\n};\n\nexport const multiplyTransformMatrices = (mat1, mat2) => {\n  const product: Array<number[]> = [];\n  const size = mat1.length;\n  for (let row = 0; row < size; row++) {\n    product.push([]);\n    for (let col = 0; col < size; col++) product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));\n  }\n  return product;\n};\n\nexport const buildRotationMatrix = (rotation, center) => {\n  const cosA = Math.cos(rotation);\n  const sinA = Math.sin(rotation);\n  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];\n  const translationMatrix = buildTranslationMatrix(center[0], center[1]);\n  const translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);\n  const negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);\n  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);\n};\n\nexport const invertTransformMatrix = (matrix) => {\n  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];\n  const translationComponent = [matrix[0][2], matrix[1][2]];\n  const invertedTranslation = [-dot(rotationComponent[0], translationComponent), -dot(rotationComponent[1], translationComponent)];\n  return [rotationComponent[0].concat(invertedTranslation[0]), rotationComponent[1].concat(invertedTranslation[1]), [0, 0, 1]];\n};\n\nexport const rotatePoint = (homogeneousCoordinate, rotationMatrix) => [dot(homogeneousCoordinate, rotationMatrix[0]), dot(homogeneousCoordinate, rotationMatrix[1])];\n\nexport const xyDistanceBetweenPoints = (a, b) => Math.sqrt(((a[0] - b[0]) ** 2) + ((a[1] - b[1]) ** 2));\n\nexport function generateAnchors(inputSize) {\n  const spec = inputSize === 192\n    ? { strides: [4], anchors: [1] } // facemesh-detector\n    : { strides: [inputSize / 16, inputSize / 8], anchors: [2, 6] }; // blazeface\n  const anchors: Array<[number, number]> = [];\n  for (let i = 0; i < spec.strides.length; i++) {\n    const stride = spec.strides[i];\n    const gridRows = Math.floor((inputSize + stride - 1) / stride);\n    const gridCols = Math.floor((inputSize + stride - 1) / stride);\n    const anchorsNum = spec.anchors[i];\n    for (let gridY = 0; gridY < gridRows; gridY++) {\n      const anchorY = stride * (gridY + 0.5);\n      for (let gridX = 0; gridX < gridCols; gridX++) {\n        const anchorX = stride * (gridX + 0.5);\n        for (let n = 0; n < anchorsNum; n++) anchors.push([anchorX, anchorY]);\n      }\n    }\n  }\n  return anchors;\n}\n\nexport function transformRawCoords(coordsRaw, box, angle, rotationMatrix, inputSize) {\n  const boxSize = getBoxSize(box);\n  const coordsScaled = coordsRaw.map((coord) => ([ // scaled around zero-point\n    (boxSize[0] / inputSize) * (coord[0] - (inputSize / 2)),\n    (boxSize[1] / inputSize) * (coord[1] - (inputSize / 2)),\n    (coord[2] || 0),\n  ]));\n  const largeAngle = angle && (angle !== 0) && (Math.abs(angle) > 0.2);\n  const coordsRotationMatrix = largeAngle ? buildRotationMatrix(angle, [0, 0]) : fixedRotationMatrix;\n  const coordsRotated = largeAngle ? coordsScaled.map((coord) => ([...rotatePoint(coord, coordsRotationMatrix), coord[2]])) : coordsScaled;\n  const inverseRotationMatrix = largeAngle ? invertTransformMatrix(rotationMatrix) : fixedRotationMatrix;\n  const boxCenter = getBoxCenter(box);\n  const offsets = [dot(boxCenter, inverseRotationMatrix[0]), dot(boxCenter, inverseRotationMatrix[1])];\n  return coordsRotated.map((coord) => ([\n    Math.trunc(coord[0] + offsets[0]),\n    Math.trunc(coord[1] + offsets[1]),\n    Math.trunc(coord[2] || 0),\n  ]));\n}\n\nexport function correctFaceRotation(rotate, box, input, inputSize) {\n  const symmetryLine = (box.landmarks.length >= coords.meshLandmarks.count)\n    ? coords.meshLandmarks.symmetryLine\n    : coords.blazeFaceLandmarks.symmetryLine;\n  let angle = 0; // default\n  let rotationMatrix = fixedRotationMatrix; // default\n  let face; // default\n\n  if (rotate && env.kernels.includes('rotatewithoffset')) { // rotateWithOffset is not defined for tfjs-node\n    angle = computeRotation(box.landmarks[symmetryLine[0]], box.landmarks[symmetryLine[1]]);\n    const largeAngle = angle && (angle !== 0) && (Math.abs(angle) > 0.2);\n    if (largeAngle) { // perform rotation only if angle is sufficiently high\n      const center: Point = getBoxCenter(box);\n      const centerRaw: Point = [center[0] / input.shape[2], center[1] / input.shape[1]];\n      const rotated = tf.image.rotateWithOffset(input, angle, 0, centerRaw);\n      rotationMatrix = buildRotationMatrix(-angle, center);\n      face = cutAndResize(box, rotated, [inputSize, inputSize]);\n      tf.dispose(rotated);\n    } else {\n      face = cutAndResize(box, input, [inputSize, inputSize]);\n    }\n  } else {\n    face = cutAndResize(box, input, [inputSize, inputSize]);\n  }\n  return [angle, rotationMatrix, face];\n}\n\nexport const findFaceCenter = (mesh) => {\n  const x = mesh.map((m) => m[0]);\n  const y = mesh.map((m) => m[1]);\n  // weighted center\n  /*\n  const sum = (arr: number[]) => arr.reduce((prev, curr) => prev + curr, 0);\n  return [sum(x) / mesh.length, sum(y) / mesh.length];\n  */\n  // absolute center\n  return [Math.min(...x) + (Math.max(...x) - Math.min(...x)) / 2, Math.min(...y) + (Math.max(...y) - Math.min(...y)) / 2];\n};\n\nexport const calculateFaceBox = (mesh, previousBox) => {\n  const center = findFaceCenter(mesh);\n  const boxSize = getBoxSize(previousBox);\n  const calculatedBox = {\n    startPoint: [center[0] - boxSize[0] / 2, center[1] - boxSize[1] / 2] as Point,\n    endPoint: [center[0] + boxSize[0] / 2, center[1] + boxSize[1] / 2] as Point,\n  };\n  return calculatedBox;\n};\n", "/**\n * BlazeFace, FaceMesh & Iris model implementation\n * See `facemesh.ts` for entry point\n */\n\nimport { log } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as util from './facemeshutil';\nimport { loadModel } from '../tfjs/load';\nimport { constants } from '../tfjs/constants';\nimport type { Config } from '../config';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport { env } from '../util/env';\nimport type { Point } from '../result';\n\nconst keypointsCount = 6;\nconst faceBoxScaleFactor = 1.4;\nlet model: GraphModel | null;\nlet anchors: Tensor | null = null;\nlet inputSize = 0;\nlet inputSizeT: Tensor | null = null;\n\ntype DetectBox = { startPoint: Point, endPoint: Point, landmarks: Array<Point>, confidence: number };\n\nexport const size = () => inputSize;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face.detector?.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  inputSize = model.inputs[0].shape ? model.inputs[0].shape[2] : 0;\n  inputSizeT = tf.scalar(inputSize, 'int32') as Tensor;\n  anchors = tf.tensor2d(util.generateAnchors(inputSize)) as Tensor;\n  return model;\n}\n\nfunction decodeBoxes(boxOutputs: Tensor) {\n  const t: Record<string, Tensor> = {};\n  t.boxStarts = tf.slice(boxOutputs, [0, 1], [-1, 2]);\n  t.centers = tf.add(t.boxStarts, anchors);\n  t.boxSizes = tf.slice(boxOutputs, [0, 3], [-1, 2]);\n  t.boxSizesNormalized = tf.div(t.boxSizes, inputSizeT);\n  t.centersNormalized = tf.div(t.centers, inputSizeT);\n  t.halfBoxSize = tf.div(t.boxSizesNormalized, constants.tf2);\n  t.starts = tf.sub(t.centersNormalized, t.halfBoxSize);\n  t.ends = tf.add(t.centersNormalized, t.halfBoxSize);\n  t.startNormalized = tf.mul(t.starts, inputSizeT);\n  t.endNormalized = tf.mul(t.ends, inputSizeT);\n  const boxes = tf.concat2d([t.startNormalized, t.endNormalized], 1);\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  return boxes;\n}\n\nexport async function getBoxes(inputImage: Tensor, config: Config) {\n  // sanity check on input\n  if ((!inputImage) || (inputImage['isDisposedInternal']) || (inputImage.shape.length !== 4) || (inputImage.shape[1] < 1) || (inputImage.shape[2] < 1)) return [];\n  const t: Record<string, Tensor> = {};\n  t.resized = tf.image.resizeBilinear(inputImage, [inputSize, inputSize]);\n  t.div = tf.div(t.resized, constants.tf127);\n  t.normalized = tf.sub(t.div, constants.tf05);\n  const res = model?.execute(t.normalized) as Tensor[];\n  if (Array.isArray(res) && res.length > 2) { // pinto converted model?\n    const sorted = res.sort((a, b) => a.size - b.size);\n    t.concat384 = tf.concat([sorted[0], sorted[2]], 2); // dim: 384, 1 + 16\n    t.concat512 = tf.concat([sorted[1], sorted[3]], 2); // dim: 512, 1 + 16\n    t.concat = tf.concat([t.concat512, t.concat384], 1);\n    t.batch = tf.squeeze(t.concat, 0);\n  } else if (Array.isArray(res)) { // new facemesh-detection tfhub model\n    t.batch = tf.squeeze(res[0]);\n  } else { // original blazeface tfhub model\n    t.batch = tf.squeeze(res);\n  }\n  tf.dispose(res);\n  t.boxes = decodeBoxes(t.batch);\n  t.logits = tf.slice(t.batch, [0, 0], [-1, 1]);\n  t.sigmoid = tf.sigmoid(t.logits);\n  t.scores = tf.squeeze(t.sigmoid);\n  t.nms = await tf.image.nonMaxSuppressionAsync(t.boxes, t.scores, (config.face.detector?.maxDetected || 0), (config.face.detector?.iouThreshold || 0), (config.face.detector?.minConfidence || 0));\n  const nms = await t.nms.array() as number[];\n  const boxes: Array<DetectBox> = [];\n  const scores = await t.scores.data();\n  for (let i = 0; i < nms.length; i++) {\n    const confidence = scores[nms[i]];\n    if (confidence > (config.face.detector?.minConfidence || 0)) {\n      const b: Record<string, Tensor> = {};\n      b.bbox = tf.slice(t.boxes, [nms[i], 0], [1, -1]);\n      b.slice = tf.slice(t.batch, [nms[i], keypointsCount - 1], [1, -1]);\n      b.squeeze = tf.squeeze(b.slice);\n      b.landmarks = tf.reshape(b.squeeze, [keypointsCount, -1]);\n      const points = await b.bbox.data();\n      const rawBox = {\n        startPoint: [points[0], points[1]] as Point,\n        endPoint: [points[2], points[3]] as Point,\n        landmarks: (await b.landmarks.array()) as Point[],\n        confidence,\n      };\n      const scaledBox = util.scaleBoxCoordinates(rawBox, [(inputImage.shape[2] || 0) / inputSize, (inputImage.shape[1] || 0) / inputSize]);\n      const enlargedBox = util.enlargeBox(scaledBox, config.face['scale'] || faceBoxScaleFactor);\n      const squaredBox = util.squarifyBox(enlargedBox);\n      boxes.push(squaredBox);\n      Object.keys(b).forEach((tensor) => tf.dispose(b[tensor]));\n    }\n  }\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  return boxes;\n}\n", "/* eslint-disable no-multi-spaces */\n\nexport const kpt: Array<string> = [\n  'nose',            //  0\n  'leftEyeInside',   //  1\n  'leftEye',         //  2\n  'leftEyeOutside',  //  3\n  'rightEyeInside',  //  4\n  'rightEye',        //  5\n  'rightEyeOutside', //  6\n  'leftEar',         //  7\n  'rightEar',        //  8\n  'leftMouth',       //  9\n  'rightMouth',      // 10\n  'leftShoulder',    // 11\n  'rightShoulder',   // 12\n  'leftElbow',       // 13\n  'rightElbow',      // 14\n  'leftWrist',       // 15\n  'rightWrist',      // 16\n  'leftPinky',       // 17\n  'rightPinky',      // 18\n  'leftIndex',       // 19\n  'rightIndex',      // 20\n  'leftThumb',       // 21\n  'rightThumb',      // 22\n  'leftHip',         // 23\n  'rightHip',        // 24\n  'leftKnee',        // 25\n  'rightKnee',       // 26\n  'leftAnkle',       // 27\n  'rightAnkle',      // 28\n  'leftHeel',        // 29\n  'rightHeel',       // 30\n  'leftFoot',        // 31\n  'rightFoot',       // 32\n  'bodyCenter',      // 33\n  'bodyTop',         // 34\n  'leftPalm',        // 35 // z-coord not ok\n  'leftHand',        // 36 // similar to wrist but z-coord not ok\n  'rightPalm',       // 37 // z-coord not ok\n  'rightHand',       // 38 // similar to wrist but z-coord not ok\n];\n\nexport const connected: Record<string, string[]> = {\n  shoulders: ['leftShoulder', 'rightShoulder'],\n  hips: ['rightHip', 'leftHip'],\n  mouth: ['leftMouth', 'rightMouth'],\n  leftLegUpper: ['leftHip', 'leftKnee'],\n  leftLegLower: ['leftKnee', 'leftAnkle'],\n  leftFoot: ['leftAnkle', 'leftHeel', 'leftFoot'],\n  leftTorso: ['leftShoulder', 'leftHip'],\n  leftArmUpper: ['leftShoulder', 'leftElbow'],\n  leftArmLower: ['leftElbow', 'leftWrist'],\n  leftHand: ['leftWrist', 'leftPalm'],\n  leftHandPinky: ['leftPalm', 'leftPinky'],\n  leftHandIndex: ['leftPalm', 'leftIndex'],\n  leftHandThumb: ['leftPalm', 'leftThumb'],\n  leftEyeOutline: ['leftEyeInside', 'leftEyeOutside'],\n  rightLegUpper: ['rightHip', 'rightKnee'],\n  rightLegLower: ['rightKnee', 'rightAnkle'],\n  rightFoot: ['rightAnkle', 'rightHeel', 'rightFoot'],\n  rightTorso: ['rightShoulder', 'rightHip'],\n  rightArmUpper: ['rightShoulder', 'rightElbow'],\n  rightArmLower: ['rightElbow', 'rightWrist'],\n  rightHand: ['rightWrist', 'rightPalm'],\n  rightHandPinky: ['rightPalm', 'rightPinky'],\n  rightHandIndex: ['rightPalm', 'rightIndex'],\n  rightHandThumb: ['rightPalm', 'rightThumb'],\n  rightEyeOutline: ['rightEyeInside', 'rightEyeOutside'],\n};\n", "import * as tf from '../../dist/tfjs.esm.js';\nimport type { Tensor } from '../tfjs/types';\nimport type { Box } from '../result';\nimport type { Config } from '../config';\n\ninterface DetectedBox { box: Box, boxRaw: Box, score: number }\n\nconst inputSize = 224;\nlet anchorTensor: { x, y };\nconst numLayers = 5;\nconst strides = [8, 16, 32, 32, 32];\n\nexport async function createAnchors() {\n  const anchors: Array<{ x: number, y: number }> = [];\n  let layerId = 0;\n  while (layerId < numLayers) {\n    let anchorCount = 0;\n    let lastSameStrideLayer = layerId;\n    while (lastSameStrideLayer < strides.length && strides[lastSameStrideLayer] === strides[layerId]) {\n      anchorCount += 2;\n      lastSameStrideLayer++;\n    }\n    const stride = strides[layerId];\n    const featureMapHeight = Math.ceil(inputSize / stride);\n    const featureMapWidth = Math.ceil(inputSize / stride);\n    for (let y = 0; y < featureMapHeight; ++y) {\n      for (let x = 0; x < featureMapWidth; ++x) {\n        for (let anchorId = 0; anchorId < anchorCount; ++anchorId) {\n          anchors.push({ x: (x + 0.5) / featureMapWidth, y: (y + 0.5) / featureMapHeight });\n        }\n      }\n    }\n    layerId = lastSameStrideLayer;\n  }\n  anchorTensor = { x: tf.tensor1d(anchors.map((a) => a.x)), y: tf.tensor1d(anchors.map((a) => a.y)) };\n}\n\nconst cropFactor = [5.0, 5.0];\nfunction decodeBoxes(boxesTensor, anchor): Tensor {\n  return tf.tidy(() => {\n    const split = tf.split(boxesTensor, 12, 1); // first 4 are box data [x,y,w,h] and 4 are keypoints data [x,y] for total of 12\n    let xCenter = tf.squeeze(split[0]);\n    let yCenter = tf.squeeze(split[1]);\n    let width = tf.squeeze(split[2]);\n    let height = tf.squeeze(split[3]);\n    xCenter = tf.add(tf.div(xCenter, inputSize), anchor.x);\n    yCenter = tf.add(tf.div(yCenter, inputSize), anchor.y);\n    width = tf.mul(tf.div(width, inputSize), cropFactor[0]);\n    height = tf.mul(tf.div(height, inputSize), cropFactor[1]);\n    const xMin = tf.sub(xCenter, tf.div(width, 2));\n    const yMin = tf.sub(yCenter, tf.div(height, 2));\n    const boxes = tf.stack([xMin, yMin, width, height], 1);\n    return boxes;\n  });\n}\n\nexport async function decode(boxesTensor: Tensor, logitsTensor: Tensor, config: Config, outputSize: [number, number]): Promise<DetectedBox[]> {\n  const t: Record<string, Tensor> = {};\n  t.boxes = decodeBoxes(boxesTensor, anchorTensor);\n  t.scores = tf.sigmoid(logitsTensor);\n  t.argmax = tf.argMax(t.scores);\n  const i = (await t.argmax.data())[0] as number;\n  const scores = await t.scores.data();\n  const detected: Array<{ box: Box, boxRaw: Box, score: number }> = [];\n  const minScore = (config.body['detector'] && config.body['detector']['minConfidence']) ? config.body['detector']['minConfidence'] : 0;\n  if (scores[i] >= minScore) {\n    const boxes = await t.boxes.array();\n    const boxRaw: Box = boxes[i];\n    const box: Box = [boxRaw[0] * outputSize[0], boxRaw[1] * outputSize[1], boxRaw[2] * outputSize[0], boxRaw[3] * outputSize[1]];\n    // console.log(box);\n    detected.push({ box, boxRaw, score: scores[i] });\n  }\n  /*\n  t.nms = await tf.image.nonMaxSuppressionAsync(t.boxes, t.scores, 1, config.body.detector?.minConfidence || 0.1, config.body.detector?.iouThreshold || 0.1);\n  const boxes = t.boxes.arraySync();\n  const scores = t.scores.dataSync();\n  const nms = t.nms.dataSync();\n  const detected: Array<DetectedBox> = [];\n  for (const i of Array.from(nms)) {\n    const boxRaw: Box = boxes[i];\n    const box: Box = [boxRaw[0] * outputSize[0], boxRaw[0] * outputSize[1], boxRaw[3] * outputSize[0], boxRaw[2] * outputSize[1]];\n    detected.push({ box, boxRaw, score: scores[i] });\n  }\n  */\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  return detected;\n}\n", "/**\n * BlazePose model implementation\n */\n\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport { constants } from '../tfjs/constants';\nimport { log, now } from '../util/util';\nimport type { BodyKeypoint, BodyResult, BodyLandmark, Box, Point, BodyAnnotation } from '../result';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport type { Config } from '../config';\nimport * as coords from './blazeposecoords';\nimport * as detect from './blazeposedetector';\nimport * as box from '../util/box';\n\nconst env = { initial: true };\n// const models: [GraphModel | null, GraphModel | null] = [null, null];\nconst models: { detector: GraphModel | null, landmarks: GraphModel | null } = { detector: null, landmarks: null };\nconst inputSize: { detector: [number, number], landmarks: [number, number] } = { detector: [224, 224], landmarks: [256, 256] };\nlet skipped = Number.MAX_SAFE_INTEGER;\nconst outputNodes: { detector: string[], landmarks: string[] } = {\n  landmarks: ['ld_3d', 'activation_segmentation', 'activation_heatmap', 'world_3d', 'output_poseflag'],\n  detector: [],\n};\n\nlet cache: BodyResult | null = null;\nlet cropBox: Box | undefined;\nlet padding: [number, number][] = [[0, 0], [0, 0], [0, 0], [0, 0]];\nlet lastTime = 0;\n\nconst sigmoid = (x) => (1 - (1 / (1 + Math.exp(x))));\n\nexport async function loadDetect(config: Config): Promise<GraphModel> {\n  if (env.initial) models.detector = null;\n  if (!models.detector && config.body['detector'] && config.body['detector']['modelPath'] || '') {\n    models.detector = await loadModel(config.body['detector']['modelPath']);\n    const inputs = Object.values(models.detector.modelSignature['inputs']);\n    inputSize.detector[0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;\n    inputSize.detector[1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;\n  } else if (config.debug && models.detector) log('cached model:', models.detector['modelUrl']);\n  await detect.createAnchors();\n  return models.detector as GraphModel;\n}\n\nexport async function loadPose(config: Config): Promise<GraphModel> {\n  if (env.initial) models.landmarks = null;\n  if (!models.landmarks) {\n    models.landmarks = await loadModel(config.body.modelPath);\n    const inputs = Object.values(models.landmarks.modelSignature['inputs']);\n    inputSize.landmarks[0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;\n    inputSize.landmarks[1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;\n  } else if (config.debug) log('cached model:', models.landmarks['modelUrl']);\n  return models.landmarks;\n}\n\nexport async function load(config: Config): Promise<[GraphModel | null, GraphModel | null]> {\n  if (!models.detector) await loadDetect(config);\n  if (!models.landmarks) await loadPose(config);\n  return [models.detector, models.landmarks];\n}\n\nasync function prepareImage(input: Tensor, size: number): Promise<Tensor> {\n  const t: Record<string, Tensor> = {};\n  if (!input.shape || !input.shape[1] || !input.shape[2]) return input;\n  let final: Tensor;\n  if (cropBox) {\n    t.cropped = tf.image.cropAndResize(input, [cropBox], [0], [input.shape[1], input.shape[2]]); // if we have cached box use it to crop input\n  }\n  if (input.shape[1] !== input.shape[2]) { // only pad if width different than height\n    const height: [number, number] = [\n      input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0,\n      input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0,\n    ];\n    const width: [number, number] = [\n      input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0,\n      input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0,\n    ];\n    padding = [\n      [0, 0], // dont touch batch\n      height, // height before&after\n      width, // width before&after\n      [0, 0], // dont touch rbg\n    ];\n    t.pad = tf.pad(t.cropped || input, padding); // use cropped box if it exists\n    t.resize = tf.image.resizeBilinear(t.pad, [size, size]);\n    final = tf.div(t.resize, constants.tf255);\n  } else if (input.shape[1] !== size) { // if input needs resizing\n    t.resize = tf.image.resizeBilinear(t.cropped || input, [size, size]);\n    final = tf.div(t.resize, constants.tf255);\n  } else { // if input is already in a correct resolution just normalize it\n    final = tf.div(t.cropped || input, constants.tf255);\n  }\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  return final;\n}\n\nfunction rescaleKeypoints(keypoints: Array<BodyKeypoint>, outputSize: [number, number]): Array<BodyKeypoint> {\n  for (const kpt of keypoints) { // first rescale due to padding\n    kpt.position = [\n      Math.trunc(kpt.position[0] * (outputSize[0] + padding[2][0] + padding[2][1]) / outputSize[0] - padding[2][0]),\n      Math.trunc(kpt.position[1] * (outputSize[1] + padding[1][0] + padding[1][1]) / outputSize[1] - padding[1][0]),\n      kpt.position[2] as number,\n    ];\n    kpt.positionRaw = [kpt.position[0] / outputSize[0], kpt.position[1] / outputSize[1], 2 * (kpt.position[2] as number) / (outputSize[0] + outputSize[1])];\n  }\n  if (cropBox) { // second rescale due to cropping\n    for (const kpt of keypoints) {\n      kpt.positionRaw = [\n        kpt.positionRaw[0] + cropBox[1], // correct offset due to crop\n        kpt.positionRaw[1] + cropBox[0], // correct offset due to crop\n        kpt.positionRaw[2] as number,\n      ];\n      kpt.position = [\n        Math.trunc(kpt.positionRaw[0] * outputSize[0]),\n        Math.trunc(kpt.positionRaw[1] * outputSize[1]),\n        kpt.positionRaw[2] as number,\n      ];\n    }\n  }\n  return keypoints;\n}\n\nasync function fixKeypoints(keypoints: Array<BodyKeypoint>) {\n  // palm z-coord is incorrect around near-zero so we approximate it\n  const leftPalm = keypoints.find((k) => k.part === 'leftPalm') as BodyKeypoint;\n  const leftWrist = keypoints.find((k) => k.part === 'leftWrist') as BodyKeypoint;\n  const leftIndex = keypoints.find((k) => k.part === 'leftIndex') as BodyKeypoint;\n  leftPalm.position[2] = ((leftWrist.position[2] || 0) + (leftIndex.position[2] || 0)) / 2;\n  const rightPalm = keypoints.find((k) => k.part === 'rightPalm') as BodyKeypoint;\n  const rightWrist = keypoints.find((k) => k.part === 'rightWrist') as BodyKeypoint;\n  const rightIndex = keypoints.find((k) => k.part === 'rightIndex') as BodyKeypoint;\n  rightPalm.position[2] = ((rightWrist.position[2] || 0) + (rightIndex.position[2] || 0)) / 2;\n}\n\nasync function detectLandmarks(input: Tensor, config: Config, outputSize: [number, number]): Promise<BodyResult | null> {\n  /**\n   * t.ld: 39 keypoints [x,y,z,score,presence] normalized to input size\n   * t.segmentation:\n   * t.heatmap:\n   * t.world: 39 keypoints [x,y,z] normalized to -1..1\n   * t.poseflag: body score\n  */\n  const t: Record<string, Tensor> = {};\n  [t.ld/* 1,195(39*5) */, t.segmentation/* 1,256,256,1 */, t.heatmap/* 1,64,64,39 */, t.world/* 1,117(39*3) */, t.poseflag/* 1,1 */] = models.landmarks?.execute(input, outputNodes.landmarks) as Tensor[]; // run model\n  const poseScore = (await t.poseflag.data())[0];\n  const points = await t.ld.data();\n  const distances = await t.world.data();\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor])); // dont need tensors after this\n  const keypointsRelative: Array<BodyKeypoint> = [];\n  const depth = 5; // each points has x,y,z,visibility,presence\n  for (let i = 0; i < points.length / depth; i++) {\n    const score = sigmoid(points[depth * i + 3]);\n    const presence = sigmoid(points[depth * i + 4]);\n    const adjScore = Math.trunc(100 * score * presence * poseScore) / 100;\n    const positionRaw: Point = [points[depth * i + 0] / inputSize.landmarks[0], points[depth * i + 1] / inputSize.landmarks[1], points[depth * i + 2] + 0];\n    const position: Point = [Math.trunc(outputSize[0] * positionRaw[0]), Math.trunc(outputSize[1] * positionRaw[1]), positionRaw[2] as number];\n    const distance: Point = [distances[depth * i + 0], distances[depth * i + 1], distances[depth * i + 2] + 0];\n    keypointsRelative.push({ part: coords.kpt[i] as BodyLandmark, positionRaw, position, distance, score: adjScore });\n  }\n  if (poseScore < (config.body.minConfidence || 0)) return null;\n  fixKeypoints(keypointsRelative);\n  const keypoints: Array<BodyKeypoint> = rescaleKeypoints(keypointsRelative, outputSize); // keypoints were relative to input image which is padded\n  const kpts = keypoints.map((k) => k.position);\n  const boxes = box.calc(kpts, [outputSize[0], outputSize[1]]); // now find boxes based on rescaled keypoints\n  const annotations: Record<BodyAnnotation, Point[][]> = {} as Record<BodyAnnotation, Point[][]>;\n  for (const [name, indexes] of Object.entries(coords.connected)) {\n    const pt: Array<Point[]> = [];\n    for (let i = 0; i < indexes.length - 1; i++) {\n      const pt0 = keypoints.find((kpt) => kpt.part === indexes[i]);\n      const pt1 = keypoints.find((kpt) => kpt.part === indexes[i + 1]);\n      if (pt0 && pt1) pt.push([pt0.position, pt1.position]);\n    }\n    annotations[name] = pt;\n  }\n  const body = { id: 0, score: Math.trunc(100 * poseScore) / 100, box: boxes.box, boxRaw: boxes.boxRaw, keypoints, annotations };\n  return body;\n}\n\n/*\ninterface DetectedBox { box: Box, boxRaw: Box, score: number }\n\nfunction rescaleBoxes(boxes: Array<DetectedBox>, outputSize: [number, number]): Array<DetectedBox> {\n  for (const b of boxes) {\n    b.box = [\n      Math.trunc(b.box[0] * (outputSize[0] + padding[2][0] + padding[2][1]) / outputSize[0]),\n      Math.trunc(b.box[1] * (outputSize[1] + padding[1][0] + padding[1][1]) / outputSize[1]),\n      Math.trunc(b.box[2] * (outputSize[0] + padding[2][0] + padding[2][1]) / outputSize[0]),\n      Math.trunc(b.box[3] * (outputSize[1] + padding[1][0] + padding[1][1]) / outputSize[1]),\n    ];\n    b.boxRaw = [b.box[0] / outputSize[0], b.box[1] / outputSize[1], b.box[2] / outputSize[0], b.box[3] / outputSize[1]];\n  }\n  return boxes;\n}\n\nasync function detectBoxes(input: Tensor, config: Config, outputSize: [number, number]) {\n  const t: Record<string, Tensor> = {};\n  t.res = models.detector?.execute(input, ['Identity']) as Tensor; //\n  t.logitsRaw = tf.slice(t.res, [0, 0, 0], [1, -1, 1]);\n  t.boxesRaw = tf.slice(t.res, [0, 0, 1], [1, -1, -1]);\n  t.logits = tf.squeeze(t.logitsRaw);\n  t.boxes = tf.squeeze(t.boxesRaw);\n  const boxes = await detect.decode(t.boxes, t.logits, config, outputSize);\n  rescaleBoxes(boxes, outputSize);\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  return boxes;\n}\n*/\n\nexport async function predict(input: Tensor, config: Config): Promise<BodyResult[]> {\n  const outputSize: [number, number] = [input.shape[2] || 0, input.shape[1] || 0];\n  const skipTime = (config.body.skipTime || 0) > (now() - lastTime);\n  const skipFrame = skipped < (config.body.skipFrames || 0);\n  if (config.skipAllowed && skipTime && skipFrame && cache !== null) {\n    skipped++;\n  } else {\n    const t: Record<string, Tensor> = {};\n    /*\n    if (config.body['detector'] && config.body['detector']['enabled']) {\n      t.detector = await prepareImage(input, 224);\n      const boxes = await detectBoxes(t.detector, config, outputSize);\n    }\n    */\n    t.landmarks = await prepareImage(input, 256); // padded and resized\n    cache = await detectLandmarks(t.landmarks, config, outputSize);\n    /*\n    cropBox = [0, 0, 1, 1]; // reset crop coordinates\n    if (cache?.boxRaw && config.skipAllowed) {\n      const cx = (2.0 * cache.boxRaw[0] + cache.boxRaw[2]) / 2;\n      const cy = (2.0 * cache.boxRaw[1] + cache.boxRaw[3]) / 2;\n      let size = cache.boxRaw[2] > cache.boxRaw[3] ? cache.boxRaw[2] : cache.boxRaw[3];\n      size = (size * 1.0) / 2; // enlarge and half it\n      if (cx > 0.1 && cx < 0.9 && cy > 0.1 && cy < 0.9 && size > 0.1) { // only update if box is sane\n        const y = 0; // cy - size;\n        const x = cx - size;\n        cropBox = [y, x, y + 1, x + 1]; // [y0,x0,y1,x1] used for cropping but width/height are not yet implemented so we only reposition image to center of body\n      }\n    }\n    */\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    lastTime = now();\n    skipped = 0;\n  }\n  return cache ? [cache] : [];\n}\n", "/**\n * CenterNet object detection model implementation\n *\n * Based on: [**NanoDet**](https://github.com/RangiLyu/nanodet)\n */\n\nimport { log, now } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport { labels } from './labels';\nimport type { ObjectResult, ObjectType, Box } from '../result';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\n\nlet model: GraphModel | null;\nlet inputSize = 0;\nlet last: ObjectResult[] = [];\nlet lastTime = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) {\n    // fakeOps(['floormod'], config);\n    model = await loadModel(config.object.modelPath);\n    const inputs = Object.values(model.modelSignature['inputs']);\n    inputSize = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;\n  } else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\nasync function process(res: Tensor | null, outputShape: [number, number], config: Config) {\n  if (!res) return [];\n  const t: Record<string, Tensor> = {};\n  const results: Array<ObjectResult> = [];\n  const detections = await res.array() as number[][][];\n  t.squeeze = tf.squeeze(res);\n  const arr = tf.split(t.squeeze, 6, 1) as Tensor[]; // x1, y1, x2, y2, score, class\n  t.stack = tf.stack([arr[1], arr[0], arr[3], arr[2]], 1); // reorder dims as tf.nms expects y, x\n  t.boxes = tf.squeeze(t.stack);\n  t.scores = tf.squeeze(arr[4]);\n  t.classes = tf.squeeze(arr[5]);\n  tf.dispose([res, ...arr]);\n  t.nms = await tf.image.nonMaxSuppressionAsync(t.boxes, t.scores, config.object.maxDetected, config.object.iouThreshold, (config.object.minConfidence || 0));\n  const nms = await t.nms.data();\n  let i = 0;\n  for (const id of Array.from(nms)) {\n    const score = Math.trunc(100 * detections[0][id][4]) / 100;\n    const classVal = detections[0][id][5];\n    const label = labels[classVal].label as ObjectType;\n    const [x, y] = [\n      detections[0][id][0] / inputSize,\n      detections[0][id][1] / inputSize,\n    ];\n    const boxRaw: Box = [\n      x,\n      y,\n      detections[0][id][2] / inputSize - x,\n      detections[0][id][3] / inputSize - y,\n    ];\n    const box: Box = [\n      Math.trunc(boxRaw[0] * outputShape[0]),\n      Math.trunc(boxRaw[1] * outputShape[1]),\n      Math.trunc(boxRaw[2] * outputShape[0]),\n      Math.trunc(boxRaw[3] * outputShape[1]),\n    ];\n    results.push({ id: i++, score, class: classVal, label, box, boxRaw });\n  }\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  return results;\n}\n\nexport async function predict(input: Tensor, config: Config): Promise<ObjectResult[]> {\n  const skipTime = (config.object.skipTime || 0) > (now() - lastTime);\n  const skipFrame = skipped < (config.object.skipFrames || 0);\n  if (config.skipAllowed && skipTime && skipFrame && (last.length > 0)) {\n    skipped++;\n    return last;\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    const outputSize = [input.shape[2] || 0, input.shape[1] || 0] as [number, number];\n    const resize = tf.image.resizeBilinear(input, [inputSize, inputSize]);\n    const objectT = config.object.enabled ? model?.execute(resize, ['tower_0/detections']) as Tensor : null;\n    lastTime = now();\n    tf.dispose(resize);\n\n    const obj = await process(objectT, outputSize, config);\n    last = obj;\n\n    resolve(obj);\n  });\n}\n", "export const kpt: Array<string> = [\n  'head',\n  'neck',\n  'rightShoulder',\n  'rightElbow',\n  'rightWrist',\n  'chest',\n  'leftShoulder',\n  'leftElbow',\n  'leftWrist',\n  'bodyCenter',\n  'rightHip',\n  'rightKnee',\n  'rightAnkle',\n  'leftHip',\n  'leftKnee',\n  'leftAnkle',\n];\n\nexport const connected: Record<string, string[]> = {\n  leftLeg: ['leftHip', 'leftKnee', 'leftAnkle'],\n  rightLeg: ['rightHip', 'rightKnee', 'rightAnkle'],\n  torso: ['leftShoulder', 'rightShoulder', 'rightHip', 'leftHip', 'leftShoulder'],\n  leftArm: ['leftShoulder', 'leftElbow', 'leftWrist'],\n  rightArm: ['rightShoulder', 'rightElbow', 'rightWrist'],\n  head: [],\n};\n", "/**\n * EfficientPose model implementation\n *\n * Based on: [**EfficientPose**](https://github.com/daniegr/EfficientPose)\n */\n\nimport { log, now } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport * as coords from './efficientposecoords';\nimport { constants } from '../tfjs/constants';\nimport type { BodyResult, Point, BodyLandmark, BodyAnnotation } from '../result';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\n\nlet model: GraphModel | null;\nlet lastTime = 0;\nconst cache: BodyResult = { id: 0, keypoints: [], box: [0, 0, 0, 0], boxRaw: [0, 0, 0, 0], score: 0, annotations: {} as Record<BodyAnnotation, Point[][]> };\n\n// const keypoints: Array<BodyKeypoint> = [];\n// let box: Box = [0, 0, 0, 0];\n// let boxRaw: Box = [0, 0, 0, 0];\n// let score = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.body.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\n// performs argmax and max functions on a 2d tensor\nasync function max2d(inputs, minScore): Promise<[number, number, number]> {\n  const [width, height] = inputs.shape;\n  const reshaped = tf.reshape(inputs, [height * width]); // combine all data\n  const max = tf.max(reshaped, 0);\n  const newScore: number = (await max.data())[0]; // get highest score\n  if (newScore > minScore) { // skip coordinate calculation is score is too low\n    const coordinates = tf.argMax(reshaped, 0);\n    const mod = tf.mod(coordinates, width);\n    const x = (await mod.data())[0];\n    const div = tf.div(coordinates, width);\n    const y: number = (await div.data())[0];\n    tf.dispose([reshaped, max, coordinates, mod, div]);\n    return [x, y, newScore];\n  } else {\n    tf.dispose([reshaped, max]);\n    return [0, 0, newScore];\n  }\n}\n\nexport async function predict(image: Tensor, config: Config): Promise<BodyResult[]> {\n  const skipTime = (config.body.skipTime || 0) > (now() - lastTime);\n  const skipFrame = skipped < (config.body.skipFrames || 0);\n  if (config.skipAllowed && skipTime && skipFrame && Object.keys(cache.keypoints).length > 0) {\n    skipped++;\n    return [cache];\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    const tensor = tf.tidy(() => {\n      if (!model?.inputs[0].shape) return null;\n      const resize = tf.image.resizeBilinear(image, [model.inputs[0].shape[2], model.inputs[0].shape[1]], false);\n      const enhance = tf.mul(resize, constants.tf2);\n      const norm = tf.sub(enhance, constants.tf1);\n      return norm;\n    });\n    let resT;\n    if (config.body.enabled) resT = model?.execute(tensor);\n    lastTime = now();\n    tf.dispose(tensor);\n\n    if (resT) {\n      cache.keypoints.length = 0;\n      const squeeze = tf.squeeze(resT);\n      tf.dispose(resT);\n      // body parts are basically just a stack of 2d tensors\n      const stack = tf.unstack(squeeze, 2);\n      tf.dispose(squeeze);\n\n      // process each unstacked tensor as a separate body part\n      for (let id = 0; id < stack.length; id++) {\n        // actual processing to get coordinates and score\n        const [x, y, partScore] = await max2d(stack[id], config.body.minConfidence);\n        if (partScore > (config.body?.minConfidence || 0)) {\n          cache.keypoints.push({\n            score: Math.round(100 * partScore) / 100,\n            part: coords.kpt[id] as BodyLandmark,\n            positionRaw: [ // normalized to 0..1\n              // @ts-ignore model is not undefined here\n              x / model.inputs[0].shape[2], y / model.inputs[0].shape[1],\n            ],\n            position: [ // normalized to input image size\n              // @ts-ignore model is not undefined here\n              Math.round(image.shape[2] * x / model.inputs[0].shape[2]), Math.round(image.shape[1] * y / model.inputs[0].shape[1]),\n            ],\n          });\n        }\n      }\n      stack.forEach((s) => tf.dispose(s));\n    }\n    cache.score = cache.keypoints.reduce((prev, curr) => (curr.score > prev ? curr.score : prev), 0);\n    const x = cache.keypoints.map((a) => a.position[0]);\n    const y = cache.keypoints.map((a) => a.position[1]);\n    cache.box = [\n      Math.min(...x),\n      Math.min(...y),\n      Math.max(...x) - Math.min(...x),\n      Math.max(...y) - Math.min(...y),\n    ];\n    const xRaw = cache.keypoints.map((a) => a.positionRaw[0]);\n    const yRaw = cache.keypoints.map((a) => a.positionRaw[1]);\n    cache.boxRaw = [\n      Math.min(...xRaw),\n      Math.min(...yRaw),\n      Math.max(...xRaw) - Math.min(...xRaw),\n      Math.max(...yRaw) - Math.min(...yRaw),\n    ];\n    for (const [name, indexes] of Object.entries(coords.connected)) {\n      const pt: Array<Point[]> = [];\n      for (let i = 0; i < indexes.length - 1; i++) {\n        const pt0 = cache.keypoints.find((kpt) => kpt.part === indexes[i]);\n        const pt1 = cache.keypoints.find((kpt) => kpt.part === indexes[i + 1]);\n        if (pt0 && pt1 && pt0.score > (config.body.minConfidence || 0) && pt1.score > (config.body.minConfidence || 0)) pt.push([pt0.position, pt1.position]);\n      }\n      cache.annotations[name] = pt;\n    }\n    resolve([cache]);\n  });\n}\n", "/**\n * Emotion model implementation\n *\n * [**Oarriaga**](https://github.com/oarriaga/face_classification)\n */\n\nimport type { Emotion } from '../result';\nimport { log, now } from '../util/util';\nimport type { Config } from '../config';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport { env } from '../util/env';\nimport { constants } from '../tfjs/constants';\n\nconst annotations = ['angry', 'disgust', 'fear', 'happy', 'sad', 'surprise', 'neutral'];\nlet model: GraphModel | null;\nconst last: Array<Array<{ score: number, emotion: Emotion }>> = [];\nlet lastCount = 0;\nlet lastTime = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face.emotion?.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\nexport async function predict(image: Tensor, config: Config, idx: number, count: number): Promise<Array<{ score: number, emotion: Emotion }>> {\n  if (!model) return [];\n  const skipFrame = skipped < (config.face.emotion?.skipFrames || 0);\n  const skipTime = (config.face.emotion?.skipTime || 0) > (now() - lastTime);\n  if (config.skipAllowed && skipTime && skipFrame && (lastCount === count) && last[idx] && (last[idx].length > 0)) {\n    skipped++;\n    return last[idx];\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    const obj: Array<{ score: number, emotion: Emotion }> = [];\n    if (config.face.emotion?.enabled) {\n      const t: Record<string, Tensor> = {};\n      const inputSize = model?.inputs[0].shape ? model.inputs[0].shape[2] : 0;\n      t.resize = tf.image.resizeBilinear(image, [inputSize, inputSize], false);\n      // const box = [[0.15, 0.15, 0.85, 0.85]]; // empyrical values for top, left, bottom, right\n      // const resize = tf.image.cropAndResize(image, box, [0], [inputSize, inputSize]);\n      // [t.red, t.green, t.blue] = tf.split(t.resize, 3, 3);\n      // weighted rgb to grayscale: https://www.mathworks.com/help/matlab/ref/rgb2gray.html\n      // t.redNorm = tf.mul(t.red, rgb[0]);\n      // t.greenNorm = tf.mul(t.green, rgb[1]);\n      // t.blueNorm = tf.mul(t.blue, rgb[2]);\n      // t.grayscale = tf.addN([t.redNorm, t.greenNorm, t.blueNorm]);\n      t.channels = tf.mul(t.resize, constants.rgb);\n      t.grayscale = tf.sum(t.channels, 3, true);\n      t.grayscaleSub = tf.sub(t.grayscale, constants.tf05);\n      t.grayscaleMul = tf.mul(t.grayscaleSub, constants.tf2);\n      t.emotion = model?.execute(t.grayscaleMul) as Tensor; // result is already in range 0..1, no need for additional activation\n      lastTime = now();\n      const data = await t.emotion.data();\n      for (let i = 0; i < data.length; i++) {\n        if (data[i] > (config.face.emotion?.minConfidence || 0)) obj.push({ score: Math.min(0.99, Math.trunc(100 * data[i]) / 100), emotion: annotations[i] as Emotion });\n      }\n      obj.sort((a, b) => b.score - a.score);\n      Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    }\n    last[idx] = obj;\n    lastCount = count;\n    resolve(obj);\n  });\n}\n", "/**\n * MobileFaceNet model implementation\n *\n * Based on: [**BecauseofAI MobileFace**](https://github.com/becauseofAI/MobileFace)\n *\n * Obsolete and replaced by `faceres` that performs age/gender/descriptor analysis\n */\n\nimport { log, now } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\n\nlet model: GraphModel | null;\nconst last: Array<number[]> = [];\nlet lastCount = 0;\nlet lastTime = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face['mobilefacenet'].modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\n/*\n// convert to black&white to avoid colorization impact\nconst rgb = [0.2989, 0.5870, 0.1140]; // factors for red/green/blue colors when converting to grayscale: https://www.mathworks.com/help/matlab/ref/rgb2gray.html\nconst [red, green, blue] = tf.split(crop, 3, 3);\nconst redNorm = tf.mul(red, rgb[0]);\nconst greenNorm = tf.mul(green, rgb[1]);\nconst blueNorm = tf.mul(blue, rgb[2]);\nconst grayscale = tf.addN([redNorm, greenNorm, blueNorm]);\nconst merge = tf.stack([grayscale, grayscale, grayscale], 3).squeeze(4);\n\n// optional increase image contrast\n// or do it per-channel so mean is done on each channel\n// or do it based on histogram\nconst mean = merge.mean();\nconst factor = 5;\nconst contrast = merge.sub(mean).mul(factor).add(mean);\n*/\n\nexport async function predict(input: Tensor, config: Config, idx, count): Promise<number[]> {\n  if (!model) return [];\n  const skipFrame = skipped < (config.face['mobilefacenet']?.skipFrames || 0);\n  const skipTime = (config.face['mobilefacenet']?.skipTime || 0) > (now() - lastTime);\n  if (config.skipAllowed && skipTime && skipFrame && (lastCount === count) && last[idx]) {\n    skipped++;\n    return last[idx];\n  }\n  return new Promise(async (resolve) => {\n    let data: Array<number> = [];\n    if (config.face['mobilefacenet']?.enabled && model?.inputs[0].shape) {\n      const t: Record<string, Tensor> = {};\n      t.crop = tf.image.resizeBilinear(input, [model.inputs[0].shape[2], model.inputs[0].shape[1]], false); // just resize to fit the embedding model\n      // do a tight crop of image and resize it to fit the model\n      // const box = [[0.05, 0.15, 0.85, 0.85]]; // empyrical values for top, left, bottom, right\n      // t.crop = tf.image.cropAndResize(input, box, [0], [model.inputs[0].shape[2], model.inputs[0].shape[1]]);\n      t.data = model?.execute(t.crop) as Tensor;\n      /*\n      // optional normalize outputs with l2 normalization\n      const scaled = tf.tidy(() => {\n        const l2 = res.norm('euclidean');\n        const scale = res.div(l2);\n        return scale;\n      });\n\n      // optional reduce feature vector complexity\n      const reshape = tf.reshape(res, [128, 2]); // split 256 vectors into 128 x 2\n      const reduce = reshape.logSumExp(1); // reduce 2nd dimension by calculating logSumExp on it\n      */\n      const output = await t.data.data();\n      data = Array.from(output); // convert typed array to simple array\n      Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    }\n    last[idx] = data;\n    lastCount = count;\n    lastTime = now();\n    resolve(data);\n  });\n}\n", "/**\n * InsightFace model implementation\n *\n * Based on: [**DeepInsight InsightFace**](https://github.com/deepinsight/insightface)\n *\n * Alternative face embedding detection\n */\n\nimport { log, now } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\n\nlet model: GraphModel | null;\nconst last: Array<number[]> = [];\nlet lastCount = 0;\nlet lastTime = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face['insightface'].modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\nexport async function predict(input: Tensor, config: Config, idx, count): Promise<number[]> {\n  if (!model) return [];\n  const skipFrame = skipped < (config.face['insightface']?.skipFrames || 0);\n  const skipTime = (config.face['insightface']?.skipTime || 0) > (now() - lastTime);\n  if (config.skipAllowed && skipTime && skipFrame && (lastCount === count) && last[idx]) {\n    skipped++;\n    return last[idx];\n  }\n  return new Promise(async (resolve) => {\n    let data: Array<number> = [];\n    if (config.face['insightface']?.enabled && model?.inputs[0].shape) {\n      const t: Record<string, Tensor> = {};\n      t.crop = tf.image.resizeBilinear(input, [model.inputs[0].shape[2], model.inputs[0].shape[1]], false); // just resize to fit the embedding model\n      // do a tight crop of image and resize it to fit the model\n      // const box = [[0.05, 0.15, 0.85, 0.85]]; // empyrical values for top, left, bottom, right\n      // t.crop = tf.image.cropAndResize(input, box, [0], [model.inputs[0].shape[2], model.inputs[0].shape[1]]);\n      t.data = model?.execute(t.crop) as Tensor;\n      const output = await t.data.data();\n      data = Array.from(output); // convert typed array to simple array\n      Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    }\n    last[idx] = data;\n    lastCount = count;\n    lastTime = now();\n    resolve(data);\n  });\n}\n", "/**\n * BlazeFace, FaceMesh & Iris model implementation\n *\n * Based on:\n * - [**MediaPipe BlazeFace**](https://drive.google.com/file/d/1f39lSzU5Oq-j_OXgS67KfN5wNsoeAZ4V/view)\n * - Facial Spacial Geometry: [**MediaPipe FaceMesh**](https://drive.google.com/file/d/1VFC_wIpw4O7xBOiTgUldl79d9LA-LsnA/view)\n * - Eye Iris Details: [**MediaPipe Iris**](https://drive.google.com/file/d/1bsWbokp9AklH2ANjCfmjqEzzxO1CNbMu/view)\n */\n\nimport { log, now } from '../util/util';\nimport { loadModel } from '../tfjs/load';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as blazeface from './blazeface';\nimport * as util from './facemeshutil';\nimport * as coords from './facemeshcoords';\nimport { env } from '../util/env';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport type { FaceResult, FaceLandmark, Point } from '../result';\nimport type { Config } from '../config';\n\ntype DetectBox = { startPoint: Point, endPoint: Point, landmarks: Array<Point>, confidence: number };\n\nconst cache = {\n  boxes: [] as DetectBox[],\n  skipped: Number.MAX_SAFE_INTEGER,\n  timestamp: 0,\n};\n\nlet model: GraphModel | null = null;\n\nexport async function predict(input: Tensor, config: Config): Promise<FaceResult[]> {\n  // reset cached boxes\n  const skipTime = (config.face.detector?.skipTime || 0) > (now() - cache.timestamp);\n  const skipFrame = cache.skipped < (config.face.detector?.skipFrames || 0);\n  if (!config.skipAllowed || !skipTime || !skipFrame || cache.boxes.length === 0) {\n    cache.boxes = await blazeface.getBoxes(input, config); // get results from blazeface detector\n    cache.timestamp = now();\n    cache.skipped = 0;\n  } else {\n    cache.skipped++;\n  }\n  const faces: Array<FaceResult> = [];\n  const newCache: Array<DetectBox> = [];\n  let id = 0;\n  for (let i = 0; i < cache.boxes.length; i++) {\n    const box = cache.boxes[i];\n    const face: FaceResult = { // init face result\n      id: id++,\n      mesh: [],\n      meshRaw: [],\n      box: [0, 0, 0, 0],\n      boxRaw: [0, 0, 0, 0],\n      score: 0,\n      boxScore: 0,\n      faceScore: 0,\n      // contoursRaw: [],\n      // contours: [],\n      annotations: {} as Record<FaceLandmark, Point[]>,\n    };\n\n    [,, face.tensor] = util.correctFaceRotation(config.face.detector?.rotation, box, input, blazeface.size());\n\n    face.boxScore = Math.round(100 * box.confidence) / 100;\n    face.box = util.clampBox(box, input);\n    face.boxRaw = util.getRawBox(box, input);\n    face.score = face.boxScore;\n    if (face.score > (config.face.detector?.minConfidence || 1)) faces.push(face);\n    else tf.dispose(face.tensor);\n  }\n  cache.boxes = newCache; // reset cache\n  return faces;\n}\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) {\n    model = await loadModel(config.face.mesh?.modelPath);\n  } else if (config.debug) {\n    log('cached model:', model['modelUrl']);\n  }\n  return model;\n}\n\nexport const triangulation = coords.TRI468;\nexport const uvmap = coords.UV468;\n", "/**\n * FaceRes model implementation\n *\n * Returns Age, Gender, Descriptor\n * Implements Face simmilarity function\n *\n * Based on: [**HSE-FaceRes**](https://github.com/HSE-asavchenko/HSE_FaceRec_tf)\n */\n\nimport { log, now } from '../util/util';\nimport { env } from '../util/env';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport { constants } from '../tfjs/constants';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport type { Config } from '../config';\nimport type { Gender, Race } from '../result';\n\nexport type FaceRes = { age: number, gender: Gender, genderScore: number, descriptor: number[], race?: { score: number, race: Race }[] };\n\nlet model: GraphModel | null;\nconst last: Array<{\n  age: number,\n  gender: Gender,\n  genderScore: number,\n  descriptor: number[],\n}> = [];\n\nlet lastTime = 0;\nlet lastCount = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face.description?.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\nexport function enhance(input): Tensor {\n  const tensor = (input.image || input.tensor || input) as Tensor; // input received from detector is already normalized to 0..1, input is also assumed to be straightened\n  if (!model?.inputs[0].shape) return tensor; // model has no shape so no point continuing\n  const crop = tf.image.resizeBilinear(tensor, [model.inputs[0].shape[2], model.inputs[0].shape[1]], false);\n  const norm = tf.mul(crop, constants.tf255);\n  tf.dispose(crop);\n  return norm;\n  /*\n  // do a tight crop of image and resize it to fit the model\n  const box = [[0.05, 0.15, 0.85, 0.85]]; // empyrical values for top, left, bottom, right\n  const crop = (tensor.shape.length === 3)\n    ? tf.image.cropAndResize(tf.expandDims(tensor, 0), box, [0], [model.inputs[0].shape[2], model.inputs[0].shape[1]]) // add batch dimension if missing\n    : tf.image.cropAndResize(tensor, box, [0], [model.inputs[0].shape[2], model.inputs[0].shape[1]]);\n  */\n  /*\n  // convert to black&white to avoid colorization impact\n  const rgb = [0.2989, 0.5870, 0.1140]; // factors for red/green/blue colors when converting to grayscale: https://www.mathworks.com/help/matlab/ref/rgb2gray.html\n  const [red, green, blue] = tf.split(crop, 3, 3);\n  const redNorm = tf.mul(red, rgb[0]);\n  const greenNorm = tf.mul(green, rgb[1]);\n  const blueNorm = tf.mul(blue, rgb[2]);\n  const grayscale = tf.addN([redNorm, greenNorm, blueNorm]);\n  const merge = tf.stack([grayscale, grayscale, grayscale], 3).squeeze(4);\n  */\n}\n\nexport async function predict(image: Tensor, config: Config, idx: number, count: number): Promise<FaceRes> {\n  if (!model) return { age: 0, gender: 'unknown', genderScore: 0, descriptor: [] };\n  const skipFrame = skipped < (config.face.description?.skipFrames || 0);\n  const skipTime = (config.face.description?.skipTime || 0) > (now() - lastTime);\n  if (config.skipAllowed && skipFrame && skipTime && (lastCount === count) && last[idx]?.age && (last[idx]?.age > 0)) {\n    skipped++;\n    return last[idx];\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    const obj = {\n      age: <number>0,\n      gender: <Gender>'unknown',\n      genderScore: <number>0,\n      descriptor: <number[]>[],\n    };\n\n    if (config.face.description?.enabled) {\n      const enhanced = enhance(image);\n      const resT = model?.execute(enhanced) as Tensor[];\n      lastTime = now();\n      tf.dispose(enhanced);\n      const genderT = await resT.find((t) => t.shape[1] === 1) as Tensor;\n      const gender = await genderT.data();\n      const confidence = Math.trunc(200 * Math.abs((gender[0] - 0.5))) / 100;\n      if (confidence > (config.face.description?.minConfidence || 0)) {\n        obj.gender = gender[0] <= 0.5 ? 'female' : 'male';\n        obj.genderScore = Math.min(0.99, confidence);\n      }\n      const argmax = tf.argMax(resT.find((t) => t.shape[1] === 100), 1);\n      const age = (await argmax.data())[0];\n      tf.dispose(argmax);\n      const ageT = resT.find((t) => t.shape[1] === 100) as Tensor;\n      const all = await ageT.data();\n      obj.age = Math.round(all[age - 1] > all[age + 1] ? 10 * age - 100 * all[age - 1] : 10 * age + 100 * all[age + 1]) / 10;\n\n      const desc = resT.find((t) => t.shape[1] === 1024);\n      // const reshape = desc.reshape([128, 8]); // reshape large 1024-element descriptor to 128 x 8\n      // const reduce = reshape.logSumExp(1); // reduce 2nd dimension by calculating logSumExp on it which leaves us with 128-element descriptor\n      const descriptor = desc ? await desc.data() : <number[]>[];\n      obj.descriptor = Array.from(descriptor);\n      resT.forEach((t) => tf.dispose(t));\n    }\n    last[idx] = obj;\n    lastCount = count;\n    resolve(obj);\n  });\n}\n", "import * as tf from '../../dist/tfjs.esm.js';\nimport type { Point } from '../result';\n\nexport function getBoxSize(box) {\n  return [\n    Math.abs(box.endPoint[0] - box.startPoint[0]),\n    Math.abs(box.endPoint[1] - box.startPoint[1]),\n  ];\n}\n\nexport function getBoxCenter(box) {\n  return [\n    box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2,\n    box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2,\n  ];\n}\n\nexport function cutBoxFromImageAndResize(box, image, cropSize) {\n  const h = image.shape[1];\n  const w = image.shape[2];\n  const boxes = [[\n    box.startPoint[1] / h,\n    box.startPoint[0] / w,\n    box.endPoint[1] / h,\n    box.endPoint[0] / w,\n  ]];\n  return tf.image.cropAndResize(image, boxes, [0], cropSize);\n}\n\nexport function scaleBoxCoordinates(box, factor) {\n  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]] as Point;\n  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]] as Point;\n  const palmLandmarks = box.palmLandmarks.map((coord) => {\n    const scaledCoord = [coord[0] * factor[0], coord[1] * factor[1]];\n    return scaledCoord;\n  });\n  return { startPoint, endPoint, palmLandmarks, confidence: box.confidence };\n}\n\nexport function enlargeBox(box, factor = 1.5) {\n  const center = getBoxCenter(box);\n  const size = getBoxSize(box);\n  const newHalfSize = [factor * size[0] / 2, factor * size[1] / 2];\n  const startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]] as Point;\n  const endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]] as Point;\n  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };\n}\n\nexport function squarifyBox(box) {\n  const centers = getBoxCenter(box);\n  const size = getBoxSize(box);\n  const maxEdge = Math.max(...size);\n  const halfSize = maxEdge / 2;\n  const startPoint = [centers[0] - halfSize, centers[1] - halfSize] as Point;\n  const endPoint = [centers[0] + halfSize, centers[1] + halfSize] as Point;\n  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };\n}\n\nexport function shiftBox(box, shiftFactor) {\n  const boxSize = [\n    box.endPoint[0] - box.startPoint[0],\n    box.endPoint[1] - box.startPoint[1],\n  ];\n  const shiftVector = [boxSize[0] * shiftFactor[0], boxSize[1] * shiftFactor[1]];\n  const startPoint = [box.startPoint[0] + shiftVector[0], box.startPoint[1] + shiftVector[1]] as Point;\n  const endPoint = [box.endPoint[0] + shiftVector[0], box.endPoint[1] + shiftVector[1]] as Point;\n  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };\n}\n\nexport function normalizeRadians(angle) {\n  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));\n}\n\nexport function computeRotation(point1, point2) {\n  const radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);\n  return normalizeRadians(radians);\n}\n\nexport const buildTranslationMatrix = (x, y) => [[1, 0, x], [0, 1, y], [0, 0, 1]];\n\nexport function dot(v1, v2) {\n  let product = 0;\n  for (let i = 0; i < v1.length; i++) {\n    product += v1[i] * v2[i];\n  }\n  return product;\n}\n\nexport function getColumnFrom2DArr(arr, columnIndex) {\n  const column: Array<number> = [];\n  for (let i = 0; i < arr.length; i++) {\n    column.push(arr[i][columnIndex]);\n  }\n  return column;\n}\n\nexport function multiplyTransformMatrices(mat1, mat2) {\n  const product: Array<number[]> = [];\n  const size = mat1.length;\n  for (let row = 0; row < size; row++) {\n    product.push([]);\n    for (let col = 0; col < size; col++) {\n      product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));\n    }\n  }\n  return product;\n}\n\nexport function buildRotationMatrix(rotation, center) {\n  const cosA = Math.cos(rotation);\n  const sinA = Math.sin(rotation);\n  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];\n  const translationMatrix = buildTranslationMatrix(center[0], center[1]);\n  const translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);\n  const negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);\n  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);\n}\n\nexport function invertTransformMatrix(matrix) {\n  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];\n  const translationComponent = [matrix[0][2], matrix[1][2]];\n  const invertedTranslation = [\n    -dot(rotationComponent[0], translationComponent),\n    -dot(rotationComponent[1], translationComponent),\n  ];\n  return [\n    rotationComponent[0].concat(invertedTranslation[0]),\n    rotationComponent[1].concat(invertedTranslation[1]),\n    [0, 0, 1],\n  ];\n}\n\nexport function rotatePoint(homogeneousCoordinate, rotationMatrix) {\n  return [\n    dot(homogeneousCoordinate, rotationMatrix[0]),\n    dot(homogeneousCoordinate, rotationMatrix[1]),\n  ];\n}\n", "/**\n * HandPose model implementation constants\n * See `handpose.ts` for entry point\n */\n\nexport const anchors = [\n  { x: 0.015625, y: 0.015625 },\n  { x: 0.015625, y: 0.015625 },\n  { x: 0.046875, y: 0.015625 },\n  { x: 0.046875, y: 0.015625 },\n  { x: 0.078125, y: 0.015625 },\n  { x: 0.078125, y: 0.015625 },\n  { x: 0.109375, y: 0.015625 },\n  { x: 0.109375, y: 0.015625 },\n  { x: 0.140625, y: 0.015625 },\n  { x: 0.140625, y: 0.015625 },\n  { x: 0.171875, y: 0.015625 },\n  { x: 0.171875, y: 0.015625 },\n  { x: 0.203125, y: 0.015625 },\n  { x: 0.203125, y: 0.015625 },\n  { x: 0.234375, y: 0.015625 },\n  { x: 0.234375, y: 0.015625 },\n  { x: 0.265625, y: 0.015625 },\n  { x: 0.265625, y: 0.015625 },\n  { x: 0.296875, y: 0.015625 },\n  { x: 0.296875, y: 0.015625 },\n  { x: 0.328125, y: 0.015625 },\n  { x: 0.328125, y: 0.015625 },\n  { x: 0.359375, y: 0.015625 },\n  { x: 0.359375, y: 0.015625 },\n  { x: 0.390625, y: 0.015625 },\n  { x: 0.390625, y: 0.015625 },\n  { x: 0.421875, y: 0.015625 },\n  { x: 0.421875, y: 0.015625 },\n  { x: 0.453125, y: 0.015625 },\n  { x: 0.453125, y: 0.015625 },\n  { x: 0.484375, y: 0.015625 },\n  { x: 0.484375, y: 0.015625 },\n  { x: 0.515625, y: 0.015625 },\n  { x: 0.515625, y: 0.015625 },\n  { x: 0.546875, y: 0.015625 },\n  { x: 0.546875, y: 0.015625 },\n  { x: 0.578125, y: 0.015625 },\n  { x: 0.578125, y: 0.015625 },\n  { x: 0.609375, y: 0.015625 },\n  { x: 0.609375, y: 0.015625 },\n  { x: 0.640625, y: 0.015625 },\n  { x: 0.640625, y: 0.015625 },\n  { x: 0.671875, y: 0.015625 },\n  { x: 0.671875, y: 0.015625 },\n  { x: 0.703125, y: 0.015625 },\n  { x: 0.703125, y: 0.015625 },\n  { x: 0.734375, y: 0.015625 },\n  { x: 0.734375, y: 0.015625 },\n  { x: 0.765625, y: 0.015625 },\n  { x: 0.765625, y: 0.015625 },\n  { x: 0.796875, y: 0.015625 },\n  { x: 0.796875, y: 0.015625 },\n  { x: 0.828125, y: 0.015625 },\n  { x: 0.828125, y: 0.015625 },\n  { x: 0.859375, y: 0.015625 },\n  { x: 0.859375, y: 0.015625 },\n  { x: 0.890625, y: 0.015625 },\n  { x: 0.890625, y: 0.015625 },\n  { x: 0.921875, y: 0.015625 },\n  { x: 0.921875, y: 0.015625 },\n  { x: 0.953125, y: 0.015625 },\n  { x: 0.953125, y: 0.015625 },\n  { x: 0.984375, y: 0.015625 },\n  { x: 0.984375, y: 0.015625 },\n  { x: 0.015625, y: 0.046875 },\n  { x: 0.015625, y: 0.046875 },\n  { x: 0.046875, y: 0.046875 },\n  { x: 0.046875, y: 0.046875 },\n  { x: 0.078125, y: 0.046875 },\n  { x: 0.078125, y: 0.046875 },\n  { x: 0.109375, y: 0.046875 },\n  { x: 0.109375, y: 0.046875 },\n  { x: 0.140625, y: 0.046875 },\n  { x: 0.140625, y: 0.046875 },\n  { x: 0.171875, y: 0.046875 },\n  { x: 0.171875, y: 0.046875 },\n  { x: 0.203125, y: 0.046875 },\n  { x: 0.203125, y: 0.046875 },\n  { x: 0.234375, y: 0.046875 },\n  { x: 0.234375, y: 0.046875 },\n  { x: 0.265625, y: 0.046875 },\n  { x: 0.265625, y: 0.046875 },\n  { x: 0.296875, y: 0.046875 },\n  { x: 0.296875, y: 0.046875 },\n  { x: 0.328125, y: 0.046875 },\n  { x: 0.328125, y: 0.046875 },\n  { x: 0.359375, y: 0.046875 },\n  { x: 0.359375, y: 0.046875 },\n  { x: 0.390625, y: 0.046875 },\n  { x: 0.390625, y: 0.046875 },\n  { x: 0.421875, y: 0.046875 },\n  { x: 0.421875, y: 0.046875 },\n  { x: 0.453125, y: 0.046875 },\n  { x: 0.453125, y: 0.046875 },\n  { x: 0.484375, y: 0.046875 },\n  { x: 0.484375, y: 0.046875 },\n  { x: 0.515625, y: 0.046875 },\n  { x: 0.515625, y: 0.046875 },\n  { x: 0.546875, y: 0.046875 },\n  { x: 0.546875, y: 0.046875 },\n  { x: 0.578125, y: 0.046875 },\n  { x: 0.578125, y: 0.046875 },\n  { x: 0.609375, y: 0.046875 },\n  { x: 0.609375, y: 0.046875 },\n  { x: 0.640625, y: 0.046875 },\n  { x: 0.640625, y: 0.046875 },\n  { x: 0.671875, y: 0.046875 },\n  { x: 0.671875, y: 0.046875 },\n  { x: 0.703125, y: 0.046875 },\n  { x: 0.703125, y: 0.046875 },\n  { x: 0.734375, y: 0.046875 },\n  { x: 0.734375, y: 0.046875 },\n  { x: 0.765625, y: 0.046875 },\n  { x: 0.765625, y: 0.046875 },\n  { x: 0.796875, y: 0.046875 },\n  { x: 0.796875, y: 0.046875 },\n  { x: 0.828125, y: 0.046875 },\n  { x: 0.828125, y: 0.046875 },\n  { x: 0.859375, y: 0.046875 },\n  { x: 0.859375, y: 0.046875 },\n  { x: 0.890625, y: 0.046875 },\n  { x: 0.890625, y: 0.046875 },\n  { x: 0.921875, y: 0.046875 },\n  { x: 0.921875, y: 0.046875 },\n  { x: 0.953125, y: 0.046875 },\n  { x: 0.953125, y: 0.046875 },\n  { x: 0.984375, y: 0.046875 },\n  { x: 0.984375, y: 0.046875 },\n  { x: 0.015625, y: 0.078125 },\n  { x: 0.015625, y: 0.078125 },\n  { x: 0.046875, y: 0.078125 },\n  { x: 0.046875, y: 0.078125 },\n  { x: 0.078125, y: 0.078125 },\n  { x: 0.078125, y: 0.078125 },\n  { x: 0.109375, y: 0.078125 },\n  { x: 0.109375, y: 0.078125 },\n  { x: 0.140625, y: 0.078125 },\n  { x: 0.140625, y: 0.078125 },\n  { x: 0.171875, y: 0.078125 },\n  { x: 0.171875, y: 0.078125 },\n  { x: 0.203125, y: 0.078125 },\n  { x: 0.203125, y: 0.078125 },\n  { x: 0.234375, y: 0.078125 },\n  { x: 0.234375, y: 0.078125 },\n  { x: 0.265625, y: 0.078125 },\n  { x: 0.265625, y: 0.078125 },\n  { x: 0.296875, y: 0.078125 },\n  { x: 0.296875, y: 0.078125 },\n  { x: 0.328125, y: 0.078125 },\n  { x: 0.328125, y: 0.078125 },\n  { x: 0.359375, y: 0.078125 },\n  { x: 0.359375, y: 0.078125 },\n  { x: 0.390625, y: 0.078125 },\n  { x: 0.390625, y: 0.078125 },\n  { x: 0.421875, y: 0.078125 },\n  { x: 0.421875, y: 0.078125 },\n  { x: 0.453125, y: 0.078125 },\n  { x: 0.453125, y: 0.078125 },\n  { x: 0.484375, y: 0.078125 },\n  { x: 0.484375, y: 0.078125 },\n  { x: 0.515625, y: 0.078125 },\n  { x: 0.515625, y: 0.078125 },\n  { x: 0.546875, y: 0.078125 },\n  { x: 0.546875, y: 0.078125 },\n  { x: 0.578125, y: 0.078125 },\n  { x: 0.578125, y: 0.078125 },\n  { x: 0.609375, y: 0.078125 },\n  { x: 0.609375, y: 0.078125 },\n  { x: 0.640625, y: 0.078125 },\n  { x: 0.640625, y: 0.078125 },\n  { x: 0.671875, y: 0.078125 },\n  { x: 0.671875, y: 0.078125 },\n  { x: 0.703125, y: 0.078125 },\n  { x: 0.703125, y: 0.078125 },\n  { x: 0.734375, y: 0.078125 },\n  { x: 0.734375, y: 0.078125 },\n  { x: 0.765625, y: 0.078125 },\n  { x: 0.765625, y: 0.078125 },\n  { x: 0.796875, y: 0.078125 },\n  { x: 0.796875, y: 0.078125 },\n  { x: 0.828125, y: 0.078125 },\n  { x: 0.828125, y: 0.078125 },\n  { x: 0.859375, y: 0.078125 },\n  { x: 0.859375, y: 0.078125 },\n  { x: 0.890625, y: 0.078125 },\n  { x: 0.890625, y: 0.078125 },\n  { x: 0.921875, y: 0.078125 },\n  { x: 0.921875, y: 0.078125 },\n  { x: 0.953125, y: 0.078125 },\n  { x: 0.953125, y: 0.078125 },\n  { x: 0.984375, y: 0.078125 },\n  { x: 0.984375, y: 0.078125 },\n  { x: 0.015625, y: 0.109375 },\n  { x: 0.015625, y: 0.109375 },\n  { x: 0.046875, y: 0.109375 },\n  { x: 0.046875, y: 0.109375 },\n  { x: 0.078125, y: 0.109375 },\n  { x: 0.078125, y: 0.109375 },\n  { x: 0.109375, y: 0.109375 },\n  { x: 0.109375, y: 0.109375 },\n  { x: 0.140625, y: 0.109375 },\n  { x: 0.140625, y: 0.109375 },\n  { x: 0.171875, y: 0.109375 },\n  { x: 0.171875, y: 0.109375 },\n  { x: 0.203125, y: 0.109375 },\n  { x: 0.203125, y: 0.109375 },\n  { x: 0.234375, y: 0.109375 },\n  { x: 0.234375, y: 0.109375 },\n  { x: 0.265625, y: 0.109375 },\n  { x: 0.265625, y: 0.109375 },\n  { x: 0.296875, y: 0.109375 },\n  { x: 0.296875, y: 0.109375 },\n  { x: 0.328125, y: 0.109375 },\n  { x: 0.328125, y: 0.109375 },\n  { x: 0.359375, y: 0.109375 },\n  { x: 0.359375, y: 0.109375 },\n  { x: 0.390625, y: 0.109375 },\n  { x: 0.390625, y: 0.109375 },\n  { x: 0.421875, y: 0.109375 },\n  { x: 0.421875, y: 0.109375 },\n  { x: 0.453125, y: 0.109375 },\n  { x: 0.453125, y: 0.109375 },\n  { x: 0.484375, y: 0.109375 },\n  { x: 0.484375, y: 0.109375 },\n  { x: 0.515625, y: 0.109375 },\n  { x: 0.515625, y: 0.109375 },\n  { x: 0.546875, y: 0.109375 },\n  { x: 0.546875, y: 0.109375 },\n  { x: 0.578125, y: 0.109375 },\n  { x: 0.578125, y: 0.109375 },\n  { x: 0.609375, y: 0.109375 },\n  { x: 0.609375, y: 0.109375 },\n  { x: 0.640625, y: 0.109375 },\n  { x: 0.640625, y: 0.109375 },\n  { x: 0.671875, y: 0.109375 },\n  { x: 0.671875, y: 0.109375 },\n  { x: 0.703125, y: 0.109375 },\n  { x: 0.703125, y: 0.109375 },\n  { x: 0.734375, y: 0.109375 },\n  { x: 0.734375, y: 0.109375 },\n  { x: 0.765625, y: 0.109375 },\n  { x: 0.765625, y: 0.109375 },\n  { x: 0.796875, y: 0.109375 },\n  { x: 0.796875, y: 0.109375 },\n  { x: 0.828125, y: 0.109375 },\n  { x: 0.828125, y: 0.109375 },\n  { x: 0.859375, y: 0.109375 },\n  { x: 0.859375, y: 0.109375 },\n  { x: 0.890625, y: 0.109375 },\n  { x: 0.890625, y: 0.109375 },\n  { x: 0.921875, y: 0.109375 },\n  { x: 0.921875, y: 0.109375 },\n  { x: 0.953125, y: 0.109375 },\n  { x: 0.953125, y: 0.109375 },\n  { x: 0.984375, y: 0.109375 },\n  { x: 0.984375, y: 0.109375 },\n  { x: 0.015625, y: 0.140625 },\n  { x: 0.015625, y: 0.140625 },\n  { x: 0.046875, y: 0.140625 },\n  { x: 0.046875, y: 0.140625 },\n  { x: 0.078125, y: 0.140625 },\n  { x: 0.078125, y: 0.140625 },\n  { x: 0.109375, y: 0.140625 },\n  { x: 0.109375, y: 0.140625 },\n  { x: 0.140625, y: 0.140625 },\n  { x: 0.140625, y: 0.140625 },\n  { x: 0.171875, y: 0.140625 },\n  { x: 0.171875, y: 0.140625 },\n  { x: 0.203125, y: 0.140625 },\n  { x: 0.203125, y: 0.140625 },\n  { x: 0.234375, y: 0.140625 },\n  { x: 0.234375, y: 0.140625 },\n  { x: 0.265625, y: 0.140625 },\n  { x: 0.265625, y: 0.140625 },\n  { x: 0.296875, y: 0.140625 },\n  { x: 0.296875, y: 0.140625 },\n  { x: 0.328125, y: 0.140625 },\n  { x: 0.328125, y: 0.140625 },\n  { x: 0.359375, y: 0.140625 },\n  { x: 0.359375, y: 0.140625 },\n  { x: 0.390625, y: 0.140625 },\n  { x: 0.390625, y: 0.140625 },\n  { x: 0.421875, y: 0.140625 },\n  { x: 0.421875, y: 0.140625 },\n  { x: 0.453125, y: 0.140625 },\n  { x: 0.453125, y: 0.140625 },\n  { x: 0.484375, y: 0.140625 },\n  { x: 0.484375, y: 0.140625 },\n  { x: 0.515625, y: 0.140625 },\n  { x: 0.515625, y: 0.140625 },\n  { x: 0.546875, y: 0.140625 },\n  { x: 0.546875, y: 0.140625 },\n  { x: 0.578125, y: 0.140625 },\n  { x: 0.578125, y: 0.140625 },\n  { x: 0.609375, y: 0.140625 },\n  { x: 0.609375, y: 0.140625 },\n  { x: 0.640625, y: 0.140625 },\n  { x: 0.640625, y: 0.140625 },\n  { x: 0.671875, y: 0.140625 },\n  { x: 0.671875, y: 0.140625 },\n  { x: 0.703125, y: 0.140625 },\n  { x: 0.703125, y: 0.140625 },\n  { x: 0.734375, y: 0.140625 },\n  { x: 0.734375, y: 0.140625 },\n  { x: 0.765625, y: 0.140625 },\n  { x: 0.765625, y: 0.140625 },\n  { x: 0.796875, y: 0.140625 },\n  { x: 0.796875, y: 0.140625 },\n  { x: 0.828125, y: 0.140625 },\n  { x: 0.828125, y: 0.140625 },\n  { x: 0.859375, y: 0.140625 },\n  { x: 0.859375, y: 0.140625 },\n  { x: 0.890625, y: 0.140625 },\n  { x: 0.890625, y: 0.140625 },\n  { x: 0.921875, y: 0.140625 },\n  { x: 0.921875, y: 0.140625 },\n  { x: 0.953125, y: 0.140625 },\n  { x: 0.953125, y: 0.140625 },\n  { x: 0.984375, y: 0.140625 },\n  { x: 0.984375, y: 0.140625 },\n  { x: 0.015625, y: 0.171875 },\n  { x: 0.015625, y: 0.171875 },\n  { x: 0.046875, y: 0.171875 },\n  { x: 0.046875, y: 0.171875 },\n  { x: 0.078125, y: 0.171875 },\n  { x: 0.078125, y: 0.171875 },\n  { x: 0.109375, y: 0.171875 },\n  { x: 0.109375, y: 0.171875 },\n  { x: 0.140625, y: 0.171875 },\n  { x: 0.140625, y: 0.171875 },\n  { x: 0.171875, y: 0.171875 },\n  { x: 0.171875, y: 0.171875 },\n  { x: 0.203125, y: 0.171875 },\n  { x: 0.203125, y: 0.171875 },\n  { x: 0.234375, y: 0.171875 },\n  { x: 0.234375, y: 0.171875 },\n  { x: 0.265625, y: 0.171875 },\n  { x: 0.265625, y: 0.171875 },\n  { x: 0.296875, y: 0.171875 },\n  { x: 0.296875, y: 0.171875 },\n  { x: 0.328125, y: 0.171875 },\n  { x: 0.328125, y: 0.171875 },\n  { x: 0.359375, y: 0.171875 },\n  { x: 0.359375, y: 0.171875 },\n  { x: 0.390625, y: 0.171875 },\n  { x: 0.390625, y: 0.171875 },\n  { x: 0.421875, y: 0.171875 },\n  { x: 0.421875, y: 0.171875 },\n  { x: 0.453125, y: 0.171875 },\n  { x: 0.453125, y: 0.171875 },\n  { x: 0.484375, y: 0.171875 },\n  { x: 0.484375, y: 0.171875 },\n  { x: 0.515625, y: 0.171875 },\n  { x: 0.515625, y: 0.171875 },\n  { x: 0.546875, y: 0.171875 },\n  { x: 0.546875, y: 0.171875 },\n  { x: 0.578125, y: 0.171875 },\n  { x: 0.578125, y: 0.171875 },\n  { x: 0.609375, y: 0.171875 },\n  { x: 0.609375, y: 0.171875 },\n  { x: 0.640625, y: 0.171875 },\n  { x: 0.640625, y: 0.171875 },\n  { x: 0.671875, y: 0.171875 },\n  { x: 0.671875, y: 0.171875 },\n  { x: 0.703125, y: 0.171875 },\n  { x: 0.703125, y: 0.171875 },\n  { x: 0.734375, y: 0.171875 },\n  { x: 0.734375, y: 0.171875 },\n  { x: 0.765625, y: 0.171875 },\n  { x: 0.765625, y: 0.171875 },\n  { x: 0.796875, y: 0.171875 },\n  { x: 0.796875, y: 0.171875 },\n  { x: 0.828125, y: 0.171875 },\n  { x: 0.828125, y: 0.171875 },\n  { x: 0.859375, y: 0.171875 },\n  { x: 0.859375, y: 0.171875 },\n  { x: 0.890625, y: 0.171875 },\n  { x: 0.890625, y: 0.171875 },\n  { x: 0.921875, y: 0.171875 },\n  { x: 0.921875, y: 0.171875 },\n  { x: 0.953125, y: 0.171875 },\n  { x: 0.953125, y: 0.171875 },\n  { x: 0.984375, y: 0.171875 },\n  { x: 0.984375, y: 0.171875 },\n  { x: 0.015625, y: 0.203125 },\n  { x: 0.015625, y: 0.203125 },\n  { x: 0.046875, y: 0.203125 },\n  { x: 0.046875, y: 0.203125 },\n  { x: 0.078125, y: 0.203125 },\n  { x: 0.078125, y: 0.203125 },\n  { x: 0.109375, y: 0.203125 },\n  { x: 0.109375, y: 0.203125 },\n  { x: 0.140625, y: 0.203125 },\n  { x: 0.140625, y: 0.203125 },\n  { x: 0.171875, y: 0.203125 },\n  { x: 0.171875, y: 0.203125 },\n  { x: 0.203125, y: 0.203125 },\n  { x: 0.203125, y: 0.203125 },\n  { x: 0.234375, y: 0.203125 },\n  { x: 0.234375, y: 0.203125 },\n  { x: 0.265625, y: 0.203125 },\n  { x: 0.265625, y: 0.203125 },\n  { x: 0.296875, y: 0.203125 },\n  { x: 0.296875, y: 0.203125 },\n  { x: 0.328125, y: 0.203125 },\n  { x: 0.328125, y: 0.203125 },\n  { x: 0.359375, y: 0.203125 },\n  { x: 0.359375, y: 0.203125 },\n  { x: 0.390625, y: 0.203125 },\n  { x: 0.390625, y: 0.203125 },\n  { x: 0.421875, y: 0.203125 },\n  { x: 0.421875, y: 0.203125 },\n  { x: 0.453125, y: 0.203125 },\n  { x: 0.453125, y: 0.203125 },\n  { x: 0.484375, y: 0.203125 },\n  { x: 0.484375, y: 0.203125 },\n  { x: 0.515625, y: 0.203125 },\n  { x: 0.515625, y: 0.203125 },\n  { x: 0.546875, y: 0.203125 },\n  { x: 0.546875, y: 0.203125 },\n  { x: 0.578125, y: 0.203125 },\n  { x: 0.578125, y: 0.203125 },\n  { x: 0.609375, y: 0.203125 },\n  { x: 0.609375, y: 0.203125 },\n  { x: 0.640625, y: 0.203125 },\n  { x: 0.640625, y: 0.203125 },\n  { x: 0.671875, y: 0.203125 },\n  { x: 0.671875, y: 0.203125 },\n  { x: 0.703125, y: 0.203125 },\n  { x: 0.703125, y: 0.203125 },\n  { x: 0.734375, y: 0.203125 },\n  { x: 0.734375, y: 0.203125 },\n  { x: 0.765625, y: 0.203125 },\n  { x: 0.765625, y: 0.203125 },\n  { x: 0.796875, y: 0.203125 },\n  { x: 0.796875, y: 0.203125 },\n  { x: 0.828125, y: 0.203125 },\n  { x: 0.828125, y: 0.203125 },\n  { x: 0.859375, y: 0.203125 },\n  { x: 0.859375, y: 0.203125 },\n  { x: 0.890625, y: 0.203125 },\n  { x: 0.890625, y: 0.203125 },\n  { x: 0.921875, y: 0.203125 },\n  { x: 0.921875, y: 0.203125 },\n  { x: 0.953125, y: 0.203125 },\n  { x: 0.953125, y: 0.203125 },\n  { x: 0.984375, y: 0.203125 },\n  { x: 0.984375, y: 0.203125 },\n  { x: 0.015625, y: 0.234375 },\n  { x: 0.015625, y: 0.234375 },\n  { x: 0.046875, y: 0.234375 },\n  { x: 0.046875, y: 0.234375 },\n  { x: 0.078125, y: 0.234375 },\n  { x: 0.078125, y: 0.234375 },\n  { x: 0.109375, y: 0.234375 },\n  { x: 0.109375, y: 0.234375 },\n  { x: 0.140625, y: 0.234375 },\n  { x: 0.140625, y: 0.234375 },\n  { x: 0.171875, y: 0.234375 },\n  { x: 0.171875, y: 0.234375 },\n  { x: 0.203125, y: 0.234375 },\n  { x: 0.203125, y: 0.234375 },\n  { x: 0.234375, y: 0.234375 },\n  { x: 0.234375, y: 0.234375 },\n  { x: 0.265625, y: 0.234375 },\n  { x: 0.265625, y: 0.234375 },\n  { x: 0.296875, y: 0.234375 },\n  { x: 0.296875, y: 0.234375 },\n  { x: 0.328125, y: 0.234375 },\n  { x: 0.328125, y: 0.234375 },\n  { x: 0.359375, y: 0.234375 },\n  { x: 0.359375, y: 0.234375 },\n  { x: 0.390625, y: 0.234375 },\n  { x: 0.390625, y: 0.234375 },\n  { x: 0.421875, y: 0.234375 },\n  { x: 0.421875, y: 0.234375 },\n  { x: 0.453125, y: 0.234375 },\n  { x: 0.453125, y: 0.234375 },\n  { x: 0.484375, y: 0.234375 },\n  { x: 0.484375, y: 0.234375 },\n  { x: 0.515625, y: 0.234375 },\n  { x: 0.515625, y: 0.234375 },\n  { x: 0.546875, y: 0.234375 },\n  { x: 0.546875, y: 0.234375 },\n  { x: 0.578125, y: 0.234375 },\n  { x: 0.578125, y: 0.234375 },\n  { x: 0.609375, y: 0.234375 },\n  { x: 0.609375, y: 0.234375 },\n  { x: 0.640625, y: 0.234375 },\n  { x: 0.640625, y: 0.234375 },\n  { x: 0.671875, y: 0.234375 },\n  { x: 0.671875, y: 0.234375 },\n  { x: 0.703125, y: 0.234375 },\n  { x: 0.703125, y: 0.234375 },\n  { x: 0.734375, y: 0.234375 },\n  { x: 0.734375, y: 0.234375 },\n  { x: 0.765625, y: 0.234375 },\n  { x: 0.765625, y: 0.234375 },\n  { x: 0.796875, y: 0.234375 },\n  { x: 0.796875, y: 0.234375 },\n  { x: 0.828125, y: 0.234375 },\n  { x: 0.828125, y: 0.234375 },\n  { x: 0.859375, y: 0.234375 },\n  { x: 0.859375, y: 0.234375 },\n  { x: 0.890625, y: 0.234375 },\n  { x: 0.890625, y: 0.234375 },\n  { x: 0.921875, y: 0.234375 },\n  { x: 0.921875, y: 0.234375 },\n  { x: 0.953125, y: 0.234375 },\n  { x: 0.953125, y: 0.234375 },\n  { x: 0.984375, y: 0.234375 },\n  { x: 0.984375, y: 0.234375 },\n  { x: 0.015625, y: 0.265625 },\n  { x: 0.015625, y: 0.265625 },\n  { x: 0.046875, y: 0.265625 },\n  { x: 0.046875, y: 0.265625 },\n  { x: 0.078125, y: 0.265625 },\n  { x: 0.078125, y: 0.265625 },\n  { x: 0.109375, y: 0.265625 },\n  { x: 0.109375, y: 0.265625 },\n  { x: 0.140625, y: 0.265625 },\n  { x: 0.140625, y: 0.265625 },\n  { x: 0.171875, y: 0.265625 },\n  { x: 0.171875, y: 0.265625 },\n  { x: 0.203125, y: 0.265625 },\n  { x: 0.203125, y: 0.265625 },\n  { x: 0.234375, y: 0.265625 },\n  { x: 0.234375, y: 0.265625 },\n  { x: 0.265625, y: 0.265625 },\n  { x: 0.265625, y: 0.265625 },\n  { x: 0.296875, y: 0.265625 },\n  { x: 0.296875, y: 0.265625 },\n  { x: 0.328125, y: 0.265625 },\n  { x: 0.328125, y: 0.265625 },\n  { x: 0.359375, y: 0.265625 },\n  { x: 0.359375, y: 0.265625 },\n  { x: 0.390625, y: 0.265625 },\n  { x: 0.390625, y: 0.265625 },\n  { x: 0.421875, y: 0.265625 },\n  { x: 0.421875, y: 0.265625 },\n  { x: 0.453125, y: 0.265625 },\n  { x: 0.453125, y: 0.265625 },\n  { x: 0.484375, y: 0.265625 },\n  { x: 0.484375, y: 0.265625 },\n  { x: 0.515625, y: 0.265625 },\n  { x: 0.515625, y: 0.265625 },\n  { x: 0.546875, y: 0.265625 },\n  { x: 0.546875, y: 0.265625 },\n  { x: 0.578125, y: 0.265625 },\n  { x: 0.578125, y: 0.265625 },\n  { x: 0.609375, y: 0.265625 },\n  { x: 0.609375, y: 0.265625 },\n  { x: 0.640625, y: 0.265625 },\n  { x: 0.640625, y: 0.265625 },\n  { x: 0.671875, y: 0.265625 },\n  { x: 0.671875, y: 0.265625 },\n  { x: 0.703125, y: 0.265625 },\n  { x: 0.703125, y: 0.265625 },\n  { x: 0.734375, y: 0.265625 },\n  { x: 0.734375, y: 0.265625 },\n  { x: 0.765625, y: 0.265625 },\n  { x: 0.765625, y: 0.265625 },\n  { x: 0.796875, y: 0.265625 },\n  { x: 0.796875, y: 0.265625 },\n  { x: 0.828125, y: 0.265625 },\n  { x: 0.828125, y: 0.265625 },\n  { x: 0.859375, y: 0.265625 },\n  { x: 0.859375, y: 0.265625 },\n  { x: 0.890625, y: 0.265625 },\n  { x: 0.890625, y: 0.265625 },\n  { x: 0.921875, y: 0.265625 },\n  { x: 0.921875, y: 0.265625 },\n  { x: 0.953125, y: 0.265625 },\n  { x: 0.953125, y: 0.265625 },\n  { x: 0.984375, y: 0.265625 },\n  { x: 0.984375, y: 0.265625 },\n  { x: 0.015625, y: 0.296875 },\n  { x: 0.015625, y: 0.296875 },\n  { x: 0.046875, y: 0.296875 },\n  { x: 0.046875, y: 0.296875 },\n  { x: 0.078125, y: 0.296875 },\n  { x: 0.078125, y: 0.296875 },\n  { x: 0.109375, y: 0.296875 },\n  { x: 0.109375, y: 0.296875 },\n  { x: 0.140625, y: 0.296875 },\n  { x: 0.140625, y: 0.296875 },\n  { x: 0.171875, y: 0.296875 },\n  { x: 0.171875, y: 0.296875 },\n  { x: 0.203125, y: 0.296875 },\n  { x: 0.203125, y: 0.296875 },\n  { x: 0.234375, y: 0.296875 },\n  { x: 0.234375, y: 0.296875 },\n  { x: 0.265625, y: 0.296875 },\n  { x: 0.265625, y: 0.296875 },\n  { x: 0.296875, y: 0.296875 },\n  { x: 0.296875, y: 0.296875 },\n  { x: 0.328125, y: 0.296875 },\n  { x: 0.328125, y: 0.296875 },\n  { x: 0.359375, y: 0.296875 },\n  { x: 0.359375, y: 0.296875 },\n  { x: 0.390625, y: 0.296875 },\n  { x: 0.390625, y: 0.296875 },\n  { x: 0.421875, y: 0.296875 },\n  { x: 0.421875, y: 0.296875 },\n  { x: 0.453125, y: 0.296875 },\n  { x: 0.453125, y: 0.296875 },\n  { x: 0.484375, y: 0.296875 },\n  { x: 0.484375, y: 0.296875 },\n  { x: 0.515625, y: 0.296875 },\n  { x: 0.515625, y: 0.296875 },\n  { x: 0.546875, y: 0.296875 },\n  { x: 0.546875, y: 0.296875 },\n  { x: 0.578125, y: 0.296875 },\n  { x: 0.578125, y: 0.296875 },\n  { x: 0.609375, y: 0.296875 },\n  { x: 0.609375, y: 0.296875 },\n  { x: 0.640625, y: 0.296875 },\n  { x: 0.640625, y: 0.296875 },\n  { x: 0.671875, y: 0.296875 },\n  { x: 0.671875, y: 0.296875 },\n  { x: 0.703125, y: 0.296875 },\n  { x: 0.703125, y: 0.296875 },\n  { x: 0.734375, y: 0.296875 },\n  { x: 0.734375, y: 0.296875 },\n  { x: 0.765625, y: 0.296875 },\n  { x: 0.765625, y: 0.296875 },\n  { x: 0.796875, y: 0.296875 },\n  { x: 0.796875, y: 0.296875 },\n  { x: 0.828125, y: 0.296875 },\n  { x: 0.828125, y: 0.296875 },\n  { x: 0.859375, y: 0.296875 },\n  { x: 0.859375, y: 0.296875 },\n  { x: 0.890625, y: 0.296875 },\n  { x: 0.890625, y: 0.296875 },\n  { x: 0.921875, y: 0.296875 },\n  { x: 0.921875, y: 0.296875 },\n  { x: 0.953125, y: 0.296875 },\n  { x: 0.953125, y: 0.296875 },\n  { x: 0.984375, y: 0.296875 },\n  { x: 0.984375, y: 0.296875 },\n  { x: 0.015625, y: 0.328125 },\n  { x: 0.015625, y: 0.328125 },\n  { x: 0.046875, y: 0.328125 },\n  { x: 0.046875, y: 0.328125 },\n  { x: 0.078125, y: 0.328125 },\n  { x: 0.078125, y: 0.328125 },\n  { x: 0.109375, y: 0.328125 },\n  { x: 0.109375, y: 0.328125 },\n  { x: 0.140625, y: 0.328125 },\n  { x: 0.140625, y: 0.328125 },\n  { x: 0.171875, y: 0.328125 },\n  { x: 0.171875, y: 0.328125 },\n  { x: 0.203125, y: 0.328125 },\n  { x: 0.203125, y: 0.328125 },\n  { x: 0.234375, y: 0.328125 },\n  { x: 0.234375, y: 0.328125 },\n  { x: 0.265625, y: 0.328125 },\n  { x: 0.265625, y: 0.328125 },\n  { x: 0.296875, y: 0.328125 },\n  { x: 0.296875, y: 0.328125 },\n  { x: 0.328125, y: 0.328125 },\n  { x: 0.328125, y: 0.328125 },\n  { x: 0.359375, y: 0.328125 },\n  { x: 0.359375, y: 0.328125 },\n  { x: 0.390625, y: 0.328125 },\n  { x: 0.390625, y: 0.328125 },\n  { x: 0.421875, y: 0.328125 },\n  { x: 0.421875, y: 0.328125 },\n  { x: 0.453125, y: 0.328125 },\n  { x: 0.453125, y: 0.328125 },\n  { x: 0.484375, y: 0.328125 },\n  { x: 0.484375, y: 0.328125 },\n  { x: 0.515625, y: 0.328125 },\n  { x: 0.515625, y: 0.328125 },\n  { x: 0.546875, y: 0.328125 },\n  { x: 0.546875, y: 0.328125 },\n  { x: 0.578125, y: 0.328125 },\n  { x: 0.578125, y: 0.328125 },\n  { x: 0.609375, y: 0.328125 },\n  { x: 0.609375, y: 0.328125 },\n  { x: 0.640625, y: 0.328125 },\n  { x: 0.640625, y: 0.328125 },\n  { x: 0.671875, y: 0.328125 },\n  { x: 0.671875, y: 0.328125 },\n  { x: 0.703125, y: 0.328125 },\n  { x: 0.703125, y: 0.328125 },\n  { x: 0.734375, y: 0.328125 },\n  { x: 0.734375, y: 0.328125 },\n  { x: 0.765625, y: 0.328125 },\n  { x: 0.765625, y: 0.328125 },\n  { x: 0.796875, y: 0.328125 },\n  { x: 0.796875, y: 0.328125 },\n  { x: 0.828125, y: 0.328125 },\n  { x: 0.828125, y: 0.328125 },\n  { x: 0.859375, y: 0.328125 },\n  { x: 0.859375, y: 0.328125 },\n  { x: 0.890625, y: 0.328125 },\n  { x: 0.890625, y: 0.328125 },\n  { x: 0.921875, y: 0.328125 },\n  { x: 0.921875, y: 0.328125 },\n  { x: 0.953125, y: 0.328125 },\n  { x: 0.953125, y: 0.328125 },\n  { x: 0.984375, y: 0.328125 },\n  { x: 0.984375, y: 0.328125 },\n  { x: 0.015625, y: 0.359375 },\n  { x: 0.015625, y: 0.359375 },\n  { x: 0.046875, y: 0.359375 },\n  { x: 0.046875, y: 0.359375 },\n  { x: 0.078125, y: 0.359375 },\n  { x: 0.078125, y: 0.359375 },\n  { x: 0.109375, y: 0.359375 },\n  { x: 0.109375, y: 0.359375 },\n  { x: 0.140625, y: 0.359375 },\n  { x: 0.140625, y: 0.359375 },\n  { x: 0.171875, y: 0.359375 },\n  { x: 0.171875, y: 0.359375 },\n  { x: 0.203125, y: 0.359375 },\n  { x: 0.203125, y: 0.359375 },\n  { x: 0.234375, y: 0.359375 },\n  { x: 0.234375, y: 0.359375 },\n  { x: 0.265625, y: 0.359375 },\n  { x: 0.265625, y: 0.359375 },\n  { x: 0.296875, y: 0.359375 },\n  { x: 0.296875, y: 0.359375 },\n  { x: 0.328125, y: 0.359375 },\n  { x: 0.328125, y: 0.359375 },\n  { x: 0.359375, y: 0.359375 },\n  { x: 0.359375, y: 0.359375 },\n  { x: 0.390625, y: 0.359375 },\n  { x: 0.390625, y: 0.359375 },\n  { x: 0.421875, y: 0.359375 },\n  { x: 0.421875, y: 0.359375 },\n  { x: 0.453125, y: 0.359375 },\n  { x: 0.453125, y: 0.359375 },\n  { x: 0.484375, y: 0.359375 },\n  { x: 0.484375, y: 0.359375 },\n  { x: 0.515625, y: 0.359375 },\n  { x: 0.515625, y: 0.359375 },\n  { x: 0.546875, y: 0.359375 },\n  { x: 0.546875, y: 0.359375 },\n  { x: 0.578125, y: 0.359375 },\n  { x: 0.578125, y: 0.359375 },\n  { x: 0.609375, y: 0.359375 },\n  { x: 0.609375, y: 0.359375 },\n  { x: 0.640625, y: 0.359375 },\n  { x: 0.640625, y: 0.359375 },\n  { x: 0.671875, y: 0.359375 },\n  { x: 0.671875, y: 0.359375 },\n  { x: 0.703125, y: 0.359375 },\n  { x: 0.703125, y: 0.359375 },\n  { x: 0.734375, y: 0.359375 },\n  { x: 0.734375, y: 0.359375 },\n  { x: 0.765625, y: 0.359375 },\n  { x: 0.765625, y: 0.359375 },\n  { x: 0.796875, y: 0.359375 },\n  { x: 0.796875, y: 0.359375 },\n  { x: 0.828125, y: 0.359375 },\n  { x: 0.828125, y: 0.359375 },\n  { x: 0.859375, y: 0.359375 },\n  { x: 0.859375, y: 0.359375 },\n  { x: 0.890625, y: 0.359375 },\n  { x: 0.890625, y: 0.359375 },\n  { x: 0.921875, y: 0.359375 },\n  { x: 0.921875, y: 0.359375 },\n  { x: 0.953125, y: 0.359375 },\n  { x: 0.953125, y: 0.359375 },\n  { x: 0.984375, y: 0.359375 },\n  { x: 0.984375, y: 0.359375 },\n  { x: 0.015625, y: 0.390625 },\n  { x: 0.015625, y: 0.390625 },\n  { x: 0.046875, y: 0.390625 },\n  { x: 0.046875, y: 0.390625 },\n  { x: 0.078125, y: 0.390625 },\n  { x: 0.078125, y: 0.390625 },\n  { x: 0.109375, y: 0.390625 },\n  { x: 0.109375, y: 0.390625 },\n  { x: 0.140625, y: 0.390625 },\n  { x: 0.140625, y: 0.390625 },\n  { x: 0.171875, y: 0.390625 },\n  { x: 0.171875, y: 0.390625 },\n  { x: 0.203125, y: 0.390625 },\n  { x: 0.203125, y: 0.390625 },\n  { x: 0.234375, y: 0.390625 },\n  { x: 0.234375, y: 0.390625 },\n  { x: 0.265625, y: 0.390625 },\n  { x: 0.265625, y: 0.390625 },\n  { x: 0.296875, y: 0.390625 },\n  { x: 0.296875, y: 0.390625 },\n  { x: 0.328125, y: 0.390625 },\n  { x: 0.328125, y: 0.390625 },\n  { x: 0.359375, y: 0.390625 },\n  { x: 0.359375, y: 0.390625 },\n  { x: 0.390625, y: 0.390625 },\n  { x: 0.390625, y: 0.390625 },\n  { x: 0.421875, y: 0.390625 },\n  { x: 0.421875, y: 0.390625 },\n  { x: 0.453125, y: 0.390625 },\n  { x: 0.453125, y: 0.390625 },\n  { x: 0.484375, y: 0.390625 },\n  { x: 0.484375, y: 0.390625 },\n  { x: 0.515625, y: 0.390625 },\n  { x: 0.515625, y: 0.390625 },\n  { x: 0.546875, y: 0.390625 },\n  { x: 0.546875, y: 0.390625 },\n  { x: 0.578125, y: 0.390625 },\n  { x: 0.578125, y: 0.390625 },\n  { x: 0.609375, y: 0.390625 },\n  { x: 0.609375, y: 0.390625 },\n  { x: 0.640625, y: 0.390625 },\n  { x: 0.640625, y: 0.390625 },\n  { x: 0.671875, y: 0.390625 },\n  { x: 0.671875, y: 0.390625 },\n  { x: 0.703125, y: 0.390625 },\n  { x: 0.703125, y: 0.390625 },\n  { x: 0.734375, y: 0.390625 },\n  { x: 0.734375, y: 0.390625 },\n  { x: 0.765625, y: 0.390625 },\n  { x: 0.765625, y: 0.390625 },\n  { x: 0.796875, y: 0.390625 },\n  { x: 0.796875, y: 0.390625 },\n  { x: 0.828125, y: 0.390625 },\n  { x: 0.828125, y: 0.390625 },\n  { x: 0.859375, y: 0.390625 },\n  { x: 0.859375, y: 0.390625 },\n  { x: 0.890625, y: 0.390625 },\n  { x: 0.890625, y: 0.390625 },\n  { x: 0.921875, y: 0.390625 },\n  { x: 0.921875, y: 0.390625 },\n  { x: 0.953125, y: 0.390625 },\n  { x: 0.953125, y: 0.390625 },\n  { x: 0.984375, y: 0.390625 },\n  { x: 0.984375, y: 0.390625 },\n  { x: 0.015625, y: 0.421875 },\n  { x: 0.015625, y: 0.421875 },\n  { x: 0.046875, y: 0.421875 },\n  { x: 0.046875, y: 0.421875 },\n  { x: 0.078125, y: 0.421875 },\n  { x: 0.078125, y: 0.421875 },\n  { x: 0.109375, y: 0.421875 },\n  { x: 0.109375, y: 0.421875 },\n  { x: 0.140625, y: 0.421875 },\n  { x: 0.140625, y: 0.421875 },\n  { x: 0.171875, y: 0.421875 },\n  { x: 0.171875, y: 0.421875 },\n  { x: 0.203125, y: 0.421875 },\n  { x: 0.203125, y: 0.421875 },\n  { x: 0.234375, y: 0.421875 },\n  { x: 0.234375, y: 0.421875 },\n  { x: 0.265625, y: 0.421875 },\n  { x: 0.265625, y: 0.421875 },\n  { x: 0.296875, y: 0.421875 },\n  { x: 0.296875, y: 0.421875 },\n  { x: 0.328125, y: 0.421875 },\n  { x: 0.328125, y: 0.421875 },\n  { x: 0.359375, y: 0.421875 },\n  { x: 0.359375, y: 0.421875 },\n  { x: 0.390625, y: 0.421875 },\n  { x: 0.390625, y: 0.421875 },\n  { x: 0.421875, y: 0.421875 },\n  { x: 0.421875, y: 0.421875 },\n  { x: 0.453125, y: 0.421875 },\n  { x: 0.453125, y: 0.421875 },\n  { x: 0.484375, y: 0.421875 },\n  { x: 0.484375, y: 0.421875 },\n  { x: 0.515625, y: 0.421875 },\n  { x: 0.515625, y: 0.421875 },\n  { x: 0.546875, y: 0.421875 },\n  { x: 0.546875, y: 0.421875 },\n  { x: 0.578125, y: 0.421875 },\n  { x: 0.578125, y: 0.421875 },\n  { x: 0.609375, y: 0.421875 },\n  { x: 0.609375, y: 0.421875 },\n  { x: 0.640625, y: 0.421875 },\n  { x: 0.640625, y: 0.421875 },\n  { x: 0.671875, y: 0.421875 },\n  { x: 0.671875, y: 0.421875 },\n  { x: 0.703125, y: 0.421875 },\n  { x: 0.703125, y: 0.421875 },\n  { x: 0.734375, y: 0.421875 },\n  { x: 0.734375, y: 0.421875 },\n  { x: 0.765625, y: 0.421875 },\n  { x: 0.765625, y: 0.421875 },\n  { x: 0.796875, y: 0.421875 },\n  { x: 0.796875, y: 0.421875 },\n  { x: 0.828125, y: 0.421875 },\n  { x: 0.828125, y: 0.421875 },\n  { x: 0.859375, y: 0.421875 },\n  { x: 0.859375, y: 0.421875 },\n  { x: 0.890625, y: 0.421875 },\n  { x: 0.890625, y: 0.421875 },\n  { x: 0.921875, y: 0.421875 },\n  { x: 0.921875, y: 0.421875 },\n  { x: 0.953125, y: 0.421875 },\n  { x: 0.953125, y: 0.421875 },\n  { x: 0.984375, y: 0.421875 },\n  { x: 0.984375, y: 0.421875 },\n  { x: 0.015625, y: 0.453125 },\n  { x: 0.015625, y: 0.453125 },\n  { x: 0.046875, y: 0.453125 },\n  { x: 0.046875, y: 0.453125 },\n  { x: 0.078125, y: 0.453125 },\n  { x: 0.078125, y: 0.453125 },\n  { x: 0.109375, y: 0.453125 },\n  { x: 0.109375, y: 0.453125 },\n  { x: 0.140625, y: 0.453125 },\n  { x: 0.140625, y: 0.453125 },\n  { x: 0.171875, y: 0.453125 },\n  { x: 0.171875, y: 0.453125 },\n  { x: 0.203125, y: 0.453125 },\n  { x: 0.203125, y: 0.453125 },\n  { x: 0.234375, y: 0.453125 },\n  { x: 0.234375, y: 0.453125 },\n  { x: 0.265625, y: 0.453125 },\n  { x: 0.265625, y: 0.453125 },\n  { x: 0.296875, y: 0.453125 },\n  { x: 0.296875, y: 0.453125 },\n  { x: 0.328125, y: 0.453125 },\n  { x: 0.328125, y: 0.453125 },\n  { x: 0.359375, y: 0.453125 },\n  { x: 0.359375, y: 0.453125 },\n  { x: 0.390625, y: 0.453125 },\n  { x: 0.390625, y: 0.453125 },\n  { x: 0.421875, y: 0.453125 },\n  { x: 0.421875, y: 0.453125 },\n  { x: 0.453125, y: 0.453125 },\n  { x: 0.453125, y: 0.453125 },\n  { x: 0.484375, y: 0.453125 },\n  { x: 0.484375, y: 0.453125 },\n  { x: 0.515625, y: 0.453125 },\n  { x: 0.515625, y: 0.453125 },\n  { x: 0.546875, y: 0.453125 },\n  { x: 0.546875, y: 0.453125 },\n  { x: 0.578125, y: 0.453125 },\n  { x: 0.578125, y: 0.453125 },\n  { x: 0.609375, y: 0.453125 },\n  { x: 0.609375, y: 0.453125 },\n  { x: 0.640625, y: 0.453125 },\n  { x: 0.640625, y: 0.453125 },\n  { x: 0.671875, y: 0.453125 },\n  { x: 0.671875, y: 0.453125 },\n  { x: 0.703125, y: 0.453125 },\n  { x: 0.703125, y: 0.453125 },\n  { x: 0.734375, y: 0.453125 },\n  { x: 0.734375, y: 0.453125 },\n  { x: 0.765625, y: 0.453125 },\n  { x: 0.765625, y: 0.453125 },\n  { x: 0.796875, y: 0.453125 },\n  { x: 0.796875, y: 0.453125 },\n  { x: 0.828125, y: 0.453125 },\n  { x: 0.828125, y: 0.453125 },\n  { x: 0.859375, y: 0.453125 },\n  { x: 0.859375, y: 0.453125 },\n  { x: 0.890625, y: 0.453125 },\n  { x: 0.890625, y: 0.453125 },\n  { x: 0.921875, y: 0.453125 },\n  { x: 0.921875, y: 0.453125 },\n  { x: 0.953125, y: 0.453125 },\n  { x: 0.953125, y: 0.453125 },\n  { x: 0.984375, y: 0.453125 },\n  { x: 0.984375, y: 0.453125 },\n  { x: 0.015625, y: 0.484375 },\n  { x: 0.015625, y: 0.484375 },\n  { x: 0.046875, y: 0.484375 },\n  { x: 0.046875, y: 0.484375 },\n  { x: 0.078125, y: 0.484375 },\n  { x: 0.078125, y: 0.484375 },\n  { x: 0.109375, y: 0.484375 },\n  { x: 0.109375, y: 0.484375 },\n  { x: 0.140625, y: 0.484375 },\n  { x: 0.140625, y: 0.484375 },\n  { x: 0.171875, y: 0.484375 },\n  { x: 0.171875, y: 0.484375 },\n  { x: 0.203125, y: 0.484375 },\n  { x: 0.203125, y: 0.484375 },\n  { x: 0.234375, y: 0.484375 },\n  { x: 0.234375, y: 0.484375 },\n  { x: 0.265625, y: 0.484375 },\n  { x: 0.265625, y: 0.484375 },\n  { x: 0.296875, y: 0.484375 },\n  { x: 0.296875, y: 0.484375 },\n  { x: 0.328125, y: 0.484375 },\n  { x: 0.328125, y: 0.484375 },\n  { x: 0.359375, y: 0.484375 },\n  { x: 0.359375, y: 0.484375 },\n  { x: 0.390625, y: 0.484375 },\n  { x: 0.390625, y: 0.484375 },\n  { x: 0.421875, y: 0.484375 },\n  { x: 0.421875, y: 0.484375 },\n  { x: 0.453125, y: 0.484375 },\n  { x: 0.453125, y: 0.484375 },\n  { x: 0.484375, y: 0.484375 },\n  { x: 0.484375, y: 0.484375 },\n  { x: 0.515625, y: 0.484375 },\n  { x: 0.515625, y: 0.484375 },\n  { x: 0.546875, y: 0.484375 },\n  { x: 0.546875, y: 0.484375 },\n  { x: 0.578125, y: 0.484375 },\n  { x: 0.578125, y: 0.484375 },\n  { x: 0.609375, y: 0.484375 },\n  { x: 0.609375, y: 0.484375 },\n  { x: 0.640625, y: 0.484375 },\n  { x: 0.640625, y: 0.484375 },\n  { x: 0.671875, y: 0.484375 },\n  { x: 0.671875, y: 0.484375 },\n  { x: 0.703125, y: 0.484375 },\n  { x: 0.703125, y: 0.484375 },\n  { x: 0.734375, y: 0.484375 },\n  { x: 0.734375, y: 0.484375 },\n  { x: 0.765625, y: 0.484375 },\n  { x: 0.765625, y: 0.484375 },\n  { x: 0.796875, y: 0.484375 },\n  { x: 0.796875, y: 0.484375 },\n  { x: 0.828125, y: 0.484375 },\n  { x: 0.828125, y: 0.484375 },\n  { x: 0.859375, y: 0.484375 },\n  { x: 0.859375, y: 0.484375 },\n  { x: 0.890625, y: 0.484375 },\n  { x: 0.890625, y: 0.484375 },\n  { x: 0.921875, y: 0.484375 },\n  { x: 0.921875, y: 0.484375 },\n  { x: 0.953125, y: 0.484375 },\n  { x: 0.953125, y: 0.484375 },\n  { x: 0.984375, y: 0.484375 },\n  { x: 0.984375, y: 0.484375 },\n  { x: 0.015625, y: 0.515625 },\n  { x: 0.015625, y: 0.515625 },\n  { x: 0.046875, y: 0.515625 },\n  { x: 0.046875, y: 0.515625 },\n  { x: 0.078125, y: 0.515625 },\n  { x: 0.078125, y: 0.515625 },\n  { x: 0.109375, y: 0.515625 },\n  { x: 0.109375, y: 0.515625 },\n  { x: 0.140625, y: 0.515625 },\n  { x: 0.140625, y: 0.515625 },\n  { x: 0.171875, y: 0.515625 },\n  { x: 0.171875, y: 0.515625 },\n  { x: 0.203125, y: 0.515625 },\n  { x: 0.203125, y: 0.515625 },\n  { x: 0.234375, y: 0.515625 },\n  { x: 0.234375, y: 0.515625 },\n  { x: 0.265625, y: 0.515625 },\n  { x: 0.265625, y: 0.515625 },\n  { x: 0.296875, y: 0.515625 },\n  { x: 0.296875, y: 0.515625 },\n  { x: 0.328125, y: 0.515625 },\n  { x: 0.328125, y: 0.515625 },\n  { x: 0.359375, y: 0.515625 },\n  { x: 0.359375, y: 0.515625 },\n  { x: 0.390625, y: 0.515625 },\n  { x: 0.390625, y: 0.515625 },\n  { x: 0.421875, y: 0.515625 },\n  { x: 0.421875, y: 0.515625 },\n  { x: 0.453125, y: 0.515625 },\n  { x: 0.453125, y: 0.515625 },\n  { x: 0.484375, y: 0.515625 },\n  { x: 0.484375, y: 0.515625 },\n  { x: 0.515625, y: 0.515625 },\n  { x: 0.515625, y: 0.515625 },\n  { x: 0.546875, y: 0.515625 },\n  { x: 0.546875, y: 0.515625 },\n  { x: 0.578125, y: 0.515625 },\n  { x: 0.578125, y: 0.515625 },\n  { x: 0.609375, y: 0.515625 },\n  { x: 0.609375, y: 0.515625 },\n  { x: 0.640625, y: 0.515625 },\n  { x: 0.640625, y: 0.515625 },\n  { x: 0.671875, y: 0.515625 },\n  { x: 0.671875, y: 0.515625 },\n  { x: 0.703125, y: 0.515625 },\n  { x: 0.703125, y: 0.515625 },\n  { x: 0.734375, y: 0.515625 },\n  { x: 0.734375, y: 0.515625 },\n  { x: 0.765625, y: 0.515625 },\n  { x: 0.765625, y: 0.515625 },\n  { x: 0.796875, y: 0.515625 },\n  { x: 0.796875, y: 0.515625 },\n  { x: 0.828125, y: 0.515625 },\n  { x: 0.828125, y: 0.515625 },\n  { x: 0.859375, y: 0.515625 },\n  { x: 0.859375, y: 0.515625 },\n  { x: 0.890625, y: 0.515625 },\n  { x: 0.890625, y: 0.515625 },\n  { x: 0.921875, y: 0.515625 },\n  { x: 0.921875, y: 0.515625 },\n  { x: 0.953125, y: 0.515625 },\n  { x: 0.953125, y: 0.515625 },\n  { x: 0.984375, y: 0.515625 },\n  { x: 0.984375, y: 0.515625 },\n  { x: 0.015625, y: 0.546875 },\n  { x: 0.015625, y: 0.546875 },\n  { x: 0.046875, y: 0.546875 },\n  { x: 0.046875, y: 0.546875 },\n  { x: 0.078125, y: 0.546875 },\n  { x: 0.078125, y: 0.546875 },\n  { x: 0.109375, y: 0.546875 },\n  { x: 0.109375, y: 0.546875 },\n  { x: 0.140625, y: 0.546875 },\n  { x: 0.140625, y: 0.546875 },\n  { x: 0.171875, y: 0.546875 },\n  { x: 0.171875, y: 0.546875 },\n  { x: 0.203125, y: 0.546875 },\n  { x: 0.203125, y: 0.546875 },\n  { x: 0.234375, y: 0.546875 },\n  { x: 0.234375, y: 0.546875 },\n  { x: 0.265625, y: 0.546875 },\n  { x: 0.265625, y: 0.546875 },\n  { x: 0.296875, y: 0.546875 },\n  { x: 0.296875, y: 0.546875 },\n  { x: 0.328125, y: 0.546875 },\n  { x: 0.328125, y: 0.546875 },\n  { x: 0.359375, y: 0.546875 },\n  { x: 0.359375, y: 0.546875 },\n  { x: 0.390625, y: 0.546875 },\n  { x: 0.390625, y: 0.546875 },\n  { x: 0.421875, y: 0.546875 },\n  { x: 0.421875, y: 0.546875 },\n  { x: 0.453125, y: 0.546875 },\n  { x: 0.453125, y: 0.546875 },\n  { x: 0.484375, y: 0.546875 },\n  { x: 0.484375, y: 0.546875 },\n  { x: 0.515625, y: 0.546875 },\n  { x: 0.515625, y: 0.546875 },\n  { x: 0.546875, y: 0.546875 },\n  { x: 0.546875, y: 0.546875 },\n  { x: 0.578125, y: 0.546875 },\n  { x: 0.578125, y: 0.546875 },\n  { x: 0.609375, y: 0.546875 },\n  { x: 0.609375, y: 0.546875 },\n  { x: 0.640625, y: 0.546875 },\n  { x: 0.640625, y: 0.546875 },\n  { x: 0.671875, y: 0.546875 },\n  { x: 0.671875, y: 0.546875 },\n  { x: 0.703125, y: 0.546875 },\n  { x: 0.703125, y: 0.546875 },\n  { x: 0.734375, y: 0.546875 },\n  { x: 0.734375, y: 0.546875 },\n  { x: 0.765625, y: 0.546875 },\n  { x: 0.765625, y: 0.546875 },\n  { x: 0.796875, y: 0.546875 },\n  { x: 0.796875, y: 0.546875 },\n  { x: 0.828125, y: 0.546875 },\n  { x: 0.828125, y: 0.546875 },\n  { x: 0.859375, y: 0.546875 },\n  { x: 0.859375, y: 0.546875 },\n  { x: 0.890625, y: 0.546875 },\n  { x: 0.890625, y: 0.546875 },\n  { x: 0.921875, y: 0.546875 },\n  { x: 0.921875, y: 0.546875 },\n  { x: 0.953125, y: 0.546875 },\n  { x: 0.953125, y: 0.546875 },\n  { x: 0.984375, y: 0.546875 },\n  { x: 0.984375, y: 0.546875 },\n  { x: 0.015625, y: 0.578125 },\n  { x: 0.015625, y: 0.578125 },\n  { x: 0.046875, y: 0.578125 },\n  { x: 0.046875, y: 0.578125 },\n  { x: 0.078125, y: 0.578125 },\n  { x: 0.078125, y: 0.578125 },\n  { x: 0.109375, y: 0.578125 },\n  { x: 0.109375, y: 0.578125 },\n  { x: 0.140625, y: 0.578125 },\n  { x: 0.140625, y: 0.578125 },\n  { x: 0.171875, y: 0.578125 },\n  { x: 0.171875, y: 0.578125 },\n  { x: 0.203125, y: 0.578125 },\n  { x: 0.203125, y: 0.578125 },\n  { x: 0.234375, y: 0.578125 },\n  { x: 0.234375, y: 0.578125 },\n  { x: 0.265625, y: 0.578125 },\n  { x: 0.265625, y: 0.578125 },\n  { x: 0.296875, y: 0.578125 },\n  { x: 0.296875, y: 0.578125 },\n  { x: 0.328125, y: 0.578125 },\n  { x: 0.328125, y: 0.578125 },\n  { x: 0.359375, y: 0.578125 },\n  { x: 0.359375, y: 0.578125 },\n  { x: 0.390625, y: 0.578125 },\n  { x: 0.390625, y: 0.578125 },\n  { x: 0.421875, y: 0.578125 },\n  { x: 0.421875, y: 0.578125 },\n  { x: 0.453125, y: 0.578125 },\n  { x: 0.453125, y: 0.578125 },\n  { x: 0.484375, y: 0.578125 },\n  { x: 0.484375, y: 0.578125 },\n  { x: 0.515625, y: 0.578125 },\n  { x: 0.515625, y: 0.578125 },\n  { x: 0.546875, y: 0.578125 },\n  { x: 0.546875, y: 0.578125 },\n  { x: 0.578125, y: 0.578125 },\n  { x: 0.578125, y: 0.578125 },\n  { x: 0.609375, y: 0.578125 },\n  { x: 0.609375, y: 0.578125 },\n  { x: 0.640625, y: 0.578125 },\n  { x: 0.640625, y: 0.578125 },\n  { x: 0.671875, y: 0.578125 },\n  { x: 0.671875, y: 0.578125 },\n  { x: 0.703125, y: 0.578125 },\n  { x: 0.703125, y: 0.578125 },\n  { x: 0.734375, y: 0.578125 },\n  { x: 0.734375, y: 0.578125 },\n  { x: 0.765625, y: 0.578125 },\n  { x: 0.765625, y: 0.578125 },\n  { x: 0.796875, y: 0.578125 },\n  { x: 0.796875, y: 0.578125 },\n  { x: 0.828125, y: 0.578125 },\n  { x: 0.828125, y: 0.578125 },\n  { x: 0.859375, y: 0.578125 },\n  { x: 0.859375, y: 0.578125 },\n  { x: 0.890625, y: 0.578125 },\n  { x: 0.890625, y: 0.578125 },\n  { x: 0.921875, y: 0.578125 },\n  { x: 0.921875, y: 0.578125 },\n  { x: 0.953125, y: 0.578125 },\n  { x: 0.953125, y: 0.578125 },\n  { x: 0.984375, y: 0.578125 },\n  { x: 0.984375, y: 0.578125 },\n  { x: 0.015625, y: 0.609375 },\n  { x: 0.015625, y: 0.609375 },\n  { x: 0.046875, y: 0.609375 },\n  { x: 0.046875, y: 0.609375 },\n  { x: 0.078125, y: 0.609375 },\n  { x: 0.078125, y: 0.609375 },\n  { x: 0.109375, y: 0.609375 },\n  { x: 0.109375, y: 0.609375 },\n  { x: 0.140625, y: 0.609375 },\n  { x: 0.140625, y: 0.609375 },\n  { x: 0.171875, y: 0.609375 },\n  { x: 0.171875, y: 0.609375 },\n  { x: 0.203125, y: 0.609375 },\n  { x: 0.203125, y: 0.609375 },\n  { x: 0.234375, y: 0.609375 },\n  { x: 0.234375, y: 0.609375 },\n  { x: 0.265625, y: 0.609375 },\n  { x: 0.265625, y: 0.609375 },\n  { x: 0.296875, y: 0.609375 },\n  { x: 0.296875, y: 0.609375 },\n  { x: 0.328125, y: 0.609375 },\n  { x: 0.328125, y: 0.609375 },\n  { x: 0.359375, y: 0.609375 },\n  { x: 0.359375, y: 0.609375 },\n  { x: 0.390625, y: 0.609375 },\n  { x: 0.390625, y: 0.609375 },\n  { x: 0.421875, y: 0.609375 },\n  { x: 0.421875, y: 0.609375 },\n  { x: 0.453125, y: 0.609375 },\n  { x: 0.453125, y: 0.609375 },\n  { x: 0.484375, y: 0.609375 },\n  { x: 0.484375, y: 0.609375 },\n  { x: 0.515625, y: 0.609375 },\n  { x: 0.515625, y: 0.609375 },\n  { x: 0.546875, y: 0.609375 },\n  { x: 0.546875, y: 0.609375 },\n  { x: 0.578125, y: 0.609375 },\n  { x: 0.578125, y: 0.609375 },\n  { x: 0.609375, y: 0.609375 },\n  { x: 0.609375, y: 0.609375 },\n  { x: 0.640625, y: 0.609375 },\n  { x: 0.640625, y: 0.609375 },\n  { x: 0.671875, y: 0.609375 },\n  { x: 0.671875, y: 0.609375 },\n  { x: 0.703125, y: 0.609375 },\n  { x: 0.703125, y: 0.609375 },\n  { x: 0.734375, y: 0.609375 },\n  { x: 0.734375, y: 0.609375 },\n  { x: 0.765625, y: 0.609375 },\n  { x: 0.765625, y: 0.609375 },\n  { x: 0.796875, y: 0.609375 },\n  { x: 0.796875, y: 0.609375 },\n  { x: 0.828125, y: 0.609375 },\n  { x: 0.828125, y: 0.609375 },\n  { x: 0.859375, y: 0.609375 },\n  { x: 0.859375, y: 0.609375 },\n  { x: 0.890625, y: 0.609375 },\n  { x: 0.890625, y: 0.609375 },\n  { x: 0.921875, y: 0.609375 },\n  { x: 0.921875, y: 0.609375 },\n  { x: 0.953125, y: 0.609375 },\n  { x: 0.953125, y: 0.609375 },\n  { x: 0.984375, y: 0.609375 },\n  { x: 0.984375, y: 0.609375 },\n  { x: 0.015625, y: 0.640625 },\n  { x: 0.015625, y: 0.640625 },\n  { x: 0.046875, y: 0.640625 },\n  { x: 0.046875, y: 0.640625 },\n  { x: 0.078125, y: 0.640625 },\n  { x: 0.078125, y: 0.640625 },\n  { x: 0.109375, y: 0.640625 },\n  { x: 0.109375, y: 0.640625 },\n  { x: 0.140625, y: 0.640625 },\n  { x: 0.140625, y: 0.640625 },\n  { x: 0.171875, y: 0.640625 },\n  { x: 0.171875, y: 0.640625 },\n  { x: 0.203125, y: 0.640625 },\n  { x: 0.203125, y: 0.640625 },\n  { x: 0.234375, y: 0.640625 },\n  { x: 0.234375, y: 0.640625 },\n  { x: 0.265625, y: 0.640625 },\n  { x: 0.265625, y: 0.640625 },\n  { x: 0.296875, y: 0.640625 },\n  { x: 0.296875, y: 0.640625 },\n  { x: 0.328125, y: 0.640625 },\n  { x: 0.328125, y: 0.640625 },\n  { x: 0.359375, y: 0.640625 },\n  { x: 0.359375, y: 0.640625 },\n  { x: 0.390625, y: 0.640625 },\n  { x: 0.390625, y: 0.640625 },\n  { x: 0.421875, y: 0.640625 },\n  { x: 0.421875, y: 0.640625 },\n  { x: 0.453125, y: 0.640625 },\n  { x: 0.453125, y: 0.640625 },\n  { x: 0.484375, y: 0.640625 },\n  { x: 0.484375, y: 0.640625 },\n  { x: 0.515625, y: 0.640625 },\n  { x: 0.515625, y: 0.640625 },\n  { x: 0.546875, y: 0.640625 },\n  { x: 0.546875, y: 0.640625 },\n  { x: 0.578125, y: 0.640625 },\n  { x: 0.578125, y: 0.640625 },\n  { x: 0.609375, y: 0.640625 },\n  { x: 0.609375, y: 0.640625 },\n  { x: 0.640625, y: 0.640625 },\n  { x: 0.640625, y: 0.640625 },\n  { x: 0.671875, y: 0.640625 },\n  { x: 0.671875, y: 0.640625 },\n  { x: 0.703125, y: 0.640625 },\n  { x: 0.703125, y: 0.640625 },\n  { x: 0.734375, y: 0.640625 },\n  { x: 0.734375, y: 0.640625 },\n  { x: 0.765625, y: 0.640625 },\n  { x: 0.765625, y: 0.640625 },\n  { x: 0.796875, y: 0.640625 },\n  { x: 0.796875, y: 0.640625 },\n  { x: 0.828125, y: 0.640625 },\n  { x: 0.828125, y: 0.640625 },\n  { x: 0.859375, y: 0.640625 },\n  { x: 0.859375, y: 0.640625 },\n  { x: 0.890625, y: 0.640625 },\n  { x: 0.890625, y: 0.640625 },\n  { x: 0.921875, y: 0.640625 },\n  { x: 0.921875, y: 0.640625 },\n  { x: 0.953125, y: 0.640625 },\n  { x: 0.953125, y: 0.640625 },\n  { x: 0.984375, y: 0.640625 },\n  { x: 0.984375, y: 0.640625 },\n  { x: 0.015625, y: 0.671875 },\n  { x: 0.015625, y: 0.671875 },\n  { x: 0.046875, y: 0.671875 },\n  { x: 0.046875, y: 0.671875 },\n  { x: 0.078125, y: 0.671875 },\n  { x: 0.078125, y: 0.671875 },\n  { x: 0.109375, y: 0.671875 },\n  { x: 0.109375, y: 0.671875 },\n  { x: 0.140625, y: 0.671875 },\n  { x: 0.140625, y: 0.671875 },\n  { x: 0.171875, y: 0.671875 },\n  { x: 0.171875, y: 0.671875 },\n  { x: 0.203125, y: 0.671875 },\n  { x: 0.203125, y: 0.671875 },\n  { x: 0.234375, y: 0.671875 },\n  { x: 0.234375, y: 0.671875 },\n  { x: 0.265625, y: 0.671875 },\n  { x: 0.265625, y: 0.671875 },\n  { x: 0.296875, y: 0.671875 },\n  { x: 0.296875, y: 0.671875 },\n  { x: 0.328125, y: 0.671875 },\n  { x: 0.328125, y: 0.671875 },\n  { x: 0.359375, y: 0.671875 },\n  { x: 0.359375, y: 0.671875 },\n  { x: 0.390625, y: 0.671875 },\n  { x: 0.390625, y: 0.671875 },\n  { x: 0.421875, y: 0.671875 },\n  { x: 0.421875, y: 0.671875 },\n  { x: 0.453125, y: 0.671875 },\n  { x: 0.453125, y: 0.671875 },\n  { x: 0.484375, y: 0.671875 },\n  { x: 0.484375, y: 0.671875 },\n  { x: 0.515625, y: 0.671875 },\n  { x: 0.515625, y: 0.671875 },\n  { x: 0.546875, y: 0.671875 },\n  { x: 0.546875, y: 0.671875 },\n  { x: 0.578125, y: 0.671875 },\n  { x: 0.578125, y: 0.671875 },\n  { x: 0.609375, y: 0.671875 },\n  { x: 0.609375, y: 0.671875 },\n  { x: 0.640625, y: 0.671875 },\n  { x: 0.640625, y: 0.671875 },\n  { x: 0.671875, y: 0.671875 },\n  { x: 0.671875, y: 0.671875 },\n  { x: 0.703125, y: 0.671875 },\n  { x: 0.703125, y: 0.671875 },\n  { x: 0.734375, y: 0.671875 },\n  { x: 0.734375, y: 0.671875 },\n  { x: 0.765625, y: 0.671875 },\n  { x: 0.765625, y: 0.671875 },\n  { x: 0.796875, y: 0.671875 },\n  { x: 0.796875, y: 0.671875 },\n  { x: 0.828125, y: 0.671875 },\n  { x: 0.828125, y: 0.671875 },\n  { x: 0.859375, y: 0.671875 },\n  { x: 0.859375, y: 0.671875 },\n  { x: 0.890625, y: 0.671875 },\n  { x: 0.890625, y: 0.671875 },\n  { x: 0.921875, y: 0.671875 },\n  { x: 0.921875, y: 0.671875 },\n  { x: 0.953125, y: 0.671875 },\n  { x: 0.953125, y: 0.671875 },\n  { x: 0.984375, y: 0.671875 },\n  { x: 0.984375, y: 0.671875 },\n  { x: 0.015625, y: 0.703125 },\n  { x: 0.015625, y: 0.703125 },\n  { x: 0.046875, y: 0.703125 },\n  { x: 0.046875, y: 0.703125 },\n  { x: 0.078125, y: 0.703125 },\n  { x: 0.078125, y: 0.703125 },\n  { x: 0.109375, y: 0.703125 },\n  { x: 0.109375, y: 0.703125 },\n  { x: 0.140625, y: 0.703125 },\n  { x: 0.140625, y: 0.703125 },\n  { x: 0.171875, y: 0.703125 },\n  { x: 0.171875, y: 0.703125 },\n  { x: 0.203125, y: 0.703125 },\n  { x: 0.203125, y: 0.703125 },\n  { x: 0.234375, y: 0.703125 },\n  { x: 0.234375, y: 0.703125 },\n  { x: 0.265625, y: 0.703125 },\n  { x: 0.265625, y: 0.703125 },\n  { x: 0.296875, y: 0.703125 },\n  { x: 0.296875, y: 0.703125 },\n  { x: 0.328125, y: 0.703125 },\n  { x: 0.328125, y: 0.703125 },\n  { x: 0.359375, y: 0.703125 },\n  { x: 0.359375, y: 0.703125 },\n  { x: 0.390625, y: 0.703125 },\n  { x: 0.390625, y: 0.703125 },\n  { x: 0.421875, y: 0.703125 },\n  { x: 0.421875, y: 0.703125 },\n  { x: 0.453125, y: 0.703125 },\n  { x: 0.453125, y: 0.703125 },\n  { x: 0.484375, y: 0.703125 },\n  { x: 0.484375, y: 0.703125 },\n  { x: 0.515625, y: 0.703125 },\n  { x: 0.515625, y: 0.703125 },\n  { x: 0.546875, y: 0.703125 },\n  { x: 0.546875, y: 0.703125 },\n  { x: 0.578125, y: 0.703125 },\n  { x: 0.578125, y: 0.703125 },\n  { x: 0.609375, y: 0.703125 },\n  { x: 0.609375, y: 0.703125 },\n  { x: 0.640625, y: 0.703125 },\n  { x: 0.640625, y: 0.703125 },\n  { x: 0.671875, y: 0.703125 },\n  { x: 0.671875, y: 0.703125 },\n  { x: 0.703125, y: 0.703125 },\n  { x: 0.703125, y: 0.703125 },\n  { x: 0.734375, y: 0.703125 },\n  { x: 0.734375, y: 0.703125 },\n  { x: 0.765625, y: 0.703125 },\n  { x: 0.765625, y: 0.703125 },\n  { x: 0.796875, y: 0.703125 },\n  { x: 0.796875, y: 0.703125 },\n  { x: 0.828125, y: 0.703125 },\n  { x: 0.828125, y: 0.703125 },\n  { x: 0.859375, y: 0.703125 },\n  { x: 0.859375, y: 0.703125 },\n  { x: 0.890625, y: 0.703125 },\n  { x: 0.890625, y: 0.703125 },\n  { x: 0.921875, y: 0.703125 },\n  { x: 0.921875, y: 0.703125 },\n  { x: 0.953125, y: 0.703125 },\n  { x: 0.953125, y: 0.703125 },\n  { x: 0.984375, y: 0.703125 },\n  { x: 0.984375, y: 0.703125 },\n  { x: 0.015625, y: 0.734375 },\n  { x: 0.015625, y: 0.734375 },\n  { x: 0.046875, y: 0.734375 },\n  { x: 0.046875, y: 0.734375 },\n  { x: 0.078125, y: 0.734375 },\n  { x: 0.078125, y: 0.734375 },\n  { x: 0.109375, y: 0.734375 },\n  { x: 0.109375, y: 0.734375 },\n  { x: 0.140625, y: 0.734375 },\n  { x: 0.140625, y: 0.734375 },\n  { x: 0.171875, y: 0.734375 },\n  { x: 0.171875, y: 0.734375 },\n  { x: 0.203125, y: 0.734375 },\n  { x: 0.203125, y: 0.734375 },\n  { x: 0.234375, y: 0.734375 },\n  { x: 0.234375, y: 0.734375 },\n  { x: 0.265625, y: 0.734375 },\n  { x: 0.265625, y: 0.734375 },\n  { x: 0.296875, y: 0.734375 },\n  { x: 0.296875, y: 0.734375 },\n  { x: 0.328125, y: 0.734375 },\n  { x: 0.328125, y: 0.734375 },\n  { x: 0.359375, y: 0.734375 },\n  { x: 0.359375, y: 0.734375 },\n  { x: 0.390625, y: 0.734375 },\n  { x: 0.390625, y: 0.734375 },\n  { x: 0.421875, y: 0.734375 },\n  { x: 0.421875, y: 0.734375 },\n  { x: 0.453125, y: 0.734375 },\n  { x: 0.453125, y: 0.734375 },\n  { x: 0.484375, y: 0.734375 },\n  { x: 0.484375, y: 0.734375 },\n  { x: 0.515625, y: 0.734375 },\n  { x: 0.515625, y: 0.734375 },\n  { x: 0.546875, y: 0.734375 },\n  { x: 0.546875, y: 0.734375 },\n  { x: 0.578125, y: 0.734375 },\n  { x: 0.578125, y: 0.734375 },\n  { x: 0.609375, y: 0.734375 },\n  { x: 0.609375, y: 0.734375 },\n  { x: 0.640625, y: 0.734375 },\n  { x: 0.640625, y: 0.734375 },\n  { x: 0.671875, y: 0.734375 },\n  { x: 0.671875, y: 0.734375 },\n  { x: 0.703125, y: 0.734375 },\n  { x: 0.703125, y: 0.734375 },\n  { x: 0.734375, y: 0.734375 },\n  { x: 0.734375, y: 0.734375 },\n  { x: 0.765625, y: 0.734375 },\n  { x: 0.765625, y: 0.734375 },\n  { x: 0.796875, y: 0.734375 },\n  { x: 0.796875, y: 0.734375 },\n  { x: 0.828125, y: 0.734375 },\n  { x: 0.828125, y: 0.734375 },\n  { x: 0.859375, y: 0.734375 },\n  { x: 0.859375, y: 0.734375 },\n  { x: 0.890625, y: 0.734375 },\n  { x: 0.890625, y: 0.734375 },\n  { x: 0.921875, y: 0.734375 },\n  { x: 0.921875, y: 0.734375 },\n  { x: 0.953125, y: 0.734375 },\n  { x: 0.953125, y: 0.734375 },\n  { x: 0.984375, y: 0.734375 },\n  { x: 0.984375, y: 0.734375 },\n  { x: 0.015625, y: 0.765625 },\n  { x: 0.015625, y: 0.765625 },\n  { x: 0.046875, y: 0.765625 },\n  { x: 0.046875, y: 0.765625 },\n  { x: 0.078125, y: 0.765625 },\n  { x: 0.078125, y: 0.765625 },\n  { x: 0.109375, y: 0.765625 },\n  { x: 0.109375, y: 0.765625 },\n  { x: 0.140625, y: 0.765625 },\n  { x: 0.140625, y: 0.765625 },\n  { x: 0.171875, y: 0.765625 },\n  { x: 0.171875, y: 0.765625 },\n  { x: 0.203125, y: 0.765625 },\n  { x: 0.203125, y: 0.765625 },\n  { x: 0.234375, y: 0.765625 },\n  { x: 0.234375, y: 0.765625 },\n  { x: 0.265625, y: 0.765625 },\n  { x: 0.265625, y: 0.765625 },\n  { x: 0.296875, y: 0.765625 },\n  { x: 0.296875, y: 0.765625 },\n  { x: 0.328125, y: 0.765625 },\n  { x: 0.328125, y: 0.765625 },\n  { x: 0.359375, y: 0.765625 },\n  { x: 0.359375, y: 0.765625 },\n  { x: 0.390625, y: 0.765625 },\n  { x: 0.390625, y: 0.765625 },\n  { x: 0.421875, y: 0.765625 },\n  { x: 0.421875, y: 0.765625 },\n  { x: 0.453125, y: 0.765625 },\n  { x: 0.453125, y: 0.765625 },\n  { x: 0.484375, y: 0.765625 },\n  { x: 0.484375, y: 0.765625 },\n  { x: 0.515625, y: 0.765625 },\n  { x: 0.515625, y: 0.765625 },\n  { x: 0.546875, y: 0.765625 },\n  { x: 0.546875, y: 0.765625 },\n  { x: 0.578125, y: 0.765625 },\n  { x: 0.578125, y: 0.765625 },\n  { x: 0.609375, y: 0.765625 },\n  { x: 0.609375, y: 0.765625 },\n  { x: 0.640625, y: 0.765625 },\n  { x: 0.640625, y: 0.765625 },\n  { x: 0.671875, y: 0.765625 },\n  { x: 0.671875, y: 0.765625 },\n  { x: 0.703125, y: 0.765625 },\n  { x: 0.703125, y: 0.765625 },\n  { x: 0.734375, y: 0.765625 },\n  { x: 0.734375, y: 0.765625 },\n  { x: 0.765625, y: 0.765625 },\n  { x: 0.765625, y: 0.765625 },\n  { x: 0.796875, y: 0.765625 },\n  { x: 0.796875, y: 0.765625 },\n  { x: 0.828125, y: 0.765625 },\n  { x: 0.828125, y: 0.765625 },\n  { x: 0.859375, y: 0.765625 },\n  { x: 0.859375, y: 0.765625 },\n  { x: 0.890625, y: 0.765625 },\n  { x: 0.890625, y: 0.765625 },\n  { x: 0.921875, y: 0.765625 },\n  { x: 0.921875, y: 0.765625 },\n  { x: 0.953125, y: 0.765625 },\n  { x: 0.953125, y: 0.765625 },\n  { x: 0.984375, y: 0.765625 },\n  { x: 0.984375, y: 0.765625 },\n  { x: 0.015625, y: 0.796875 },\n  { x: 0.015625, y: 0.796875 },\n  { x: 0.046875, y: 0.796875 },\n  { x: 0.046875, y: 0.796875 },\n  { x: 0.078125, y: 0.796875 },\n  { x: 0.078125, y: 0.796875 },\n  { x: 0.109375, y: 0.796875 },\n  { x: 0.109375, y: 0.796875 },\n  { x: 0.140625, y: 0.796875 },\n  { x: 0.140625, y: 0.796875 },\n  { x: 0.171875, y: 0.796875 },\n  { x: 0.171875, y: 0.796875 },\n  { x: 0.203125, y: 0.796875 },\n  { x: 0.203125, y: 0.796875 },\n  { x: 0.234375, y: 0.796875 },\n  { x: 0.234375, y: 0.796875 },\n  { x: 0.265625, y: 0.796875 },\n  { x: 0.265625, y: 0.796875 },\n  { x: 0.296875, y: 0.796875 },\n  { x: 0.296875, y: 0.796875 },\n  { x: 0.328125, y: 0.796875 },\n  { x: 0.328125, y: 0.796875 },\n  { x: 0.359375, y: 0.796875 },\n  { x: 0.359375, y: 0.796875 },\n  { x: 0.390625, y: 0.796875 },\n  { x: 0.390625, y: 0.796875 },\n  { x: 0.421875, y: 0.796875 },\n  { x: 0.421875, y: 0.796875 },\n  { x: 0.453125, y: 0.796875 },\n  { x: 0.453125, y: 0.796875 },\n  { x: 0.484375, y: 0.796875 },\n  { x: 0.484375, y: 0.796875 },\n  { x: 0.515625, y: 0.796875 },\n  { x: 0.515625, y: 0.796875 },\n  { x: 0.546875, y: 0.796875 },\n  { x: 0.546875, y: 0.796875 },\n  { x: 0.578125, y: 0.796875 },\n  { x: 0.578125, y: 0.796875 },\n  { x: 0.609375, y: 0.796875 },\n  { x: 0.609375, y: 0.796875 },\n  { x: 0.640625, y: 0.796875 },\n  { x: 0.640625, y: 0.796875 },\n  { x: 0.671875, y: 0.796875 },\n  { x: 0.671875, y: 0.796875 },\n  { x: 0.703125, y: 0.796875 },\n  { x: 0.703125, y: 0.796875 },\n  { x: 0.734375, y: 0.796875 },\n  { x: 0.734375, y: 0.796875 },\n  { x: 0.765625, y: 0.796875 },\n  { x: 0.765625, y: 0.796875 },\n  { x: 0.796875, y: 0.796875 },\n  { x: 0.796875, y: 0.796875 },\n  { x: 0.828125, y: 0.796875 },\n  { x: 0.828125, y: 0.796875 },\n  { x: 0.859375, y: 0.796875 },\n  { x: 0.859375, y: 0.796875 },\n  { x: 0.890625, y: 0.796875 },\n  { x: 0.890625, y: 0.796875 },\n  { x: 0.921875, y: 0.796875 },\n  { x: 0.921875, y: 0.796875 },\n  { x: 0.953125, y: 0.796875 },\n  { x: 0.953125, y: 0.796875 },\n  { x: 0.984375, y: 0.796875 },\n  { x: 0.984375, y: 0.796875 },\n  { x: 0.015625, y: 0.828125 },\n  { x: 0.015625, y: 0.828125 },\n  { x: 0.046875, y: 0.828125 },\n  { x: 0.046875, y: 0.828125 },\n  { x: 0.078125, y: 0.828125 },\n  { x: 0.078125, y: 0.828125 },\n  { x: 0.109375, y: 0.828125 },\n  { x: 0.109375, y: 0.828125 },\n  { x: 0.140625, y: 0.828125 },\n  { x: 0.140625, y: 0.828125 },\n  { x: 0.171875, y: 0.828125 },\n  { x: 0.171875, y: 0.828125 },\n  { x: 0.203125, y: 0.828125 },\n  { x: 0.203125, y: 0.828125 },\n  { x: 0.234375, y: 0.828125 },\n  { x: 0.234375, y: 0.828125 },\n  { x: 0.265625, y: 0.828125 },\n  { x: 0.265625, y: 0.828125 },\n  { x: 0.296875, y: 0.828125 },\n  { x: 0.296875, y: 0.828125 },\n  { x: 0.328125, y: 0.828125 },\n  { x: 0.328125, y: 0.828125 },\n  { x: 0.359375, y: 0.828125 },\n  { x: 0.359375, y: 0.828125 },\n  { x: 0.390625, y: 0.828125 },\n  { x: 0.390625, y: 0.828125 },\n  { x: 0.421875, y: 0.828125 },\n  { x: 0.421875, y: 0.828125 },\n  { x: 0.453125, y: 0.828125 },\n  { x: 0.453125, y: 0.828125 },\n  { x: 0.484375, y: 0.828125 },\n  { x: 0.484375, y: 0.828125 },\n  { x: 0.515625, y: 0.828125 },\n  { x: 0.515625, y: 0.828125 },\n  { x: 0.546875, y: 0.828125 },\n  { x: 0.546875, y: 0.828125 },\n  { x: 0.578125, y: 0.828125 },\n  { x: 0.578125, y: 0.828125 },\n  { x: 0.609375, y: 0.828125 },\n  { x: 0.609375, y: 0.828125 },\n  { x: 0.640625, y: 0.828125 },\n  { x: 0.640625, y: 0.828125 },\n  { x: 0.671875, y: 0.828125 },\n  { x: 0.671875, y: 0.828125 },\n  { x: 0.703125, y: 0.828125 },\n  { x: 0.703125, y: 0.828125 },\n  { x: 0.734375, y: 0.828125 },\n  { x: 0.734375, y: 0.828125 },\n  { x: 0.765625, y: 0.828125 },\n  { x: 0.765625, y: 0.828125 },\n  { x: 0.796875, y: 0.828125 },\n  { x: 0.796875, y: 0.828125 },\n  { x: 0.828125, y: 0.828125 },\n  { x: 0.828125, y: 0.828125 },\n  { x: 0.859375, y: 0.828125 },\n  { x: 0.859375, y: 0.828125 },\n  { x: 0.890625, y: 0.828125 },\n  { x: 0.890625, y: 0.828125 },\n  { x: 0.921875, y: 0.828125 },\n  { x: 0.921875, y: 0.828125 },\n  { x: 0.953125, y: 0.828125 },\n  { x: 0.953125, y: 0.828125 },\n  { x: 0.984375, y: 0.828125 },\n  { x: 0.984375, y: 0.828125 },\n  { x: 0.015625, y: 0.859375 },\n  { x: 0.015625, y: 0.859375 },\n  { x: 0.046875, y: 0.859375 },\n  { x: 0.046875, y: 0.859375 },\n  { x: 0.078125, y: 0.859375 },\n  { x: 0.078125, y: 0.859375 },\n  { x: 0.109375, y: 0.859375 },\n  { x: 0.109375, y: 0.859375 },\n  { x: 0.140625, y: 0.859375 },\n  { x: 0.140625, y: 0.859375 },\n  { x: 0.171875, y: 0.859375 },\n  { x: 0.171875, y: 0.859375 },\n  { x: 0.203125, y: 0.859375 },\n  { x: 0.203125, y: 0.859375 },\n  { x: 0.234375, y: 0.859375 },\n  { x: 0.234375, y: 0.859375 },\n  { x: 0.265625, y: 0.859375 },\n  { x: 0.265625, y: 0.859375 },\n  { x: 0.296875, y: 0.859375 },\n  { x: 0.296875, y: 0.859375 },\n  { x: 0.328125, y: 0.859375 },\n  { x: 0.328125, y: 0.859375 },\n  { x: 0.359375, y: 0.859375 },\n  { x: 0.359375, y: 0.859375 },\n  { x: 0.390625, y: 0.859375 },\n  { x: 0.390625, y: 0.859375 },\n  { x: 0.421875, y: 0.859375 },\n  { x: 0.421875, y: 0.859375 },\n  { x: 0.453125, y: 0.859375 },\n  { x: 0.453125, y: 0.859375 },\n  { x: 0.484375, y: 0.859375 },\n  { x: 0.484375, y: 0.859375 },\n  { x: 0.515625, y: 0.859375 },\n  { x: 0.515625, y: 0.859375 },\n  { x: 0.546875, y: 0.859375 },\n  { x: 0.546875, y: 0.859375 },\n  { x: 0.578125, y: 0.859375 },\n  { x: 0.578125, y: 0.859375 },\n  { x: 0.609375, y: 0.859375 },\n  { x: 0.609375, y: 0.859375 },\n  { x: 0.640625, y: 0.859375 },\n  { x: 0.640625, y: 0.859375 },\n  { x: 0.671875, y: 0.859375 },\n  { x: 0.671875, y: 0.859375 },\n  { x: 0.703125, y: 0.859375 },\n  { x: 0.703125, y: 0.859375 },\n  { x: 0.734375, y: 0.859375 },\n  { x: 0.734375, y: 0.859375 },\n  { x: 0.765625, y: 0.859375 },\n  { x: 0.765625, y: 0.859375 },\n  { x: 0.796875, y: 0.859375 },\n  { x: 0.796875, y: 0.859375 },\n  { x: 0.828125, y: 0.859375 },\n  { x: 0.828125, y: 0.859375 },\n  { x: 0.859375, y: 0.859375 },\n  { x: 0.859375, y: 0.859375 },\n  { x: 0.890625, y: 0.859375 },\n  { x: 0.890625, y: 0.859375 },\n  { x: 0.921875, y: 0.859375 },\n  { x: 0.921875, y: 0.859375 },\n  { x: 0.953125, y: 0.859375 },\n  { x: 0.953125, y: 0.859375 },\n  { x: 0.984375, y: 0.859375 },\n  { x: 0.984375, y: 0.859375 },\n  { x: 0.015625, y: 0.890625 },\n  { x: 0.015625, y: 0.890625 },\n  { x: 0.046875, y: 0.890625 },\n  { x: 0.046875, y: 0.890625 },\n  { x: 0.078125, y: 0.890625 },\n  { x: 0.078125, y: 0.890625 },\n  { x: 0.109375, y: 0.890625 },\n  { x: 0.109375, y: 0.890625 },\n  { x: 0.140625, y: 0.890625 },\n  { x: 0.140625, y: 0.890625 },\n  { x: 0.171875, y: 0.890625 },\n  { x: 0.171875, y: 0.890625 },\n  { x: 0.203125, y: 0.890625 },\n  { x: 0.203125, y: 0.890625 },\n  { x: 0.234375, y: 0.890625 },\n  { x: 0.234375, y: 0.890625 },\n  { x: 0.265625, y: 0.890625 },\n  { x: 0.265625, y: 0.890625 },\n  { x: 0.296875, y: 0.890625 },\n  { x: 0.296875, y: 0.890625 },\n  { x: 0.328125, y: 0.890625 },\n  { x: 0.328125, y: 0.890625 },\n  { x: 0.359375, y: 0.890625 },\n  { x: 0.359375, y: 0.890625 },\n  { x: 0.390625, y: 0.890625 },\n  { x: 0.390625, y: 0.890625 },\n  { x: 0.421875, y: 0.890625 },\n  { x: 0.421875, y: 0.890625 },\n  { x: 0.453125, y: 0.890625 },\n  { x: 0.453125, y: 0.890625 },\n  { x: 0.484375, y: 0.890625 },\n  { x: 0.484375, y: 0.890625 },\n  { x: 0.515625, y: 0.890625 },\n  { x: 0.515625, y: 0.890625 },\n  { x: 0.546875, y: 0.890625 },\n  { x: 0.546875, y: 0.890625 },\n  { x: 0.578125, y: 0.890625 },\n  { x: 0.578125, y: 0.890625 },\n  { x: 0.609375, y: 0.890625 },\n  { x: 0.609375, y: 0.890625 },\n  { x: 0.640625, y: 0.890625 },\n  { x: 0.640625, y: 0.890625 },\n  { x: 0.671875, y: 0.890625 },\n  { x: 0.671875, y: 0.890625 },\n  { x: 0.703125, y: 0.890625 },\n  { x: 0.703125, y: 0.890625 },\n  { x: 0.734375, y: 0.890625 },\n  { x: 0.734375, y: 0.890625 },\n  { x: 0.765625, y: 0.890625 },\n  { x: 0.765625, y: 0.890625 },\n  { x: 0.796875, y: 0.890625 },\n  { x: 0.796875, y: 0.890625 },\n  { x: 0.828125, y: 0.890625 },\n  { x: 0.828125, y: 0.890625 },\n  { x: 0.859375, y: 0.890625 },\n  { x: 0.859375, y: 0.890625 },\n  { x: 0.890625, y: 0.890625 },\n  { x: 0.890625, y: 0.890625 },\n  { x: 0.921875, y: 0.890625 },\n  { x: 0.921875, y: 0.890625 },\n  { x: 0.953125, y: 0.890625 },\n  { x: 0.953125, y: 0.890625 },\n  { x: 0.984375, y: 0.890625 },\n  { x: 0.984375, y: 0.890625 },\n  { x: 0.015625, y: 0.921875 },\n  { x: 0.015625, y: 0.921875 },\n  { x: 0.046875, y: 0.921875 },\n  { x: 0.046875, y: 0.921875 },\n  { x: 0.078125, y: 0.921875 },\n  { x: 0.078125, y: 0.921875 },\n  { x: 0.109375, y: 0.921875 },\n  { x: 0.109375, y: 0.921875 },\n  { x: 0.140625, y: 0.921875 },\n  { x: 0.140625, y: 0.921875 },\n  { x: 0.171875, y: 0.921875 },\n  { x: 0.171875, y: 0.921875 },\n  { x: 0.203125, y: 0.921875 },\n  { x: 0.203125, y: 0.921875 },\n  { x: 0.234375, y: 0.921875 },\n  { x: 0.234375, y: 0.921875 },\n  { x: 0.265625, y: 0.921875 },\n  { x: 0.265625, y: 0.921875 },\n  { x: 0.296875, y: 0.921875 },\n  { x: 0.296875, y: 0.921875 },\n  { x: 0.328125, y: 0.921875 },\n  { x: 0.328125, y: 0.921875 },\n  { x: 0.359375, y: 0.921875 },\n  { x: 0.359375, y: 0.921875 },\n  { x: 0.390625, y: 0.921875 },\n  { x: 0.390625, y: 0.921875 },\n  { x: 0.421875, y: 0.921875 },\n  { x: 0.421875, y: 0.921875 },\n  { x: 0.453125, y: 0.921875 },\n  { x: 0.453125, y: 0.921875 },\n  { x: 0.484375, y: 0.921875 },\n  { x: 0.484375, y: 0.921875 },\n  { x: 0.515625, y: 0.921875 },\n  { x: 0.515625, y: 0.921875 },\n  { x: 0.546875, y: 0.921875 },\n  { x: 0.546875, y: 0.921875 },\n  { x: 0.578125, y: 0.921875 },\n  { x: 0.578125, y: 0.921875 },\n  { x: 0.609375, y: 0.921875 },\n  { x: 0.609375, y: 0.921875 },\n  { x: 0.640625, y: 0.921875 },\n  { x: 0.640625, y: 0.921875 },\n  { x: 0.671875, y: 0.921875 },\n  { x: 0.671875, y: 0.921875 },\n  { x: 0.703125, y: 0.921875 },\n  { x: 0.703125, y: 0.921875 },\n  { x: 0.734375, y: 0.921875 },\n  { x: 0.734375, y: 0.921875 },\n  { x: 0.765625, y: 0.921875 },\n  { x: 0.765625, y: 0.921875 },\n  { x: 0.796875, y: 0.921875 },\n  { x: 0.796875, y: 0.921875 },\n  { x: 0.828125, y: 0.921875 },\n  { x: 0.828125, y: 0.921875 },\n  { x: 0.859375, y: 0.921875 },\n  { x: 0.859375, y: 0.921875 },\n  { x: 0.890625, y: 0.921875 },\n  { x: 0.890625, y: 0.921875 },\n  { x: 0.921875, y: 0.921875 },\n  { x: 0.921875, y: 0.921875 },\n  { x: 0.953125, y: 0.921875 },\n  { x: 0.953125, y: 0.921875 },\n  { x: 0.984375, y: 0.921875 },\n  { x: 0.984375, y: 0.921875 },\n  { x: 0.015625, y: 0.953125 },\n  { x: 0.015625, y: 0.953125 },\n  { x: 0.046875, y: 0.953125 },\n  { x: 0.046875, y: 0.953125 },\n  { x: 0.078125, y: 0.953125 },\n  { x: 0.078125, y: 0.953125 },\n  { x: 0.109375, y: 0.953125 },\n  { x: 0.109375, y: 0.953125 },\n  { x: 0.140625, y: 0.953125 },\n  { x: 0.140625, y: 0.953125 },\n  { x: 0.171875, y: 0.953125 },\n  { x: 0.171875, y: 0.953125 },\n  { x: 0.203125, y: 0.953125 },\n  { x: 0.203125, y: 0.953125 },\n  { x: 0.234375, y: 0.953125 },\n  { x: 0.234375, y: 0.953125 },\n  { x: 0.265625, y: 0.953125 },\n  { x: 0.265625, y: 0.953125 },\n  { x: 0.296875, y: 0.953125 },\n  { x: 0.296875, y: 0.953125 },\n  { x: 0.328125, y: 0.953125 },\n  { x: 0.328125, y: 0.953125 },\n  { x: 0.359375, y: 0.953125 },\n  { x: 0.359375, y: 0.953125 },\n  { x: 0.390625, y: 0.953125 },\n  { x: 0.390625, y: 0.953125 },\n  { x: 0.421875, y: 0.953125 },\n  { x: 0.421875, y: 0.953125 },\n  { x: 0.453125, y: 0.953125 },\n  { x: 0.453125, y: 0.953125 },\n  { x: 0.484375, y: 0.953125 },\n  { x: 0.484375, y: 0.953125 },\n  { x: 0.515625, y: 0.953125 },\n  { x: 0.515625, y: 0.953125 },\n  { x: 0.546875, y: 0.953125 },\n  { x: 0.546875, y: 0.953125 },\n  { x: 0.578125, y: 0.953125 },\n  { x: 0.578125, y: 0.953125 },\n  { x: 0.609375, y: 0.953125 },\n  { x: 0.609375, y: 0.953125 },\n  { x: 0.640625, y: 0.953125 },\n  { x: 0.640625, y: 0.953125 },\n  { x: 0.671875, y: 0.953125 },\n  { x: 0.671875, y: 0.953125 },\n  { x: 0.703125, y: 0.953125 },\n  { x: 0.703125, y: 0.953125 },\n  { x: 0.734375, y: 0.953125 },\n  { x: 0.734375, y: 0.953125 },\n  { x: 0.765625, y: 0.953125 },\n  { x: 0.765625, y: 0.953125 },\n  { x: 0.796875, y: 0.953125 },\n  { x: 0.796875, y: 0.953125 },\n  { x: 0.828125, y: 0.953125 },\n  { x: 0.828125, y: 0.953125 },\n  { x: 0.859375, y: 0.953125 },\n  { x: 0.859375, y: 0.953125 },\n  { x: 0.890625, y: 0.953125 },\n  { x: 0.890625, y: 0.953125 },\n  { x: 0.921875, y: 0.953125 },\n  { x: 0.921875, y: 0.953125 },\n  { x: 0.953125, y: 0.953125 },\n  { x: 0.953125, y: 0.953125 },\n  { x: 0.984375, y: 0.953125 },\n  { x: 0.984375, y: 0.953125 },\n  { x: 0.015625, y: 0.984375 },\n  { x: 0.015625, y: 0.984375 },\n  { x: 0.046875, y: 0.984375 },\n  { x: 0.046875, y: 0.984375 },\n  { x: 0.078125, y: 0.984375 },\n  { x: 0.078125, y: 0.984375 },\n  { x: 0.109375, y: 0.984375 },\n  { x: 0.109375, y: 0.984375 },\n  { x: 0.140625, y: 0.984375 },\n  { x: 0.140625, y: 0.984375 },\n  { x: 0.171875, y: 0.984375 },\n  { x: 0.171875, y: 0.984375 },\n  { x: 0.203125, y: 0.984375 },\n  { x: 0.203125, y: 0.984375 },\n  { x: 0.234375, y: 0.984375 },\n  { x: 0.234375, y: 0.984375 },\n  { x: 0.265625, y: 0.984375 },\n  { x: 0.265625, y: 0.984375 },\n  { x: 0.296875, y: 0.984375 },\n  { x: 0.296875, y: 0.984375 },\n  { x: 0.328125, y: 0.984375 },\n  { x: 0.328125, y: 0.984375 },\n  { x: 0.359375, y: 0.984375 },\n  { x: 0.359375, y: 0.984375 },\n  { x: 0.390625, y: 0.984375 },\n  { x: 0.390625, y: 0.984375 },\n  { x: 0.421875, y: 0.984375 },\n  { x: 0.421875, y: 0.984375 },\n  { x: 0.453125, y: 0.984375 },\n  { x: 0.453125, y: 0.984375 },\n  { x: 0.484375, y: 0.984375 },\n  { x: 0.484375, y: 0.984375 },\n  { x: 0.515625, y: 0.984375 },\n  { x: 0.515625, y: 0.984375 },\n  { x: 0.546875, y: 0.984375 },\n  { x: 0.546875, y: 0.984375 },\n  { x: 0.578125, y: 0.984375 },\n  { x: 0.578125, y: 0.984375 },\n  { x: 0.609375, y: 0.984375 },\n  { x: 0.609375, y: 0.984375 },\n  { x: 0.640625, y: 0.984375 },\n  { x: 0.640625, y: 0.984375 },\n  { x: 0.671875, y: 0.984375 },\n  { x: 0.671875, y: 0.984375 },\n  { x: 0.703125, y: 0.984375 },\n  { x: 0.703125, y: 0.984375 },\n  { x: 0.734375, y: 0.984375 },\n  { x: 0.734375, y: 0.984375 },\n  { x: 0.765625, y: 0.984375 },\n  { x: 0.765625, y: 0.984375 },\n  { x: 0.796875, y: 0.984375 },\n  { x: 0.796875, y: 0.984375 },\n  { x: 0.828125, y: 0.984375 },\n  { x: 0.828125, y: 0.984375 },\n  { x: 0.859375, y: 0.984375 },\n  { x: 0.859375, y: 0.984375 },\n  { x: 0.890625, y: 0.984375 },\n  { x: 0.890625, y: 0.984375 },\n  { x: 0.921875, y: 0.984375 },\n  { x: 0.921875, y: 0.984375 },\n  { x: 0.953125, y: 0.984375 },\n  { x: 0.953125, y: 0.984375 },\n  { x: 0.984375, y: 0.984375 },\n  { x: 0.984375, y: 0.984375 },\n  { x: 0.03125, y: 0.03125 },\n  { x: 0.03125, y: 0.03125 },\n  { x: 0.09375, y: 0.03125 },\n  { x: 0.09375, y: 0.03125 },\n  { x: 0.15625, y: 0.03125 },\n  { x: 0.15625, y: 0.03125 },\n  { x: 0.21875, y: 0.03125 },\n  { x: 0.21875, y: 0.03125 },\n  { x: 0.28125, y: 0.03125 },\n  { x: 0.28125, y: 0.03125 },\n  { x: 0.34375, y: 0.03125 },\n  { x: 0.34375, y: 0.03125 },\n  { x: 0.40625, y: 0.03125 },\n  { x: 0.40625, y: 0.03125 },\n  { x: 0.46875, y: 0.03125 },\n  { x: 0.46875, y: 0.03125 },\n  { x: 0.53125, y: 0.03125 },\n  { x: 0.53125, y: 0.03125 },\n  { x: 0.59375, y: 0.03125 },\n  { x: 0.59375, y: 0.03125 },\n  { x: 0.65625, y: 0.03125 },\n  { x: 0.65625, y: 0.03125 },\n  { x: 0.71875, y: 0.03125 },\n  { x: 0.71875, y: 0.03125 },\n  { x: 0.78125, y: 0.03125 },\n  { x: 0.78125, y: 0.03125 },\n  { x: 0.84375, y: 0.03125 },\n  { x: 0.84375, y: 0.03125 },\n  { x: 0.90625, y: 0.03125 },\n  { x: 0.90625, y: 0.03125 },\n  { x: 0.96875, y: 0.03125 },\n  { x: 0.96875, y: 0.03125 },\n  { x: 0.03125, y: 0.09375 },\n  { x: 0.03125, y: 0.09375 },\n  { x: 0.09375, y: 0.09375 },\n  { x: 0.09375, y: 0.09375 },\n  { x: 0.15625, y: 0.09375 },\n  { x: 0.15625, y: 0.09375 },\n  { x: 0.21875, y: 0.09375 },\n  { x: 0.21875, y: 0.09375 },\n  { x: 0.28125, y: 0.09375 },\n  { x: 0.28125, y: 0.09375 },\n  { x: 0.34375, y: 0.09375 },\n  { x: 0.34375, y: 0.09375 },\n  { x: 0.40625, y: 0.09375 },\n  { x: 0.40625, y: 0.09375 },\n  { x: 0.46875, y: 0.09375 },\n  { x: 0.46875, y: 0.09375 },\n  { x: 0.53125, y: 0.09375 },\n  { x: 0.53125, y: 0.09375 },\n  { x: 0.59375, y: 0.09375 },\n  { x: 0.59375, y: 0.09375 },\n  { x: 0.65625, y: 0.09375 },\n  { x: 0.65625, y: 0.09375 },\n  { x: 0.71875, y: 0.09375 },\n  { x: 0.71875, y: 0.09375 },\n  { x: 0.78125, y: 0.09375 },\n  { x: 0.78125, y: 0.09375 },\n  { x: 0.84375, y: 0.09375 },\n  { x: 0.84375, y: 0.09375 },\n  { x: 0.90625, y: 0.09375 },\n  { x: 0.90625, y: 0.09375 },\n  { x: 0.96875, y: 0.09375 },\n  { x: 0.96875, y: 0.09375 },\n  { x: 0.03125, y: 0.15625 },\n  { x: 0.03125, y: 0.15625 },\n  { x: 0.09375, y: 0.15625 },\n  { x: 0.09375, y: 0.15625 },\n  { x: 0.15625, y: 0.15625 },\n  { x: 0.15625, y: 0.15625 },\n  { x: 0.21875, y: 0.15625 },\n  { x: 0.21875, y: 0.15625 },\n  { x: 0.28125, y: 0.15625 },\n  { x: 0.28125, y: 0.15625 },\n  { x: 0.34375, y: 0.15625 },\n  { x: 0.34375, y: 0.15625 },\n  { x: 0.40625, y: 0.15625 },\n  { x: 0.40625, y: 0.15625 },\n  { x: 0.46875, y: 0.15625 },\n  { x: 0.46875, y: 0.15625 },\n  { x: 0.53125, y: 0.15625 },\n  { x: 0.53125, y: 0.15625 },\n  { x: 0.59375, y: 0.15625 },\n  { x: 0.59375, y: 0.15625 },\n  { x: 0.65625, y: 0.15625 },\n  { x: 0.65625, y: 0.15625 },\n  { x: 0.71875, y: 0.15625 },\n  { x: 0.71875, y: 0.15625 },\n  { x: 0.78125, y: 0.15625 },\n  { x: 0.78125, y: 0.15625 },\n  { x: 0.84375, y: 0.15625 },\n  { x: 0.84375, y: 0.15625 },\n  { x: 0.90625, y: 0.15625 },\n  { x: 0.90625, y: 0.15625 },\n  { x: 0.96875, y: 0.15625 },\n  { x: 0.96875, y: 0.15625 },\n  { x: 0.03125, y: 0.21875 },\n  { x: 0.03125, y: 0.21875 },\n  { x: 0.09375, y: 0.21875 },\n  { x: 0.09375, y: 0.21875 },\n  { x: 0.15625, y: 0.21875 },\n  { x: 0.15625, y: 0.21875 },\n  { x: 0.21875, y: 0.21875 },\n  { x: 0.21875, y: 0.21875 },\n  { x: 0.28125, y: 0.21875 },\n  { x: 0.28125, y: 0.21875 },\n  { x: 0.34375, y: 0.21875 },\n  { x: 0.34375, y: 0.21875 },\n  { x: 0.40625, y: 0.21875 },\n  { x: 0.40625, y: 0.21875 },\n  { x: 0.46875, y: 0.21875 },\n  { x: 0.46875, y: 0.21875 },\n  { x: 0.53125, y: 0.21875 },\n  { x: 0.53125, y: 0.21875 },\n  { x: 0.59375, y: 0.21875 },\n  { x: 0.59375, y: 0.21875 },\n  { x: 0.65625, y: 0.21875 },\n  { x: 0.65625, y: 0.21875 },\n  { x: 0.71875, y: 0.21875 },\n  { x: 0.71875, y: 0.21875 },\n  { x: 0.78125, y: 0.21875 },\n  { x: 0.78125, y: 0.21875 },\n  { x: 0.84375, y: 0.21875 },\n  { x: 0.84375, y: 0.21875 },\n  { x: 0.90625, y: 0.21875 },\n  { x: 0.90625, y: 0.21875 },\n  { x: 0.96875, y: 0.21875 },\n  { x: 0.96875, y: 0.21875 },\n  { x: 0.03125, y: 0.28125 },\n  { x: 0.03125, y: 0.28125 },\n  { x: 0.09375, y: 0.28125 },\n  { x: 0.09375, y: 0.28125 },\n  { x: 0.15625, y: 0.28125 },\n  { x: 0.15625, y: 0.28125 },\n  { x: 0.21875, y: 0.28125 },\n  { x: 0.21875, y: 0.28125 },\n  { x: 0.28125, y: 0.28125 },\n  { x: 0.28125, y: 0.28125 },\n  { x: 0.34375, y: 0.28125 },\n  { x: 0.34375, y: 0.28125 },\n  { x: 0.40625, y: 0.28125 },\n  { x: 0.40625, y: 0.28125 },\n  { x: 0.46875, y: 0.28125 },\n  { x: 0.46875, y: 0.28125 },\n  { x: 0.53125, y: 0.28125 },\n  { x: 0.53125, y: 0.28125 },\n  { x: 0.59375, y: 0.28125 },\n  { x: 0.59375, y: 0.28125 },\n  { x: 0.65625, y: 0.28125 },\n  { x: 0.65625, y: 0.28125 },\n  { x: 0.71875, y: 0.28125 },\n  { x: 0.71875, y: 0.28125 },\n  { x: 0.78125, y: 0.28125 },\n  { x: 0.78125, y: 0.28125 },\n  { x: 0.84375, y: 0.28125 },\n  { x: 0.84375, y: 0.28125 },\n  { x: 0.90625, y: 0.28125 },\n  { x: 0.90625, y: 0.28125 },\n  { x: 0.96875, y: 0.28125 },\n  { x: 0.96875, y: 0.28125 },\n  { x: 0.03125, y: 0.34375 },\n  { x: 0.03125, y: 0.34375 },\n  { x: 0.09375, y: 0.34375 },\n  { x: 0.09375, y: 0.34375 },\n  { x: 0.15625, y: 0.34375 },\n  { x: 0.15625, y: 0.34375 },\n  { x: 0.21875, y: 0.34375 },\n  { x: 0.21875, y: 0.34375 },\n  { x: 0.28125, y: 0.34375 },\n  { x: 0.28125, y: 0.34375 },\n  { x: 0.34375, y: 0.34375 },\n  { x: 0.34375, y: 0.34375 },\n  { x: 0.40625, y: 0.34375 },\n  { x: 0.40625, y: 0.34375 },\n  { x: 0.46875, y: 0.34375 },\n  { x: 0.46875, y: 0.34375 },\n  { x: 0.53125, y: 0.34375 },\n  { x: 0.53125, y: 0.34375 },\n  { x: 0.59375, y: 0.34375 },\n  { x: 0.59375, y: 0.34375 },\n  { x: 0.65625, y: 0.34375 },\n  { x: 0.65625, y: 0.34375 },\n  { x: 0.71875, y: 0.34375 },\n  { x: 0.71875, y: 0.34375 },\n  { x: 0.78125, y: 0.34375 },\n  { x: 0.78125, y: 0.34375 },\n  { x: 0.84375, y: 0.34375 },\n  { x: 0.84375, y: 0.34375 },\n  { x: 0.90625, y: 0.34375 },\n  { x: 0.90625, y: 0.34375 },\n  { x: 0.96875, y: 0.34375 },\n  { x: 0.96875, y: 0.34375 },\n  { x: 0.03125, y: 0.40625 },\n  { x: 0.03125, y: 0.40625 },\n  { x: 0.09375, y: 0.40625 },\n  { x: 0.09375, y: 0.40625 },\n  { x: 0.15625, y: 0.40625 },\n  { x: 0.15625, y: 0.40625 },\n  { x: 0.21875, y: 0.40625 },\n  { x: 0.21875, y: 0.40625 },\n  { x: 0.28125, y: 0.40625 },\n  { x: 0.28125, y: 0.40625 },\n  { x: 0.34375, y: 0.40625 },\n  { x: 0.34375, y: 0.40625 },\n  { x: 0.40625, y: 0.40625 },\n  { x: 0.40625, y: 0.40625 },\n  { x: 0.46875, y: 0.40625 },\n  { x: 0.46875, y: 0.40625 },\n  { x: 0.53125, y: 0.40625 },\n  { x: 0.53125, y: 0.40625 },\n  { x: 0.59375, y: 0.40625 },\n  { x: 0.59375, y: 0.40625 },\n  { x: 0.65625, y: 0.40625 },\n  { x: 0.65625, y: 0.40625 },\n  { x: 0.71875, y: 0.40625 },\n  { x: 0.71875, y: 0.40625 },\n  { x: 0.78125, y: 0.40625 },\n  { x: 0.78125, y: 0.40625 },\n  { x: 0.84375, y: 0.40625 },\n  { x: 0.84375, y: 0.40625 },\n  { x: 0.90625, y: 0.40625 },\n  { x: 0.90625, y: 0.40625 },\n  { x: 0.96875, y: 0.40625 },\n  { x: 0.96875, y: 0.40625 },\n  { x: 0.03125, y: 0.46875 },\n  { x: 0.03125, y: 0.46875 },\n  { x: 0.09375, y: 0.46875 },\n  { x: 0.09375, y: 0.46875 },\n  { x: 0.15625, y: 0.46875 },\n  { x: 0.15625, y: 0.46875 },\n  { x: 0.21875, y: 0.46875 },\n  { x: 0.21875, y: 0.46875 },\n  { x: 0.28125, y: 0.46875 },\n  { x: 0.28125, y: 0.46875 },\n  { x: 0.34375, y: 0.46875 },\n  { x: 0.34375, y: 0.46875 },\n  { x: 0.40625, y: 0.46875 },\n  { x: 0.40625, y: 0.46875 },\n  { x: 0.46875, y: 0.46875 },\n  { x: 0.46875, y: 0.46875 },\n  { x: 0.53125, y: 0.46875 },\n  { x: 0.53125, y: 0.46875 },\n  { x: 0.59375, y: 0.46875 },\n  { x: 0.59375, y: 0.46875 },\n  { x: 0.65625, y: 0.46875 },\n  { x: 0.65625, y: 0.46875 },\n  { x: 0.71875, y: 0.46875 },\n  { x: 0.71875, y: 0.46875 },\n  { x: 0.78125, y: 0.46875 },\n  { x: 0.78125, y: 0.46875 },\n  { x: 0.84375, y: 0.46875 },\n  { x: 0.84375, y: 0.46875 },\n  { x: 0.90625, y: 0.46875 },\n  { x: 0.90625, y: 0.46875 },\n  { x: 0.96875, y: 0.46875 },\n  { x: 0.96875, y: 0.46875 },\n  { x: 0.03125, y: 0.53125 },\n  { x: 0.03125, y: 0.53125 },\n  { x: 0.09375, y: 0.53125 },\n  { x: 0.09375, y: 0.53125 },\n  { x: 0.15625, y: 0.53125 },\n  { x: 0.15625, y: 0.53125 },\n  { x: 0.21875, y: 0.53125 },\n  { x: 0.21875, y: 0.53125 },\n  { x: 0.28125, y: 0.53125 },\n  { x: 0.28125, y: 0.53125 },\n  { x: 0.34375, y: 0.53125 },\n  { x: 0.34375, y: 0.53125 },\n  { x: 0.40625, y: 0.53125 },\n  { x: 0.40625, y: 0.53125 },\n  { x: 0.46875, y: 0.53125 },\n  { x: 0.46875, y: 0.53125 },\n  { x: 0.53125, y: 0.53125 },\n  { x: 0.53125, y: 0.53125 },\n  { x: 0.59375, y: 0.53125 },\n  { x: 0.59375, y: 0.53125 },\n  { x: 0.65625, y: 0.53125 },\n  { x: 0.65625, y: 0.53125 },\n  { x: 0.71875, y: 0.53125 },\n  { x: 0.71875, y: 0.53125 },\n  { x: 0.78125, y: 0.53125 },\n  { x: 0.78125, y: 0.53125 },\n  { x: 0.84375, y: 0.53125 },\n  { x: 0.84375, y: 0.53125 },\n  { x: 0.90625, y: 0.53125 },\n  { x: 0.90625, y: 0.53125 },\n  { x: 0.96875, y: 0.53125 },\n  { x: 0.96875, y: 0.53125 },\n  { x: 0.03125, y: 0.59375 },\n  { x: 0.03125, y: 0.59375 },\n  { x: 0.09375, y: 0.59375 },\n  { x: 0.09375, y: 0.59375 },\n  { x: 0.15625, y: 0.59375 },\n  { x: 0.15625, y: 0.59375 },\n  { x: 0.21875, y: 0.59375 },\n  { x: 0.21875, y: 0.59375 },\n  { x: 0.28125, y: 0.59375 },\n  { x: 0.28125, y: 0.59375 },\n  { x: 0.34375, y: 0.59375 },\n  { x: 0.34375, y: 0.59375 },\n  { x: 0.40625, y: 0.59375 },\n  { x: 0.40625, y: 0.59375 },\n  { x: 0.46875, y: 0.59375 },\n  { x: 0.46875, y: 0.59375 },\n  { x: 0.53125, y: 0.59375 },\n  { x: 0.53125, y: 0.59375 },\n  { x: 0.59375, y: 0.59375 },\n  { x: 0.59375, y: 0.59375 },\n  { x: 0.65625, y: 0.59375 },\n  { x: 0.65625, y: 0.59375 },\n  { x: 0.71875, y: 0.59375 },\n  { x: 0.71875, y: 0.59375 },\n  { x: 0.78125, y: 0.59375 },\n  { x: 0.78125, y: 0.59375 },\n  { x: 0.84375, y: 0.59375 },\n  { x: 0.84375, y: 0.59375 },\n  { x: 0.90625, y: 0.59375 },\n  { x: 0.90625, y: 0.59375 },\n  { x: 0.96875, y: 0.59375 },\n  { x: 0.96875, y: 0.59375 },\n  { x: 0.03125, y: 0.65625 },\n  { x: 0.03125, y: 0.65625 },\n  { x: 0.09375, y: 0.65625 },\n  { x: 0.09375, y: 0.65625 },\n  { x: 0.15625, y: 0.65625 },\n  { x: 0.15625, y: 0.65625 },\n  { x: 0.21875, y: 0.65625 },\n  { x: 0.21875, y: 0.65625 },\n  { x: 0.28125, y: 0.65625 },\n  { x: 0.28125, y: 0.65625 },\n  { x: 0.34375, y: 0.65625 },\n  { x: 0.34375, y: 0.65625 },\n  { x: 0.40625, y: 0.65625 },\n  { x: 0.40625, y: 0.65625 },\n  { x: 0.46875, y: 0.65625 },\n  { x: 0.46875, y: 0.65625 },\n  { x: 0.53125, y: 0.65625 },\n  { x: 0.53125, y: 0.65625 },\n  { x: 0.59375, y: 0.65625 },\n  { x: 0.59375, y: 0.65625 },\n  { x: 0.65625, y: 0.65625 },\n  { x: 0.65625, y: 0.65625 },\n  { x: 0.71875, y: 0.65625 },\n  { x: 0.71875, y: 0.65625 },\n  { x: 0.78125, y: 0.65625 },\n  { x: 0.78125, y: 0.65625 },\n  { x: 0.84375, y: 0.65625 },\n  { x: 0.84375, y: 0.65625 },\n  { x: 0.90625, y: 0.65625 },\n  { x: 0.90625, y: 0.65625 },\n  { x: 0.96875, y: 0.65625 },\n  { x: 0.96875, y: 0.65625 },\n  { x: 0.03125, y: 0.71875 },\n  { x: 0.03125, y: 0.71875 },\n  { x: 0.09375, y: 0.71875 },\n  { x: 0.09375, y: 0.71875 },\n  { x: 0.15625, y: 0.71875 },\n  { x: 0.15625, y: 0.71875 },\n  { x: 0.21875, y: 0.71875 },\n  { x: 0.21875, y: 0.71875 },\n  { x: 0.28125, y: 0.71875 },\n  { x: 0.28125, y: 0.71875 },\n  { x: 0.34375, y: 0.71875 },\n  { x: 0.34375, y: 0.71875 },\n  { x: 0.40625, y: 0.71875 },\n  { x: 0.40625, y: 0.71875 },\n  { x: 0.46875, y: 0.71875 },\n  { x: 0.46875, y: 0.71875 },\n  { x: 0.53125, y: 0.71875 },\n  { x: 0.53125, y: 0.71875 },\n  { x: 0.59375, y: 0.71875 },\n  { x: 0.59375, y: 0.71875 },\n  { x: 0.65625, y: 0.71875 },\n  { x: 0.65625, y: 0.71875 },\n  { x: 0.71875, y: 0.71875 },\n  { x: 0.71875, y: 0.71875 },\n  { x: 0.78125, y: 0.71875 },\n  { x: 0.78125, y: 0.71875 },\n  { x: 0.84375, y: 0.71875 },\n  { x: 0.84375, y: 0.71875 },\n  { x: 0.90625, y: 0.71875 },\n  { x: 0.90625, y: 0.71875 },\n  { x: 0.96875, y: 0.71875 },\n  { x: 0.96875, y: 0.71875 },\n  { x: 0.03125, y: 0.78125 },\n  { x: 0.03125, y: 0.78125 },\n  { x: 0.09375, y: 0.78125 },\n  { x: 0.09375, y: 0.78125 },\n  { x: 0.15625, y: 0.78125 },\n  { x: 0.15625, y: 0.78125 },\n  { x: 0.21875, y: 0.78125 },\n  { x: 0.21875, y: 0.78125 },\n  { x: 0.28125, y: 0.78125 },\n  { x: 0.28125, y: 0.78125 },\n  { x: 0.34375, y: 0.78125 },\n  { x: 0.34375, y: 0.78125 },\n  { x: 0.40625, y: 0.78125 },\n  { x: 0.40625, y: 0.78125 },\n  { x: 0.46875, y: 0.78125 },\n  { x: 0.46875, y: 0.78125 },\n  { x: 0.53125, y: 0.78125 },\n  { x: 0.53125, y: 0.78125 },\n  { x: 0.59375, y: 0.78125 },\n  { x: 0.59375, y: 0.78125 },\n  { x: 0.65625, y: 0.78125 },\n  { x: 0.65625, y: 0.78125 },\n  { x: 0.71875, y: 0.78125 },\n  { x: 0.71875, y: 0.78125 },\n  { x: 0.78125, y: 0.78125 },\n  { x: 0.78125, y: 0.78125 },\n  { x: 0.84375, y: 0.78125 },\n  { x: 0.84375, y: 0.78125 },\n  { x: 0.90625, y: 0.78125 },\n  { x: 0.90625, y: 0.78125 },\n  { x: 0.96875, y: 0.78125 },\n  { x: 0.96875, y: 0.78125 },\n  { x: 0.03125, y: 0.84375 },\n  { x: 0.03125, y: 0.84375 },\n  { x: 0.09375, y: 0.84375 },\n  { x: 0.09375, y: 0.84375 },\n  { x: 0.15625, y: 0.84375 },\n  { x: 0.15625, y: 0.84375 },\n  { x: 0.21875, y: 0.84375 },\n  { x: 0.21875, y: 0.84375 },\n  { x: 0.28125, y: 0.84375 },\n  { x: 0.28125, y: 0.84375 },\n  { x: 0.34375, y: 0.84375 },\n  { x: 0.34375, y: 0.84375 },\n  { x: 0.40625, y: 0.84375 },\n  { x: 0.40625, y: 0.84375 },\n  { x: 0.46875, y: 0.84375 },\n  { x: 0.46875, y: 0.84375 },\n  { x: 0.53125, y: 0.84375 },\n  { x: 0.53125, y: 0.84375 },\n  { x: 0.59375, y: 0.84375 },\n  { x: 0.59375, y: 0.84375 },\n  { x: 0.65625, y: 0.84375 },\n  { x: 0.65625, y: 0.84375 },\n  { x: 0.71875, y: 0.84375 },\n  { x: 0.71875, y: 0.84375 },\n  { x: 0.78125, y: 0.84375 },\n  { x: 0.78125, y: 0.84375 },\n  { x: 0.84375, y: 0.84375 },\n  { x: 0.84375, y: 0.84375 },\n  { x: 0.90625, y: 0.84375 },\n  { x: 0.90625, y: 0.84375 },\n  { x: 0.96875, y: 0.84375 },\n  { x: 0.96875, y: 0.84375 },\n  { x: 0.03125, y: 0.90625 },\n  { x: 0.03125, y: 0.90625 },\n  { x: 0.09375, y: 0.90625 },\n  { x: 0.09375, y: 0.90625 },\n  { x: 0.15625, y: 0.90625 },\n  { x: 0.15625, y: 0.90625 },\n  { x: 0.21875, y: 0.90625 },\n  { x: 0.21875, y: 0.90625 },\n  { x: 0.28125, y: 0.90625 },\n  { x: 0.28125, y: 0.90625 },\n  { x: 0.34375, y: 0.90625 },\n  { x: 0.34375, y: 0.90625 },\n  { x: 0.40625, y: 0.90625 },\n  { x: 0.40625, y: 0.90625 },\n  { x: 0.46875, y: 0.90625 },\n  { x: 0.46875, y: 0.90625 },\n  { x: 0.53125, y: 0.90625 },\n  { x: 0.53125, y: 0.90625 },\n  { x: 0.59375, y: 0.90625 },\n  { x: 0.59375, y: 0.90625 },\n  { x: 0.65625, y: 0.90625 },\n  { x: 0.65625, y: 0.90625 },\n  { x: 0.71875, y: 0.90625 },\n  { x: 0.71875, y: 0.90625 },\n  { x: 0.78125, y: 0.90625 },\n  { x: 0.78125, y: 0.90625 },\n  { x: 0.84375, y: 0.90625 },\n  { x: 0.84375, y: 0.90625 },\n  { x: 0.90625, y: 0.90625 },\n  { x: 0.90625, y: 0.90625 },\n  { x: 0.96875, y: 0.90625 },\n  { x: 0.96875, y: 0.90625 },\n  { x: 0.03125, y: 0.96875 },\n  { x: 0.03125, y: 0.96875 },\n  { x: 0.09375, y: 0.96875 },\n  { x: 0.09375, y: 0.96875 },\n  { x: 0.15625, y: 0.96875 },\n  { x: 0.15625, y: 0.96875 },\n  { x: 0.21875, y: 0.96875 },\n  { x: 0.21875, y: 0.96875 },\n  { x: 0.28125, y: 0.96875 },\n  { x: 0.28125, y: 0.96875 },\n  { x: 0.34375, y: 0.96875 },\n  { x: 0.34375, y: 0.96875 },\n  { x: 0.40625, y: 0.96875 },\n  { x: 0.40625, y: 0.96875 },\n  { x: 0.46875, y: 0.96875 },\n  { x: 0.46875, y: 0.96875 },\n  { x: 0.53125, y: 0.96875 },\n  { x: 0.53125, y: 0.96875 },\n  { x: 0.59375, y: 0.96875 },\n  { x: 0.59375, y: 0.96875 },\n  { x: 0.65625, y: 0.96875 },\n  { x: 0.65625, y: 0.96875 },\n  { x: 0.71875, y: 0.96875 },\n  { x: 0.71875, y: 0.96875 },\n  { x: 0.78125, y: 0.96875 },\n  { x: 0.78125, y: 0.96875 },\n  { x: 0.84375, y: 0.96875 },\n  { x: 0.84375, y: 0.96875 },\n  { x: 0.90625, y: 0.96875 },\n  { x: 0.90625, y: 0.96875 },\n  { x: 0.96875, y: 0.96875 },\n  { x: 0.96875, y: 0.96875 },\n  { x: 0.0625, y: 0.0625 },\n  { x: 0.0625, y: 0.0625 },\n  { x: 0.0625, y: 0.0625 },\n  { x: 0.0625, y: 0.0625 },\n  { x: 0.0625, y: 0.0625 },\n  { x: 0.0625, y: 0.0625 },\n  { x: 0.1875, y: 0.0625 },\n  { x: 0.1875, y: 0.0625 },\n  { x: 0.1875, y: 0.0625 },\n  { x: 0.1875, y: 0.0625 },\n  { x: 0.1875, y: 0.0625 },\n  { x: 0.1875, y: 0.0625 },\n  { x: 0.3125, y: 0.0625 },\n  { x: 0.3125, y: 0.0625 },\n  { x: 0.3125, y: 0.0625 },\n  { x: 0.3125, y: 0.0625 },\n  { x: 0.3125, y: 0.0625 },\n  { x: 0.3125, y: 0.0625 },\n  { x: 0.4375, y: 0.0625 },\n  { x: 0.4375, y: 0.0625 },\n  { x: 0.4375, y: 0.0625 },\n  { x: 0.4375, y: 0.0625 },\n  { x: 0.4375, y: 0.0625 },\n  { x: 0.4375, y: 0.0625 },\n  { x: 0.5625, y: 0.0625 },\n  { x: 0.5625, y: 0.0625 },\n  { x: 0.5625, y: 0.0625 },\n  { x: 0.5625, y: 0.0625 },\n  { x: 0.5625, y: 0.0625 },\n  { x: 0.5625, y: 0.0625 },\n  { x: 0.6875, y: 0.0625 },\n  { x: 0.6875, y: 0.0625 },\n  { x: 0.6875, y: 0.0625 },\n  { x: 0.6875, y: 0.0625 },\n  { x: 0.6875, y: 0.0625 },\n  { x: 0.6875, y: 0.0625 },\n  { x: 0.8125, y: 0.0625 },\n  { x: 0.8125, y: 0.0625 },\n  { x: 0.8125, y: 0.0625 },\n  { x: 0.8125, y: 0.0625 },\n  { x: 0.8125, y: 0.0625 },\n  { x: 0.8125, y: 0.0625 },\n  { x: 0.9375, y: 0.0625 },\n  { x: 0.9375, y: 0.0625 },\n  { x: 0.9375, y: 0.0625 },\n  { x: 0.9375, y: 0.0625 },\n  { x: 0.9375, y: 0.0625 },\n  { x: 0.9375, y: 0.0625 },\n  { x: 0.0625, y: 0.1875 },\n  { x: 0.0625, y: 0.1875 },\n  { x: 0.0625, y: 0.1875 },\n  { x: 0.0625, y: 0.1875 },\n  { x: 0.0625, y: 0.1875 },\n  { x: 0.0625, y: 0.1875 },\n  { x: 0.1875, y: 0.1875 },\n  { x: 0.1875, y: 0.1875 },\n  { x: 0.1875, y: 0.1875 },\n  { x: 0.1875, y: 0.1875 },\n  { x: 0.1875, y: 0.1875 },\n  { x: 0.1875, y: 0.1875 },\n  { x: 0.3125, y: 0.1875 },\n  { x: 0.3125, y: 0.1875 },\n  { x: 0.3125, y: 0.1875 },\n  { x: 0.3125, y: 0.1875 },\n  { x: 0.3125, y: 0.1875 },\n  { x: 0.3125, y: 0.1875 },\n  { x: 0.4375, y: 0.1875 },\n  { x: 0.4375, y: 0.1875 },\n  { x: 0.4375, y: 0.1875 },\n  { x: 0.4375, y: 0.1875 },\n  { x: 0.4375, y: 0.1875 },\n  { x: 0.4375, y: 0.1875 },\n  { x: 0.5625, y: 0.1875 },\n  { x: 0.5625, y: 0.1875 },\n  { x: 0.5625, y: 0.1875 },\n  { x: 0.5625, y: 0.1875 },\n  { x: 0.5625, y: 0.1875 },\n  { x: 0.5625, y: 0.1875 },\n  { x: 0.6875, y: 0.1875 },\n  { x: 0.6875, y: 0.1875 },\n  { x: 0.6875, y: 0.1875 },\n  { x: 0.6875, y: 0.1875 },\n  { x: 0.6875, y: 0.1875 },\n  { x: 0.6875, y: 0.1875 },\n  { x: 0.8125, y: 0.1875 },\n  { x: 0.8125, y: 0.1875 },\n  { x: 0.8125, y: 0.1875 },\n  { x: 0.8125, y: 0.1875 },\n  { x: 0.8125, y: 0.1875 },\n  { x: 0.8125, y: 0.1875 },\n  { x: 0.9375, y: 0.1875 },\n  { x: 0.9375, y: 0.1875 },\n  { x: 0.9375, y: 0.1875 },\n  { x: 0.9375, y: 0.1875 },\n  { x: 0.9375, y: 0.1875 },\n  { x: 0.9375, y: 0.1875 },\n  { x: 0.0625, y: 0.3125 },\n  { x: 0.0625, y: 0.3125 },\n  { x: 0.0625, y: 0.3125 },\n  { x: 0.0625, y: 0.3125 },\n  { x: 0.0625, y: 0.3125 },\n  { x: 0.0625, y: 0.3125 },\n  { x: 0.1875, y: 0.3125 },\n  { x: 0.1875, y: 0.3125 },\n  { x: 0.1875, y: 0.3125 },\n  { x: 0.1875, y: 0.3125 },\n  { x: 0.1875, y: 0.3125 },\n  { x: 0.1875, y: 0.3125 },\n  { x: 0.3125, y: 0.3125 },\n  { x: 0.3125, y: 0.3125 },\n  { x: 0.3125, y: 0.3125 },\n  { x: 0.3125, y: 0.3125 },\n  { x: 0.3125, y: 0.3125 },\n  { x: 0.3125, y: 0.3125 },\n  { x: 0.4375, y: 0.3125 },\n  { x: 0.4375, y: 0.3125 },\n  { x: 0.4375, y: 0.3125 },\n  { x: 0.4375, y: 0.3125 },\n  { x: 0.4375, y: 0.3125 },\n  { x: 0.4375, y: 0.3125 },\n  { x: 0.5625, y: 0.3125 },\n  { x: 0.5625, y: 0.3125 },\n  { x: 0.5625, y: 0.3125 },\n  { x: 0.5625, y: 0.3125 },\n  { x: 0.5625, y: 0.3125 },\n  { x: 0.5625, y: 0.3125 },\n  { x: 0.6875, y: 0.3125 },\n  { x: 0.6875, y: 0.3125 },\n  { x: 0.6875, y: 0.3125 },\n  { x: 0.6875, y: 0.3125 },\n  { x: 0.6875, y: 0.3125 },\n  { x: 0.6875, y: 0.3125 },\n  { x: 0.8125, y: 0.3125 },\n  { x: 0.8125, y: 0.3125 },\n  { x: 0.8125, y: 0.3125 },\n  { x: 0.8125, y: 0.3125 },\n  { x: 0.8125, y: 0.3125 },\n  { x: 0.8125, y: 0.3125 },\n  { x: 0.9375, y: 0.3125 },\n  { x: 0.9375, y: 0.3125 },\n  { x: 0.9375, y: 0.3125 },\n  { x: 0.9375, y: 0.3125 },\n  { x: 0.9375, y: 0.3125 },\n  { x: 0.9375, y: 0.3125 },\n  { x: 0.0625, y: 0.4375 },\n  { x: 0.0625, y: 0.4375 },\n  { x: 0.0625, y: 0.4375 },\n  { x: 0.0625, y: 0.4375 },\n  { x: 0.0625, y: 0.4375 },\n  { x: 0.0625, y: 0.4375 },\n  { x: 0.1875, y: 0.4375 },\n  { x: 0.1875, y: 0.4375 },\n  { x: 0.1875, y: 0.4375 },\n  { x: 0.1875, y: 0.4375 },\n  { x: 0.1875, y: 0.4375 },\n  { x: 0.1875, y: 0.4375 },\n  { x: 0.3125, y: 0.4375 },\n  { x: 0.3125, y: 0.4375 },\n  { x: 0.3125, y: 0.4375 },\n  { x: 0.3125, y: 0.4375 },\n  { x: 0.3125, y: 0.4375 },\n  { x: 0.3125, y: 0.4375 },\n  { x: 0.4375, y: 0.4375 },\n  { x: 0.4375, y: 0.4375 },\n  { x: 0.4375, y: 0.4375 },\n  { x: 0.4375, y: 0.4375 },\n  { x: 0.4375, y: 0.4375 },\n  { x: 0.4375, y: 0.4375 },\n  { x: 0.5625, y: 0.4375 },\n  { x: 0.5625, y: 0.4375 },\n  { x: 0.5625, y: 0.4375 },\n  { x: 0.5625, y: 0.4375 },\n  { x: 0.5625, y: 0.4375 },\n  { x: 0.5625, y: 0.4375 },\n  { x: 0.6875, y: 0.4375 },\n  { x: 0.6875, y: 0.4375 },\n  { x: 0.6875, y: 0.4375 },\n  { x: 0.6875, y: 0.4375 },\n  { x: 0.6875, y: 0.4375 },\n  { x: 0.6875, y: 0.4375 },\n  { x: 0.8125, y: 0.4375 },\n  { x: 0.8125, y: 0.4375 },\n  { x: 0.8125, y: 0.4375 },\n  { x: 0.8125, y: 0.4375 },\n  { x: 0.8125, y: 0.4375 },\n  { x: 0.8125, y: 0.4375 },\n  { x: 0.9375, y: 0.4375 },\n  { x: 0.9375, y: 0.4375 },\n  { x: 0.9375, y: 0.4375 },\n  { x: 0.9375, y: 0.4375 },\n  { x: 0.9375, y: 0.4375 },\n  { x: 0.9375, y: 0.4375 },\n  { x: 0.0625, y: 0.5625 },\n  { x: 0.0625, y: 0.5625 },\n  { x: 0.0625, y: 0.5625 },\n  { x: 0.0625, y: 0.5625 },\n  { x: 0.0625, y: 0.5625 },\n  { x: 0.0625, y: 0.5625 },\n  { x: 0.1875, y: 0.5625 },\n  { x: 0.1875, y: 0.5625 },\n  { x: 0.1875, y: 0.5625 },\n  { x: 0.1875, y: 0.5625 },\n  { x: 0.1875, y: 0.5625 },\n  { x: 0.1875, y: 0.5625 },\n  { x: 0.3125, y: 0.5625 },\n  { x: 0.3125, y: 0.5625 },\n  { x: 0.3125, y: 0.5625 },\n  { x: 0.3125, y: 0.5625 },\n  { x: 0.3125, y: 0.5625 },\n  { x: 0.3125, y: 0.5625 },\n  { x: 0.4375, y: 0.5625 },\n  { x: 0.4375, y: 0.5625 },\n  { x: 0.4375, y: 0.5625 },\n  { x: 0.4375, y: 0.5625 },\n  { x: 0.4375, y: 0.5625 },\n  { x: 0.4375, y: 0.5625 },\n  { x: 0.5625, y: 0.5625 },\n  { x: 0.5625, y: 0.5625 },\n  { x: 0.5625, y: 0.5625 },\n  { x: 0.5625, y: 0.5625 },\n  { x: 0.5625, y: 0.5625 },\n  { x: 0.5625, y: 0.5625 },\n  { x: 0.6875, y: 0.5625 },\n  { x: 0.6875, y: 0.5625 },\n  { x: 0.6875, y: 0.5625 },\n  { x: 0.6875, y: 0.5625 },\n  { x: 0.6875, y: 0.5625 },\n  { x: 0.6875, y: 0.5625 },\n  { x: 0.8125, y: 0.5625 },\n  { x: 0.8125, y: 0.5625 },\n  { x: 0.8125, y: 0.5625 },\n  { x: 0.8125, y: 0.5625 },\n  { x: 0.8125, y: 0.5625 },\n  { x: 0.8125, y: 0.5625 },\n  { x: 0.9375, y: 0.5625 },\n  { x: 0.9375, y: 0.5625 },\n  { x: 0.9375, y: 0.5625 },\n  { x: 0.9375, y: 0.5625 },\n  { x: 0.9375, y: 0.5625 },\n  { x: 0.9375, y: 0.5625 },\n  { x: 0.0625, y: 0.6875 },\n  { x: 0.0625, y: 0.6875 },\n  { x: 0.0625, y: 0.6875 },\n  { x: 0.0625, y: 0.6875 },\n  { x: 0.0625, y: 0.6875 },\n  { x: 0.0625, y: 0.6875 },\n  { x: 0.1875, y: 0.6875 },\n  { x: 0.1875, y: 0.6875 },\n  { x: 0.1875, y: 0.6875 },\n  { x: 0.1875, y: 0.6875 },\n  { x: 0.1875, y: 0.6875 },\n  { x: 0.1875, y: 0.6875 },\n  { x: 0.3125, y: 0.6875 },\n  { x: 0.3125, y: 0.6875 },\n  { x: 0.3125, y: 0.6875 },\n  { x: 0.3125, y: 0.6875 },\n  { x: 0.3125, y: 0.6875 },\n  { x: 0.3125, y: 0.6875 },\n  { x: 0.4375, y: 0.6875 },\n  { x: 0.4375, y: 0.6875 },\n  { x: 0.4375, y: 0.6875 },\n  { x: 0.4375, y: 0.6875 },\n  { x: 0.4375, y: 0.6875 },\n  { x: 0.4375, y: 0.6875 },\n  { x: 0.5625, y: 0.6875 },\n  { x: 0.5625, y: 0.6875 },\n  { x: 0.5625, y: 0.6875 },\n  { x: 0.5625, y: 0.6875 },\n  { x: 0.5625, y: 0.6875 },\n  { x: 0.5625, y: 0.6875 },\n  { x: 0.6875, y: 0.6875 },\n  { x: 0.6875, y: 0.6875 },\n  { x: 0.6875, y: 0.6875 },\n  { x: 0.6875, y: 0.6875 },\n  { x: 0.6875, y: 0.6875 },\n  { x: 0.6875, y: 0.6875 },\n  { x: 0.8125, y: 0.6875 },\n  { x: 0.8125, y: 0.6875 },\n  { x: 0.8125, y: 0.6875 },\n  { x: 0.8125, y: 0.6875 },\n  { x: 0.8125, y: 0.6875 },\n  { x: 0.8125, y: 0.6875 },\n  { x: 0.9375, y: 0.6875 },\n  { x: 0.9375, y: 0.6875 },\n  { x: 0.9375, y: 0.6875 },\n  { x: 0.9375, y: 0.6875 },\n  { x: 0.9375, y: 0.6875 },\n  { x: 0.9375, y: 0.6875 },\n  { x: 0.0625, y: 0.8125 },\n  { x: 0.0625, y: 0.8125 },\n  { x: 0.0625, y: 0.8125 },\n  { x: 0.0625, y: 0.8125 },\n  { x: 0.0625, y: 0.8125 },\n  { x: 0.0625, y: 0.8125 },\n  { x: 0.1875, y: 0.8125 },\n  { x: 0.1875, y: 0.8125 },\n  { x: 0.1875, y: 0.8125 },\n  { x: 0.1875, y: 0.8125 },\n  { x: 0.1875, y: 0.8125 },\n  { x: 0.1875, y: 0.8125 },\n  { x: 0.3125, y: 0.8125 },\n  { x: 0.3125, y: 0.8125 },\n  { x: 0.3125, y: 0.8125 },\n  { x: 0.3125, y: 0.8125 },\n  { x: 0.3125, y: 0.8125 },\n  { x: 0.3125, y: 0.8125 },\n  { x: 0.4375, y: 0.8125 },\n  { x: 0.4375, y: 0.8125 },\n  { x: 0.4375, y: 0.8125 },\n  { x: 0.4375, y: 0.8125 },\n  { x: 0.4375, y: 0.8125 },\n  { x: 0.4375, y: 0.8125 },\n  { x: 0.5625, y: 0.8125 },\n  { x: 0.5625, y: 0.8125 },\n  { x: 0.5625, y: 0.8125 },\n  { x: 0.5625, y: 0.8125 },\n  { x: 0.5625, y: 0.8125 },\n  { x: 0.5625, y: 0.8125 },\n  { x: 0.6875, y: 0.8125 },\n  { x: 0.6875, y: 0.8125 },\n  { x: 0.6875, y: 0.8125 },\n  { x: 0.6875, y: 0.8125 },\n  { x: 0.6875, y: 0.8125 },\n  { x: 0.6875, y: 0.8125 },\n  { x: 0.8125, y: 0.8125 },\n  { x: 0.8125, y: 0.8125 },\n  { x: 0.8125, y: 0.8125 },\n  { x: 0.8125, y: 0.8125 },\n  { x: 0.8125, y: 0.8125 },\n  { x: 0.8125, y: 0.8125 },\n  { x: 0.9375, y: 0.8125 },\n  { x: 0.9375, y: 0.8125 },\n  { x: 0.9375, y: 0.8125 },\n  { x: 0.9375, y: 0.8125 },\n  { x: 0.9375, y: 0.8125 },\n  { x: 0.9375, y: 0.8125 },\n  { x: 0.0625, y: 0.9375 },\n  { x: 0.0625, y: 0.9375 },\n  { x: 0.0625, y: 0.9375 },\n  { x: 0.0625, y: 0.9375 },\n  { x: 0.0625, y: 0.9375 },\n  { x: 0.0625, y: 0.9375 },\n  { x: 0.1875, y: 0.9375 },\n  { x: 0.1875, y: 0.9375 },\n  { x: 0.1875, y: 0.9375 },\n  { x: 0.1875, y: 0.9375 },\n  { x: 0.1875, y: 0.9375 },\n  { x: 0.1875, y: 0.9375 },\n  { x: 0.3125, y: 0.9375 },\n  { x: 0.3125, y: 0.9375 },\n  { x: 0.3125, y: 0.9375 },\n  { x: 0.3125, y: 0.9375 },\n  { x: 0.3125, y: 0.9375 },\n  { x: 0.3125, y: 0.9375 },\n  { x: 0.4375, y: 0.9375 },\n  { x: 0.4375, y: 0.9375 },\n  { x: 0.4375, y: 0.9375 },\n  { x: 0.4375, y: 0.9375 },\n  { x: 0.4375, y: 0.9375 },\n  { x: 0.4375, y: 0.9375 },\n  { x: 0.5625, y: 0.9375 },\n  { x: 0.5625, y: 0.9375 },\n  { x: 0.5625, y: 0.9375 },\n  { x: 0.5625, y: 0.9375 },\n  { x: 0.5625, y: 0.9375 },\n  { x: 0.5625, y: 0.9375 },\n  { x: 0.6875, y: 0.9375 },\n  { x: 0.6875, y: 0.9375 },\n  { x: 0.6875, y: 0.9375 },\n  { x: 0.6875, y: 0.9375 },\n  { x: 0.6875, y: 0.9375 },\n  { x: 0.6875, y: 0.9375 },\n  { x: 0.8125, y: 0.9375 },\n  { x: 0.8125, y: 0.9375 },\n  { x: 0.8125, y: 0.9375 },\n  { x: 0.8125, y: 0.9375 },\n  { x: 0.8125, y: 0.9375 },\n  { x: 0.8125, y: 0.9375 },\n  { x: 0.9375, y: 0.9375 },\n  { x: 0.9375, y: 0.9375 },\n  { x: 0.9375, y: 0.9375 },\n  { x: 0.9375, y: 0.9375 },\n  { x: 0.9375, y: 0.9375 },\n  { x: 0.9375, y: 0.9375 },\n];\n", "/**\n * HandPose model implementation\n * See `handpose.ts` for entry point\n */\n\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as util from './handposeutil';\nimport * as anchors from './handposeanchors';\nimport { constants } from '../tfjs/constants';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport type { Point } from '../result';\n\nexport class HandDetector {\n  model: GraphModel;\n  anchors: number[][];\n  anchorsTensor: Tensor;\n  inputSize: number;\n  inputSizeTensor: Tensor;\n  doubleInputSizeTensor: Tensor;\n\n  constructor(model) {\n    this.model = model;\n    this.anchors = anchors.anchors.map((anchor) => [anchor.x, anchor.y]);\n    this.anchorsTensor = tf.tensor2d(this.anchors);\n    this.inputSize = (this.model && this.model.inputs && this.model.inputs[0].shape) ? this.model.inputs[0].shape[2] : 0;\n    this.inputSizeTensor = tf.tensor1d([this.inputSize, this.inputSize]);\n    this.doubleInputSizeTensor = tf.tensor1d([this.inputSize * 2, this.inputSize * 2]);\n  }\n\n  normalizeBoxes(boxes) {\n    const t: Record<string, Tensor> = {};\n    t.boxOffsets = tf.slice(boxes, [0, 0], [-1, 2]);\n    t.boxSizes = tf.slice(boxes, [0, 2], [-1, 2]);\n    t.div = tf.div(t.boxOffsets, this.inputSizeTensor);\n    t.boxCenterPoints = tf.add(t.div, this.anchorsTensor);\n    t.halfBoxSizes = tf.div(t.boxSizes, this.doubleInputSizeTensor);\n    t.sub = tf.sub(t.boxCenterPoints, t.halfBoxSizes);\n    t.startPoints = tf.mul(t.sub, this.inputSizeTensor);\n    t.add = tf.add(t.boxCenterPoints, t.halfBoxSizes);\n    t.endPoints = tf.mul(t.add, this.inputSizeTensor);\n    const res = tf.concat2d([t.startPoints, t.endPoints], 1);\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    return res;\n  }\n\n  normalizeLandmarks(rawPalmLandmarks, index) {\n    const t: Record<string, Tensor> = {};\n    t.reshape = tf.reshape(rawPalmLandmarks, [-1, 7, 2]);\n    t.div = tf.div(t.reshape, this.inputSizeTensor);\n    t.landmarks = tf.add(t.div, this.anchors[index]);\n    const res = tf.mul(t.landmarks, this.inputSizeTensor);\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    return res;\n  }\n\n  async predict(input, config): Promise<{ startPoint: Point; endPoint: Point, palmLandmarks: Point[]; confidence: number }[]> {\n    const t: Record<string, Tensor> = {};\n    t.resize = tf.image.resizeBilinear(input, [this.inputSize, this.inputSize]);\n    t.div = tf.div(t.resize, constants.tf127);\n    t.image = tf.sub(t.div, constants.tf1);\n    t.batched = this.model.execute(t.image) as Tensor;\n    t.predictions = tf.squeeze(t.batched);\n    t.slice = tf.slice(t.predictions, [0, 0], [-1, 1]);\n    t.sigmoid = tf.sigmoid(t.slice);\n    t.scores = tf.squeeze(t.sigmoid);\n    const scores = await t.scores.data();\n    t.boxes = tf.slice(t.predictions, [0, 1], [-1, 4]);\n    t.norm = this.normalizeBoxes(t.boxes);\n    // box detection is flaky so we look for 3x boxes than we need results\n    t.nms = await tf.image.nonMaxSuppressionAsync(t.norm, t.scores, 3 * config.hand.maxDetected, config.hand.iouThreshold, config.hand.minConfidence);\n    const nms = await t.nms.array() as Array<number>;\n    const hands: Array<{ startPoint: Point; endPoint: Point; palmLandmarks: Point[]; confidence: number }> = [];\n    for (const index of nms) {\n      const p: Record<string, Tensor> = {};\n      p.box = tf.slice(t.norm, [index, 0], [1, -1]);\n      p.slice = tf.slice(t.predictions, [index, 5], [1, 14]);\n      p.norm = this.normalizeLandmarks(p.slice, index);\n      p.palmLandmarks = tf.reshape(p.norm, [-1, 2]);\n      const box = await p.box.data();\n      const startPoint = box.slice(0, 2) as unknown as Point;\n      const endPoint = box.slice(2, 4) as unknown as Point;\n      const palmLandmarks = await p.palmLandmarks.array();\n      const hand = { startPoint, endPoint, palmLandmarks, confidence: scores[index] };\n      const scaled = util.scaleBoxCoordinates(hand, [input.shape[2] / this.inputSize, input.shape[1] / this.inputSize]);\n      hands.push(scaled);\n      Object.keys(p).forEach((tensor) => tf.dispose(p[tensor]));\n    }\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    return hands;\n  }\n}\n", "/**\n * HandPose model implementation\n * See `handpose.ts` for entry point\n */\n\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as util from './handposeutil';\nimport type * as detector from './handposedetector';\nimport { constants } from '../tfjs/constants';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport { env } from '../util/env';\nimport { now } from '../util/util';\nimport type { Point } from '../result';\n\nconst palmBoxEnlargeFactor = 5; // default 3\nconst handBoxEnlargeFactor = 1.65; // default 1.65\nconst palmLandmarkIds = [0, 5, 9, 13, 17, 1, 2];\nconst palmLandmarksPalmBase = 0;\nconst palmLandmarksMiddleFingerBase = 2;\nlet lastTime = 0;\n\nexport class HandPipeline {\n  handDetector: detector.HandDetector;\n  handPoseModel: GraphModel;\n  inputSize: number;\n  storedBoxes: Array<{ startPoint: Point; endPoint: Point; palmLandmarks: Point[]; confidence: number } | null>;\n  skipped: number;\n  detectedHands: number;\n\n  constructor(handDetector, handPoseModel) {\n    this.handDetector = handDetector;\n    this.handPoseModel = handPoseModel;\n    this.inputSize = this.handPoseModel && this.handPoseModel.inputs[0].shape ? this.handPoseModel.inputs[0].shape[2] : 0;\n    this.storedBoxes = [];\n    this.skipped = Number.MAX_SAFE_INTEGER;\n    this.detectedHands = 0;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateLandmarksBoundingBox(landmarks) {\n    const xs = landmarks.map((d) => d[0]);\n    const ys = landmarks.map((d) => d[1]);\n    const startPoint = [Math.min(...xs), Math.min(...ys)];\n    const endPoint = [Math.max(...xs), Math.max(...ys)];\n    return { startPoint, endPoint };\n  }\n\n  getBoxForPalmLandmarks(palmLandmarks, rotationMatrix) {\n    const rotatedPalmLandmarks = palmLandmarks.map((coord) => util.rotatePoint([...coord, 1], rotationMatrix));\n    const boxAroundPalm = this.calculateLandmarksBoundingBox(rotatedPalmLandmarks);\n    return util.enlargeBox(util.squarifyBox(boxAroundPalm), palmBoxEnlargeFactor);\n  }\n\n  getBoxForHandLandmarks(landmarks) {\n    const boundingBox = this.calculateLandmarksBoundingBox(landmarks);\n    const boxAroundHand = util.enlargeBox(util.squarifyBox(boundingBox), handBoxEnlargeFactor);\n    boxAroundHand.palmLandmarks = [];\n    for (let i = 0; i < palmLandmarkIds.length; i++) {\n      boxAroundHand.palmLandmarks.push(landmarks[palmLandmarkIds[i]].slice(0, 2));\n    }\n    return boxAroundHand;\n  }\n\n  transformRawCoords(rawCoords, box2, angle, rotationMatrix) {\n    const boxSize = util.getBoxSize(box2);\n    const scaleFactor = [boxSize[0] / this.inputSize, boxSize[1] / this.inputSize, (boxSize[0] + boxSize[1]) / this.inputSize / 2];\n    const coordsScaled = rawCoords.map((coord) => [\n      scaleFactor[0] * (coord[0] - this.inputSize / 2),\n      scaleFactor[1] * (coord[1] - this.inputSize / 2),\n      scaleFactor[2] * coord[2],\n    ]);\n    const coordsRotationMatrix = util.buildRotationMatrix(angle, [0, 0]);\n    const coordsRotated = coordsScaled.map((coord) => {\n      const rotated = util.rotatePoint(coord, coordsRotationMatrix);\n      return [...rotated, coord[2]];\n    });\n    const inverseRotationMatrix = util.invertTransformMatrix(rotationMatrix);\n    const boxCenter = [...util.getBoxCenter(box2), 1];\n    const originalBoxCenter = [\n      util.dot(boxCenter, inverseRotationMatrix[0]),\n      util.dot(boxCenter, inverseRotationMatrix[1]),\n    ];\n    return coordsRotated.map((coord) => [\n      Math.trunc(coord[0] + originalBoxCenter[0]),\n      Math.trunc(coord[1] + originalBoxCenter[1]),\n      Math.trunc(coord[2]),\n    ]);\n  }\n\n  async estimateHands(image, config) {\n    let useFreshBox = false;\n\n    // run new detector every skipFrames\n    let boxes;\n    const skipTime = (config.hand.skipTime || 0) > (now() - lastTime);\n    const skipFrame = this.skipped < (config.hand.skipFrames || 0);\n    if (config.skipAllowed && skipTime && skipFrame) {\n      boxes = await this.handDetector.predict(image, config);\n      this.skipped = 0;\n    }\n    if (config.skipAllowed) this.skipped++;\n\n    // if detector result count doesn't match current working set, use it to reset current working set\n    if (boxes && (boxes.length > 0) && ((boxes.length !== this.detectedHands) && (this.detectedHands !== config.hand.maxDetected) || !config.hand.landmarks)) {\n      this.detectedHands = 0;\n      this.storedBoxes = [...boxes];\n      // for (const possible of boxes) this.storedBoxes.push(possible);\n      if (this.storedBoxes.length > 0) useFreshBox = true;\n    }\n    const hands: Array<{ landmarks: Point[], confidence: number, boxConfidence: number, fingerConfidence: number, box: { topLeft: Point, bottomRight: Point } }> = [];\n\n    // go through working set of boxes\n    for (let i = 0; i < this.storedBoxes.length; i++) {\n      const currentBox = this.storedBoxes[i];\n      if (!currentBox) continue;\n      if (config.hand.landmarks) {\n        const angle = config.hand.rotation ? util.computeRotation(currentBox.palmLandmarks[palmLandmarksPalmBase], currentBox.palmLandmarks[palmLandmarksMiddleFingerBase]) : 0;\n        const palmCenter = util.getBoxCenter(currentBox);\n        const palmCenterNormalized = [palmCenter[0] / image.shape[2], palmCenter[1] / image.shape[1]];\n        const rotatedImage = config.hand.rotation && env.kernels.includes('rotatewithoffset') ? tf.image.rotateWithOffset(image, angle, 0, palmCenterNormalized) : image.clone();\n        const rotationMatrix = util.buildRotationMatrix(-angle, palmCenter);\n        const newBox = useFreshBox ? this.getBoxForPalmLandmarks(currentBox.palmLandmarks, rotationMatrix) : currentBox;\n        const croppedInput = util.cutBoxFromImageAndResize(newBox, rotatedImage, [this.inputSize, this.inputSize]);\n        const handImage = tf.div(croppedInput, constants.tf255);\n        tf.dispose(croppedInput);\n        tf.dispose(rotatedImage);\n        const [confidenceT, keypoints] = this.handPoseModel.execute(handImage) as Array<Tensor>;\n        lastTime = now();\n        tf.dispose(handImage);\n        const confidence = (await confidenceT.data())[0];\n        tf.dispose(confidenceT);\n        if (confidence >= config.hand.minConfidence / 4) {\n          const keypointsReshaped = tf.reshape(keypoints, [-1, 3]);\n          const rawCoords = await keypointsReshaped.array();\n          tf.dispose(keypoints);\n          tf.dispose(keypointsReshaped);\n          const coords = this.transformRawCoords(rawCoords, newBox, angle, rotationMatrix);\n          const nextBoundingBox = this.getBoxForHandLandmarks(coords);\n          this.storedBoxes[i] = { ...nextBoundingBox, confidence };\n          const result = {\n            landmarks: coords,\n            confidence,\n            boxConfidence: currentBox.confidence,\n            fingerConfidence: confidence,\n            box: { topLeft: nextBoundingBox.startPoint, bottomRight: nextBoundingBox.endPoint },\n          };\n          hands.push(result);\n        } else {\n          this.storedBoxes[i] = null;\n        }\n        tf.dispose(keypoints);\n      } else {\n        // const enlarged = box.enlargeBox(box.squarifyBox(box.shiftBox(currentBox, HAND_BOX_SHIFT_VECTOR)), handBoxEnlargeFactor);\n        const enlarged = util.enlargeBox(util.squarifyBox(currentBox), handBoxEnlargeFactor);\n        const result = {\n          confidence: currentBox.confidence,\n          boxConfidence: currentBox.confidence,\n          fingerConfidence: 0,\n          box: { topLeft: enlarged.startPoint, bottomRight: enlarged.endPoint },\n          landmarks: [],\n        };\n        hands.push(result);\n      }\n    }\n    this.storedBoxes = this.storedBoxes.filter((a) => a !== null);\n    this.detectedHands = hands.length;\n    if (hands.length > config.hand.maxDetected) hands.length = config.hand.maxDetected;\n    return hands;\n  }\n}\n", "/**\n * FingerPose algorithm implementation\n * See `fingerpose.ts` for entry point\n */\n\nexport const Finger = {\n  thumb: 0,\n  index: 1,\n  middle: 2,\n  ring: 3,\n  pinky: 4,\n  all: [0, 1, 2, 3, 4], // just for convenience\n  nameMapping: { 0: 'thumb', 1: 'index', 2: 'middle', 3: 'ring', 4: 'pinky' },\n  // Describes mapping of joints based on the 21 points returned by handpose.\n  // [0]     Palm\n  // [1-4]   Thumb\n  // [5-8]   Index\n  // [9-12]  Middle\n  // [13-16] Ring\n  // [17-20] Pinky\n  pointsMapping: {\n    0: [[0, 1], [1, 2], [2, 3], [3, 4]],\n    1: [[0, 5], [5, 6], [6, 7], [7, 8]],\n    2: [[0, 9], [9, 10], [10, 11], [11, 12]],\n    3: [[0, 13], [13, 14], [14, 15], [15, 16]],\n    4: [[0, 17], [17, 18], [18, 19], [19, 20]],\n  },\n  getName: (value) => Finger.nameMapping[value],\n  getPoints: (value) => Finger.pointsMapping[value],\n};\n\nexport const FingerCurl = {\n  none: 0,\n  half: 1,\n  full: 2,\n  nameMapping: { 0: 'none', 1: 'half', 2: 'full' },\n  getName: (value) => FingerCurl.nameMapping[value],\n};\n\nexport const FingerDirection = {\n  verticalUp: 0,\n  verticalDown: 1,\n  horizontalLeft: 2,\n  horizontalRight: 3,\n  diagonalUpRight: 4,\n  diagonalUpLeft: 5,\n  diagonalDownRight: 6,\n  diagonalDownLeft: 7,\n  nameMapping: { 0: 'verticalUp', 1: 'verticalDown', 2: 'horizontalLeft', 3: 'horizontalRight', 4: 'diagonalUpRight', 5: 'diagonalUpLeft', 6: 'diagonalDownRight', 7: 'diagonalDownLeft' },\n  getName: (value) => FingerDirection.nameMapping[value],\n};\n\nexport class FingerGesture {\n  name;\n  curls;\n  directions;\n  weights;\n  weightsRelative;\n\n  constructor(name) {\n    // name (should be unique)\n    this.name = name;\n    this.curls = {};\n    this.directions = {};\n    this.weights = [1.0, 1.0, 1.0, 1.0, 1.0];\n    this.weightsRelative = [1.0, 1.0, 1.0, 1.0, 1.0];\n  }\n\n  curl(finger, curl, confidence) {\n    if (typeof this.curls[finger] === 'undefined') this.curls[finger] = [];\n    this.curls[finger].push([curl, confidence]);\n  }\n\n  direction(finger, position, confidence) {\n    if (!this.directions[finger]) this.directions[finger] = [];\n    this.directions[finger].push([position, confidence]);\n  }\n\n  weight(finger, weight) {\n    this.weights[finger] = weight;\n    // recalculate relative weights\n    const total = this.weights.reduce((a, b) => a + b, 0);\n    this.weightsRelative = this.weights.map((el) => el * 5 / total);\n  }\n\n  matchAgainst(detectedCurls, detectedDirections) {\n    let confidence = 0.0;\n    // look at the detected curl of each finger and compare with\n    // the expected curl of this finger inside current gesture\n    for (const fingerIdx in detectedCurls) {\n      const detectedCurl = detectedCurls[fingerIdx];\n      const expectedCurls = this.curls[fingerIdx];\n      if (typeof expectedCurls === 'undefined') {\n        // no curl description available for this finger\n        // add default confidence of \"1\"\n        confidence += this.weightsRelative[fingerIdx];\n        continue;\n      }\n      // compare to each possible curl of this specific finger\n      for (const [expectedCurl, score] of expectedCurls) {\n        if (detectedCurl === expectedCurl) {\n          confidence += score * this.weightsRelative[fingerIdx];\n          break;\n        }\n      }\n    }\n    // same for detected direction of each finger\n    for (const fingerIdx in detectedDirections) {\n      const detectedDirection = detectedDirections[fingerIdx];\n      const expectedDirections = this.directions[fingerIdx];\n      if (typeof expectedDirections === 'undefined') {\n        // no direction description available for this finger\n        // add default confidence of \"1\"\n        confidence += this.weightsRelative[fingerIdx];\n        continue;\n      }\n      // compare to each possible direction of this specific finger\n      for (const [expectedDirection, score] of expectedDirections) {\n        if (detectedDirection === expectedDirection) {\n          confidence += score * this.weightsRelative[fingerIdx];\n          break;\n        }\n      }\n    }\n    return confidence / 10;\n  }\n}\n", "/**\n * FingerPose algorithm implementation\n * See `fingerpose.ts` for entry point\n */\n\nimport { Finger, FingerCurl, FingerDirection, FingerGesture } from './fingerdef';\n\n// eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\nexport const { thumb, index, middle, ring, pinky } = Finger;\n// eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\nexport const { none, half, full } = FingerCurl;\n// eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\nexport const { verticalUp, verticalDown, horizontalLeft, horizontalRight, diagonalUpRight, diagonalUpLeft, diagonalDownRight, diagonalDownLeft } = FingerDirection;\n\n// describe thumbs up gesture \uD83D\uDC4D\nconst ThumbsUp = new FingerGesture('thumbs up');\nThumbsUp.curl(thumb, none, 1.0);\nThumbsUp.direction(thumb, verticalUp, 1.0);\nThumbsUp.direction(thumb, diagonalUpLeft, 0.25);\nThumbsUp.direction(thumb, diagonalUpRight, 0.25);\nfor (const finger of [Finger.index, Finger.middle, Finger.ring, Finger.pinky]) {\n  ThumbsUp.curl(finger, full, 1.0);\n  ThumbsUp.direction(finger, horizontalLeft, 1.0);\n  ThumbsUp.direction(finger, horizontalRight, 1.0);\n}\n\n// describe Victory gesture \u270C\uFE0F\nconst Victory = new FingerGesture('victory');\nVictory.curl(thumb, half, 0.5);\nVictory.curl(thumb, none, 0.5);\nVictory.direction(thumb, verticalUp, 1.0);\nVictory.direction(thumb, diagonalUpLeft, 1.0);\nVictory.curl(index, none, 1.0);\nVictory.direction(index, verticalUp, 0.75);\nVictory.direction(index, diagonalUpLeft, 1.0);\nVictory.curl(middle, none, 1.0);\nVictory.direction(middle, verticalUp, 1.0);\nVictory.direction(middle, diagonalUpLeft, 0.75);\nVictory.curl(ring, full, 1.0);\nVictory.direction(ring, verticalUp, 0.2);\nVictory.direction(ring, diagonalUpLeft, 1.0);\nVictory.direction(ring, horizontalLeft, 0.2);\nVictory.curl(pinky, full, 1.0);\nVictory.direction(pinky, verticalUp, 0.2);\nVictory.direction(pinky, diagonalUpLeft, 1.0);\nVictory.direction(pinky, horizontalLeft, 0.2);\nVictory.weight(index, 2);\nVictory.weight(middle, 2);\n\n// describe Point gesture \u270C\uFE0F\nconst Point = new FingerGesture('point');\nPoint.curl(thumb, full, 1.0);\nPoint.curl(index, none, 0.5);\nPoint.curl(middle, full, 0.5);\nPoint.curl(ring, full, 0.5);\nPoint.curl(pinky, full, 0.5);\nPoint.weight(index, 2);\nPoint.weight(middle, 2);\n\n// describe Point gesture \u270C\uFE0F\nconst MiddleFinger = new FingerGesture('middle finger');\nMiddleFinger.curl(thumb, none, 1.0);\nMiddleFinger.curl(index, full, 0.5);\nMiddleFinger.curl(middle, full, 0.5);\nMiddleFinger.curl(ring, full, 0.5);\nMiddleFinger.curl(pinky, full, 0.5);\nMiddleFinger.weight(index, 2);\nMiddleFinger.weight(middle, 2);\n\n// describe Open Palm gesture \u270C\uFE0F\nconst OpenPalm = new FingerGesture('open palm');\nOpenPalm.curl(thumb, none, 0.75);\nOpenPalm.curl(index, none, 0.75);\nOpenPalm.curl(middle, none, 0.75);\nOpenPalm.curl(ring, none, 0.75);\nOpenPalm.curl(pinky, none, 0.75);\n\nexport default [ThumbsUp, Victory, Point, MiddleFinger, OpenPalm];\n", "/**\n * HandPose model implementation\n *\n * Based on: [**MediaPipe HandPose**](https://drive.google.com/file/d/1sv4sSb9BSNVZhLzxXJ0jBv9DqD-4jnAz/view)\n */\n\nimport { log } from '../util/util';\nimport * as handdetector from './handposedetector';\nimport * as handpipeline from './handposepipeline';\nimport * as fingerPose from './fingerpose';\nimport { loadModel } from '../tfjs/load';\nimport type { HandResult, Box, Point } from '../result';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\n\nconst meshAnnotations = {\n  thumb: [1, 2, 3, 4],\n  index: [5, 6, 7, 8],\n  middle: [9, 10, 11, 12],\n  ring: [13, 14, 15, 16],\n  pinky: [17, 18, 19, 20],\n  palm: [0],\n};\n\nlet handDetectorModel: GraphModel | null;\nlet handPoseModel: GraphModel | null;\nlet handPipeline: handpipeline.HandPipeline;\n\nexport async function predict(input: Tensor, config: Config): Promise<HandResult[]> {\n  const predictions = await handPipeline.estimateHands(input, config);\n  if (!predictions) return [];\n  const hands: Array<HandResult> = [];\n  for (let i = 0; i < predictions.length; i++) {\n    const annotations = {};\n    if (predictions[i].landmarks) {\n      for (const key of Object.keys(meshAnnotations)) {\n        annotations[key] = meshAnnotations[key].map((index) => predictions[i].landmarks[index]);\n      }\n    }\n    const keypoints = predictions[i].landmarks as unknown as Array<Point>;\n    let box: Box = [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, 0, 0]; // maximums so conditionals work\n    let boxRaw: Box = [0, 0, 0, 0];\n    if (keypoints && keypoints.length > 0) { // if we have landmarks, calculate box based on landmarks\n      for (const pt of keypoints) {\n        if (pt[0] < box[0]) box[0] = pt[0];\n        if (pt[1] < box[1]) box[1] = pt[1];\n        if (pt[0] > box[2]) box[2] = pt[0];\n        if (pt[1] > box[3]) box[3] = pt[1];\n      }\n      box[2] -= box[0];\n      box[3] -= box[1];\n      boxRaw = [box[0] / (input.shape[2] || 0), box[1] / (input.shape[1] || 0), box[2] / (input.shape[2] || 0), box[3] / (input.shape[1] || 0)];\n    } else { // otherwise use box from prediction\n      box = predictions[i].box ? [\n        Math.trunc(Math.max(0, predictions[i].box.topLeft[0])),\n        Math.trunc(Math.max(0, predictions[i].box.topLeft[1])),\n        Math.trunc(Math.min((input.shape[2] || 0), predictions[i].box.bottomRight[0]) - Math.max(0, predictions[i].box.topLeft[0])),\n        Math.trunc(Math.min((input.shape[1] || 0), predictions[i].box.bottomRight[1]) - Math.max(0, predictions[i].box.topLeft[1])),\n      ] : [0, 0, 0, 0];\n      boxRaw = [\n        (predictions[i].box.topLeft[0]) / (input.shape[2] || 0),\n        (predictions[i].box.topLeft[1]) / (input.shape[1] || 0),\n        (predictions[i].box.bottomRight[0] - predictions[i].box.topLeft[0]) / (input.shape[2] || 0),\n        (predictions[i].box.bottomRight[1] - predictions[i].box.topLeft[1]) / (input.shape[1] || 0),\n      ];\n    }\n    const landmarks = fingerPose.analyze(keypoints);\n    hands.push({\n      id: i,\n      score: Math.round(100 * predictions[i].confidence) / 100,\n      boxScore: Math.round(100 * predictions[i].boxConfidence) / 100,\n      fingerScore: Math.round(100 * predictions[i].fingerConfidence) / 100,\n      label: 'hand',\n      box,\n      boxRaw,\n      keypoints,\n      annotations: annotations as HandResult['annotations'],\n      landmarks: landmarks as HandResult['landmarks'],\n    });\n  }\n  return hands;\n}\n\nexport async function load(config: Config): Promise<[GraphModel | null, GraphModel | null]> {\n  if (env.initial) {\n    handDetectorModel = null;\n    handPoseModel = null;\n  }\n  if (!handDetectorModel || !handPoseModel) {\n    [handDetectorModel, handPoseModel] = await Promise.all([\n      config.hand.enabled ? loadModel(config.hand.detector?.modelPath) : null,\n      config.hand.landmarks ? loadModel(config.hand.skeleton?.modelPath) : null,\n    ]);\n  } else {\n    if (config.debug) log('cached model:', handDetectorModel['modelUrl']);\n    if (config.debug) log('cached model:', handPoseModel['modelUrl']);\n  }\n  const handDetector = new handdetector.HandDetector(handDetectorModel);\n  handPipeline = new handpipeline.HandPipeline(handDetector, handPoseModel);\n  return [handDetectorModel, handPoseModel];\n}\n", "/**\n * HandTrack model implementation\n *\n * Based on:\n * - Hand Detection & Skeleton: [**MediaPipe HandPose**](https://drive.google.com/file/d/1sv4sSb9BSNVZhLzxXJ0jBv9DqD-4jnAz/view)\n * - Hand Tracking: [**HandTracking**](https://github.com/victordibia/handtracking)\n */\n\nimport { log, now } from '../util/util';\nimport * as box from '../util/box';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport type { HandResult, HandType, Box, Point } from '../result';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\nimport * as fingerPose from './fingerpose';\nimport { fakeOps } from '../tfjs/backend';\nimport { constants } from '../tfjs/constants';\n\nconst models: [GraphModel | null, GraphModel | null] = [null, null];\nconst modelOutputNodes = ['StatefulPartitionedCall/Postprocessor/Slice', 'StatefulPartitionedCall/Postprocessor/ExpandDims_1'];\n\nconst inputSize = [[0, 0], [0, 0]];\n\nconst classes = ['hand', 'fist', 'pinch', 'point', 'face', 'tip', 'pinchtip'];\nconst faceIndex = 4;\n\nconst boxExpandFact = 1.6;\nconst maxDetectorResolution = 512;\nconst detectorExpandFact = 1.4;\n\nlet skipped = Number.MAX_SAFE_INTEGER;\nlet lastTime = 0;\nlet outputSize: [number, number] = [0, 0];\n\ntype HandDetectResult = {\n  id: number,\n  score: number,\n  box: Box,\n  boxRaw: Box,\n  label: HandType,\n}\n\nconst cache: {\n  boxes: Array<HandDetectResult>,\n  hands: Array<HandResult>;\n} = {\n  boxes: [],\n  hands: [],\n};\n\nconst fingerMap = {\n  /*\n  thumb: [0, 1, 2, 3, 4],\n  index: [0, 5, 6, 7, 8],\n  middle: [0, 9, 10, 11, 12],\n  ring: [0, 13, 14, 15, 16],\n  pinky: [0, 17, 18, 19, 20],\n  palm: [0],\n  */\n  thumb: [1, 2, 3, 4],\n  index: [5, 6, 7, 8],\n  middle: [9, 10, 11, 12],\n  ring: [13, 14, 15, 16],\n  pinky: [17, 18, 19, 20],\n  base: [0],\n  palm: [0, 17, 13, 9, 5, 1, 0],\n};\n\nexport async function loadDetect(config: Config): Promise<GraphModel> {\n  // HandTrack Model: Original: <https://github.com/victordibia/handtracking> TFJS Port: <https://github.com/victordibia/handtrack.js/>\n  if (env.initial) models[0] = null;\n  if (!models[0]) {\n    // handtrack model has some kernel ops defined in model but those are never referenced and non-existent in tfjs\n    // ideally need to prune the model itself\n    fakeOps(['tensorlistreserve', 'enter', 'tensorlistfromtensor', 'merge', 'loopcond', 'switch', 'exit', 'tensorliststack', 'nextiteration', 'tensorlistsetitem', 'tensorlistgetitem', 'reciprocal', 'shape', 'split', 'where'], config);\n    models[0] = await loadModel(config.hand.detector?.modelPath);\n    const inputs = Object.values(models[0].modelSignature['inputs']);\n    inputSize[0][0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;\n    inputSize[0][1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;\n  } else if (config.debug) log('cached model:', models[0]['modelUrl']);\n  return models[0];\n}\n\nexport async function loadSkeleton(config: Config): Promise<GraphModel> {\n  if (env.initial) models[1] = null;\n  if (!models[1]) {\n    models[1] = await loadModel(config.hand.skeleton?.modelPath);\n    const inputs = Object.values(models[1].modelSignature['inputs']);\n    inputSize[1][0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;\n    inputSize[1][1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;\n  } else if (config.debug) log('cached model:', models[1]['modelUrl']);\n  return models[1];\n}\n\nexport async function load(config: Config): Promise<[GraphModel | null, GraphModel | null]> {\n  if (!models[0]) await loadDetect(config);\n  if (!models[1]) await loadSkeleton(config);\n  return models;\n}\n\nasync function detectHands(input: Tensor, config: Config): Promise<HandDetectResult[]> {\n  const hands: HandDetectResult[] = [];\n  if (!input || !models[0]) return hands;\n  const t: Record<string, Tensor> = {};\n  const ratio = (input.shape[2] || 1) / (input.shape[1] || 1);\n  const height = Math.min(Math.round((input.shape[1] || 0) / 8) * 8, maxDetectorResolution); // use dynamic input size but cap at 512\n  const width = Math.round(height * ratio / 8) * 8;\n  t.resize = tf.image.resizeBilinear(input, [height, width]); // todo: resize with padding\n  t.cast = tf.cast(t.resize, 'int32');\n  [t.rawScores, t.rawBoxes] = await models[0].executeAsync(t.cast, modelOutputNodes) as Tensor[];\n  t.boxes = tf.squeeze(t.rawBoxes, [0, 2]);\n  t.scores = tf.squeeze(t.rawScores, [0]);\n  const classScores: Array<Tensor> = tf.unstack(t.scores, 1); // unstack scores based on classes\n  tf.dispose(classScores[faceIndex]);\n  classScores.splice(faceIndex, 1); // remove faces\n  t.filtered = tf.stack(classScores, 1); // restack\n  tf.dispose(classScores);\n  // t.filtered = t.scores;\n  t.max = tf.max(t.filtered, 1); // max overall score\n  t.argmax = tf.argMax(t.filtered, 1); // class index of max overall score\n  let id = 0;\n  t.nms = await tf.image.nonMaxSuppressionAsync(t.boxes, t.max, (config.hand.maxDetected || 0) + 1, config.hand.iouThreshold || 0, config.hand.minConfidence || 1);\n  const nms = await t.nms.data();\n  const scores = await t.max.data();\n  const classNum = await t.argmax.data();\n  for (const nmsIndex of Array.from(nms)) { // generates results for each class\n    const boxSlice = tf.slice(t.boxes, nmsIndex, 1);\n    const boxYX = await boxSlice.data();\n    tf.dispose(boxSlice);\n    const boxData: Box = [boxYX[1], boxYX[0], boxYX[3] - boxYX[1], boxYX[2] - boxYX[0]]; // yx box reshaped to standard box\n    const boxRaw: Box = box.scale(boxData, detectorExpandFact);\n    const boxFull: Box = [Math.trunc(boxData[0] * outputSize[0]), Math.trunc(boxData[1] * outputSize[1]), Math.trunc(boxData[2] * outputSize[0]), Math.trunc(boxData[3] * outputSize[1])];\n    const score = scores[nmsIndex];\n    const label = classes[classNum[nmsIndex]] as HandType;\n    const hand: HandDetectResult = { id: id++, score, box: boxFull, boxRaw, label };\n    hands.push(hand);\n  }\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  hands.sort((a, b) => b.score - a.score);\n  if (hands.length > (config.hand.maxDetected || 1)) hands.length = (config.hand.maxDetected || 1);\n  return hands;\n}\n\nasync function detectFingers(input: Tensor, h: HandDetectResult, config: Config): Promise<HandResult> {\n  const hand: HandResult = { // initial values inherited from hand detect\n    id: h.id,\n    score: Math.round(100 * h.score) / 100,\n    boxScore: Math.round(100 * h.score) / 100,\n    fingerScore: 0,\n    box: h.box,\n    boxRaw: h.boxRaw,\n    label: h.label,\n    keypoints: [],\n    landmarks: {} as HandResult['landmarks'],\n    annotations: {} as HandResult['annotations'],\n  };\n  if (input && models[1] && config.hand.landmarks && h.score > (config.hand.minConfidence || 0)) {\n    const t: Record<string, Tensor> = {};\n    const boxCrop = [h.boxRaw[1], h.boxRaw[0], h.boxRaw[3] + h.boxRaw[1], h.boxRaw[2] + h.boxRaw[0]] as Box;\n    t.crop = tf.image.cropAndResize(input, [boxCrop], [0], [inputSize[1][0], inputSize[1][1]], 'bilinear');\n    t.div = tf.div(t.crop, constants.tf255);\n    [t.score, t.keypoints] = models[1].execute(t.div, ['Identity_1', 'Identity']) as Tensor[];\n    const rawScore = (await t.score.data())[0];\n    const score = (100 - Math.trunc(100 / (1 + Math.exp(rawScore)))) / 100; // reverse sigmoid value\n    if (score >= (config.hand.minConfidence || 0)) {\n      hand.fingerScore = score;\n      t.reshaped = tf.reshape(t.keypoints, [-1, 3]);\n      const coordsData: Point[] = await t.reshaped.array() as Point[];\n      const coordsRaw: Point[] = coordsData.map((kpt) => [kpt[0] / inputSize[1][1], kpt[1] / inputSize[1][0], (kpt[2] || 0)]);\n      const coordsNorm: Point[] = coordsRaw.map((kpt) => [kpt[0] * h.boxRaw[2], kpt[1] * h.boxRaw[3], (kpt[2] || 0)]);\n      hand.keypoints = (coordsNorm).map((kpt) => [outputSize[0] * (kpt[0] + h.boxRaw[0]), outputSize[1] * (kpt[1] + h.boxRaw[1]), (kpt[2] || 0)]);\n      hand.landmarks = fingerPose.analyze(hand.keypoints) as HandResult['landmarks']; // calculate finger gestures\n      for (const key of Object.keys(fingerMap)) { // map keypoints to per-finger annotations\n        hand.annotations[key] = fingerMap[key].map((index: number) => (hand.landmarks && hand.keypoints[index] ? hand.keypoints[index] : null));\n      }\n    }\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  }\n  return hand;\n}\n\nexport async function predict(input: Tensor, config: Config): Promise<HandResult[]> {\n  if (!models[0] || !models[1] || !models[0]?.inputs[0].shape || !models[1]?.inputs[0].shape) return []; // something is wrong with the model\n  outputSize = [input.shape[2] || 0, input.shape[1] || 0];\n  skipped++; // increment skip frames\n  const skipTime = (config.hand.skipTime || 0) > (now() - lastTime);\n  const skipFrame = skipped < (config.hand.skipFrames || 0);\n  if (config.skipAllowed && skipTime && skipFrame) {\n    return cache.hands; // return cached results without running anything\n  }\n  return new Promise(async (resolve) => {\n    const skipTimeExtended = 3 * (config.hand.skipTime || 0) > (now() - lastTime);\n    const skipFrameExtended = skipped < 3 * (config.hand.skipFrames || 0);\n    if (config.skipAllowed && cache.hands.length === config.hand.maxDetected) { // we have all detected hands so we're definitely skipping\n      cache.hands = await Promise.all(cache.boxes.map((handBox) => detectFingers(input, handBox, config)));\n    } else if (config.skipAllowed && skipTimeExtended && skipFrameExtended && cache.hands.length > 0) { // we have some cached results: maybe not enough but anyhow continue for bit longer\n      cache.hands = await Promise.all(cache.boxes.map((handBox) => detectFingers(input, handBox, config)));\n    } else { // finally rerun detector\n      cache.boxes = await detectHands(input, config);\n      lastTime = now();\n      cache.hands = await Promise.all(cache.boxes.map((handBox) => detectFingers(input, handBox, config)));\n      skipped = 0;\n    }\n\n    const oldCache = [...cache.boxes];\n    cache.boxes.length = 0; // reset cache\n    if (config.cacheSensitivity > 0) {\n      for (let i = 0; i < cache.hands.length; i++) {\n        const boxKpt = box.square(cache.hands[i].keypoints, outputSize);\n        if (boxKpt.box[2] / (input.shape[2] || 1) > 0.05 && boxKpt.box[3] / (input.shape[1] || 1) > 0.05 && cache.hands[i].fingerScore && cache.hands[i].fingerScore > (config.hand.minConfidence || 0)) {\n          const boxScale = box.scale(boxKpt.box, boxExpandFact);\n          const boxScaleRaw = box.scale(boxKpt.boxRaw, boxExpandFact);\n          // const boxCrop = box.crop(boxScaleRaw);\n          cache.boxes.push({ ...oldCache[i], box: boxScale, boxRaw: boxScaleRaw });\n        }\n      }\n    }\n    for (let i = 0; i < cache.hands.length; i++) { // replace detected boxes with calculated boxes in final output\n      const bbox = box.calc(cache.hands[i].keypoints, outputSize);\n      cache.hands[i].box = bbox.box;\n      cache.hands[i].boxRaw = bbox.boxRaw;\n    }\n    resolve(cache.hands);\n  });\n}\n", "import * as coords from './facemeshcoords';\nimport * as util from './facemeshutil';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport { env } from '../util/env';\nimport { log } from '../util/util';\nimport { loadModel } from '../tfjs/load';\nimport type { Config } from '../config';\nimport type { Point } from '../result';\n\nlet model: GraphModel | null;\nlet inputSize = 0;\n\nconst irisEnlarge = 2.3;\n\nconst leftOutline = coords.meshAnnotations['leftEyeLower0'];\nconst rightOutline = coords.meshAnnotations['rightEyeLower0'];\n\nconst eyeLandmarks = {\n  leftBounds: [leftOutline[0], leftOutline[leftOutline.length - 1]],\n  rightBounds: [rightOutline[0], rightOutline[rightOutline.length - 1]],\n};\n\nconst irisLandmarks = {\n  upperCenter: 3,\n  lowerCenter: 4,\n  index: 71,\n  numCoordinates: 76,\n};\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face.iris?.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  inputSize = model.inputs[0].shape ? model.inputs[0].shape[2] : 0;\n  if (inputSize === -1) inputSize = 64;\n  return model;\n}\n\n// Replace the raw coordinates returned by facemesh with refined iris model coordinates and update the z coordinate to be an average of the original and the new.\nexport function replaceIrisCoords(rawCoords, newCoords, prefix, keys) {\n  for (let i = 0; i < coords.irisIndices.length; i++) {\n    const { key, indices } = coords.irisIndices[i];\n    const originalIndices = coords.meshAnnotations[`${prefix}${key}`];\n    if (!keys || keys.includes(key)) {\n      for (let j = 0; j < indices.length; j++) {\n        const index = indices[j];\n        rawCoords[originalIndices[j]] = [\n          newCoords[index][0],\n          newCoords[index][1],\n          (newCoords[index][2] + rawCoords[originalIndices[j]][2]) / 2,\n        ];\n      }\n    }\n  }\n}\n\nexport const getLeftToRightEyeDepthDifference = (rawCoords) => {\n  const leftEyeZ = rawCoords[eyeLandmarks.leftBounds[0]][2];\n  const rightEyeZ = rawCoords[eyeLandmarks.rightBounds[0]][2];\n  return leftEyeZ - rightEyeZ;\n};\n\n// Returns a box describing a cropped region around the eye fit for passing to the iris model.\nexport const getEyeBox = (rawCoords, face, eyeInnerCornerIndex, eyeOuterCornerIndex, meshSize, flip = false) => {\n  const box = util.squarifyBox(util.enlargeBox(util.calculateLandmarksBoundingBox([rawCoords[eyeInnerCornerIndex], rawCoords[eyeOuterCornerIndex]]), irisEnlarge));\n  const boxSize = util.getBoxSize(box);\n  let crop = tf.image.cropAndResize(face, [[\n    box.startPoint[1] / meshSize,\n    box.startPoint[0] / meshSize, box.endPoint[1] / meshSize,\n    box.endPoint[0] / meshSize,\n  ]], [0], [inputSize, inputSize]);\n  if (flip && env.kernels.includes('flipleftright')) {\n    const flipped = tf.image.flipLeftRight(crop); // flipLeftRight is not defined for tfjs-node\n    tf.dispose(crop);\n    crop = flipped;\n  }\n  return { box, boxSize, crop };\n};\n\n// Given a cropped image of an eye, returns the coordinates of the contours surrounding the eye and the iris.\nexport const getEyeCoords = (eyeData, eyeBox, eyeBoxSize, flip = false) => {\n  const eyeRawCoords: Array<Point> = [];\n  for (let i = 0; i < irisLandmarks.numCoordinates; i++) {\n    const x = eyeData[i * 3];\n    const y = eyeData[i * 3 + 1];\n    const z = eyeData[i * 3 + 2];\n    eyeRawCoords.push([\n      (flip ? (1 - (x / inputSize)) : (x / inputSize)) * eyeBoxSize[0] + eyeBox.startPoint[0],\n      (y / inputSize) * eyeBoxSize[1] + eyeBox.startPoint[1], z,\n    ]);\n  }\n  return { rawCoords: eyeRawCoords, iris: eyeRawCoords.slice(irisLandmarks.index) };\n};\n\n// The z-coordinates returned for the iris are unreliable, so we take the z values from the surrounding keypoints.\nexport const getAdjustedIrisCoords = (rawCoords, irisCoords, direction) => {\n  const upperCenterZ = rawCoords[coords.meshAnnotations[`${direction}EyeUpper0`][irisLandmarks.upperCenter]][2];\n  const lowerCenterZ = rawCoords[coords.meshAnnotations[`${direction}EyeLower0`][irisLandmarks.lowerCenter]][2];\n  const averageZ = (upperCenterZ + lowerCenterZ) / 2;\n  // Iris indices: 0: center | 1: right | 2: above | 3: left | 4: below\n  return irisCoords.map((coord, i) => {\n    let z = averageZ;\n    if (i === 2) {\n      z = upperCenterZ;\n    } else if (i === 4) {\n      z = lowerCenterZ;\n    }\n    return [coord[0], coord[1], z];\n  });\n};\n\nexport async function augmentIris(rawCoords, face, config, meshSize) {\n  if (!model) {\n    if (config.debug) log('face mesh iris detection requested, but model is not loaded');\n    return rawCoords;\n  }\n  const { box: leftEyeBox, boxSize: leftEyeBoxSize, crop: leftEyeCrop } = getEyeBox(rawCoords, face, eyeLandmarks.leftBounds[0], eyeLandmarks.leftBounds[1], meshSize, true);\n  const { box: rightEyeBox, boxSize: rightEyeBoxSize, crop: rightEyeCrop } = getEyeBox(rawCoords, face, eyeLandmarks.rightBounds[0], eyeLandmarks.rightBounds[1], meshSize, true);\n  const combined = tf.concat([leftEyeCrop, rightEyeCrop]);\n  tf.dispose(leftEyeCrop);\n  tf.dispose(rightEyeCrop);\n  const eyePredictions = model.execute(combined) as Tensor;\n  tf.dispose(combined);\n  const eyePredictionsData = await eyePredictions.data();\n  tf.dispose(eyePredictions);\n  const leftEyeData = eyePredictionsData.slice(0, irisLandmarks.numCoordinates * 3);\n  const { rawCoords: leftEyeRawCoords, iris: leftIrisRawCoords } = getEyeCoords(leftEyeData, leftEyeBox, leftEyeBoxSize, true);\n  const rightEyeData = eyePredictionsData.slice(irisLandmarks.numCoordinates * 3);\n  const { rawCoords: rightEyeRawCoords, iris: rightIrisRawCoords } = getEyeCoords(rightEyeData, rightEyeBox, rightEyeBoxSize, false);\n  const leftToRightEyeDepthDifference = getLeftToRightEyeDepthDifference(rawCoords);\n  if (Math.abs(leftToRightEyeDepthDifference) < 30) { // User is looking straight ahead.\n    replaceIrisCoords(rawCoords, leftEyeRawCoords, 'left', null);\n    replaceIrisCoords(rawCoords, rightEyeRawCoords, 'right', null);\n    // If the user is looking to the left or to the right, the iris coordinates tend to diverge too much from the mesh coordinates for them to be merged so we only update a single contour line above and below the eye.\n  } else if (leftToRightEyeDepthDifference < 1) { // User is looking towards the right.\n    replaceIrisCoords(rawCoords, leftEyeRawCoords, 'left', ['EyeUpper0', 'EyeLower0']);\n  } else { // User is looking towards the left.\n    replaceIrisCoords(rawCoords, rightEyeRawCoords, 'right', ['EyeUpper0', 'EyeLower0']);\n  }\n  const adjustedLeftIrisCoords = getAdjustedIrisCoords(rawCoords, leftIrisRawCoords, 'left');\n  const adjustedRightIrisCoords = getAdjustedIrisCoords(rawCoords, rightIrisRawCoords, 'right');\n  const newCoords = rawCoords.concat(adjustedLeftIrisCoords).concat(adjustedRightIrisCoords);\n  return newCoords;\n}\n", "/**\n * Anti-spoofing model implementation\n */\n\nimport { log, now } from '../util/util';\nimport { loadModel } from '../tfjs/load';\nimport type { Config } from '../config';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { env } from '../util/env';\n\nlet model: GraphModel | null;\nconst cached: Array<number> = [];\nlet skipped = Number.MAX_SAFE_INTEGER;\nlet lastCount = 0;\nlet lastTime = 0;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) model = await loadModel(config.face.liveness?.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\nexport async function predict(image: Tensor, config: Config, idx: number, count: number): Promise<number> {\n  if (!model) return 0;\n  const skipTime = (config.face.liveness?.skipTime || 0) > (now() - lastTime);\n  const skipFrame = skipped < (config.face.liveness?.skipFrames || 0);\n  if (config.skipAllowed && skipTime && skipFrame && (lastCount === count) && cached[idx]) {\n    skipped++;\n    return cached[idx];\n  }\n  skipped = 0;\n  return new Promise(async (resolve) => {\n    const resize = tf.image.resizeBilinear(image, [model?.inputs[0].shape ? model.inputs[0].shape[2] : 0, model?.inputs[0].shape ? model.inputs[0].shape[1] : 0], false);\n    const res = model?.execute(resize) as Tensor;\n    const num = (await res.data())[0];\n    cached[idx] = Math.round(100 * num) / 100;\n    lastCount = count;\n    lastTime = now();\n    tf.dispose([resize, res]);\n    resolve(cached[idx]);\n  });\n}\n", "export const kpt: Array<string> = [ // used to create part labels\n  'nose',\n  'leftEye',\n  'rightEye',\n  'leftEar',\n  'rightEar',\n  'leftShoulder',\n  'rightShoulder',\n  'leftElbow',\n  'rightElbow',\n  'leftWrist',\n  'rightWrist',\n  'leftHip',\n  'rightHip',\n  'leftKnee',\n  'rightKnee',\n  'leftAnkle',\n  'rightAnkle',\n];\n\nexport const horizontal: Array<string[]> = [ // used to fix left vs right\n  ['leftEye', 'rightEye'],\n  ['leftEar', 'rightEar'],\n  ['leftShoulder', 'rightShoulder'],\n  ['leftElbow', 'rightElbow'],\n  ['leftWrist', 'rightWrist'],\n  ['leftHip', 'rightHip'],\n  ['leftKnee', 'rightKnee'],\n  ['leftAnkle', 'rightAnkle'],\n];\n\nexport const vertical: Array<string[]> = [ // used to remove unlikely keypoint positions\n  ['leftKnee', 'leftShoulder'],\n  ['rightKnee', 'rightShoulder'],\n  ['leftAnkle', 'leftKnee'],\n  ['rightAnkle', 'rightKnee'],\n];\n\nexport const relative: Array<string[][]> = [ // used to match relative body parts\n  [['leftHip', 'rightHip'], ['leftShoulder', 'rightShoulder']],\n  [['leftElbow', 'rightElbow'], ['leftShoulder', 'rightShoulder']],\n];\n\nexport const connected: Record<string, string[]> = { // used to create body outline in annotations\n  leftLeg: ['leftHip', 'leftKnee', 'leftAnkle'],\n  rightLeg: ['rightHip', 'rightKnee', 'rightAnkle'],\n  torso: ['leftShoulder', 'rightShoulder', 'rightHip', 'leftHip', 'leftShoulder'],\n  leftArm: ['leftShoulder', 'leftElbow', 'leftWrist'],\n  rightArm: ['rightShoulder', 'rightElbow', 'rightWrist'],\n  head: [],\n};\n", "/**\n * MoveNet model implementation\n *\n * Based on: [**MoveNet**](https://blog.tensorflow.org/2021/05/next-generation-pose-detection-with-movenet-and-tensorflowjs.html)\n */\n\nimport { log, now } from '../util/util';\nimport * as box from '../util/box';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as coords from './movenetcoords';\nimport * as fix from './movenetfix';\nimport { loadModel } from '../tfjs/load';\nimport type { BodyKeypoint, BodyResult, BodyLandmark, BodyAnnotation, Box, Point } from '../result';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { fakeOps } from '../tfjs/backend';\nimport { env } from '../util/env';\n\nlet model: GraphModel | null;\nlet inputSize = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\n// const boxExpandFact = 1.5; // increase to 150%\n\nconst cache: {\n  boxes: Array<Box>, // unused\n  bodies: Array<BodyResult>;\n  last: number,\n} = {\n  boxes: [],\n  bodies: [],\n  last: 0,\n};\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (env.initial) model = null;\n  if (!model) {\n    fakeOps(['size'], config);\n    model = await loadModel(config.body.modelPath);\n  } else if (config.debug) log('cached model:', model['modelUrl']);\n  inputSize = model.inputs[0].shape ? model.inputs[0].shape[2] : 0;\n  if (inputSize < 64) inputSize = 256;\n  return model;\n}\n\nasync function parseSinglePose(res, config, image) {\n  const kpt = res[0][0];\n  const keypoints: Array<BodyKeypoint> = [];\n  let score = 0;\n  for (let id = 0; id < kpt.length; id++) {\n    score = kpt[id][2];\n    if (score > config.body.minConfidence) {\n      const positionRaw: Point = [kpt[id][1], kpt[id][0]];\n      keypoints.push({\n        score: Math.round(100 * score) / 100,\n        part: coords.kpt[id] as BodyLandmark,\n        positionRaw,\n        position: [ // normalized to input image size\n          Math.round((image.shape[2] || 0) * positionRaw[0]),\n          Math.round((image.shape[1] || 0) * positionRaw[1]),\n        ],\n      });\n    }\n  }\n  score = keypoints.reduce((prev, curr) => (curr.score > prev ? curr.score : prev), 0);\n  const bodies: Array<BodyResult> = [];\n  const newBox = box.calc(keypoints.map((pt) => pt.position), [image.shape[2], image.shape[1]]);\n  const annotations: Record<string, Point[][]> = {};\n  for (const [name, indexes] of Object.entries(coords.connected)) {\n    const pt: Array<Point[]> = [];\n    for (let i = 0; i < indexes.length - 1; i++) {\n      const pt0 = keypoints.find((kp) => kp.part === indexes[i]);\n      const pt1 = keypoints.find((kp) => kp.part === indexes[i + 1]);\n      if (pt0 && pt1 && pt0.score > (config.body.minConfidence || 0) && pt1.score > (config.body.minConfidence || 0)) pt.push([pt0.position, pt1.position]);\n    }\n    annotations[name] = pt;\n  }\n  const body: BodyResult = { id: 0, score, box: newBox.box, boxRaw: newBox.boxRaw, keypoints, annotations };\n  fix.bodyParts(body);\n  bodies.push(body);\n  return bodies;\n}\n\nasync function parseMultiPose(res, config, image) {\n  const bodies: Array<BodyResult> = [];\n  for (let id = 0; id < res[0].length; id++) {\n    const kpt = res[0][id];\n    const totalScore = Math.round(100 * kpt[51 + 4]) / 100;\n    if (totalScore > config.body.minConfidence) {\n      const keypoints: Array<BodyKeypoint> = [];\n      for (let i = 0; i < 17; i++) {\n        const score = kpt[3 * i + 2];\n        if (score > config.body.minConfidence) {\n          const positionRaw: Point = [kpt[3 * i + 1], kpt[3 * i + 0]];\n          keypoints.push({\n            part: coords.kpt[i] as BodyLandmark,\n            score: Math.round(100 * score) / 100,\n            positionRaw,\n            position: [Math.round((image.shape[2] || 0) * positionRaw[0]), Math.round((image.shape[1] || 0) * positionRaw[1])],\n          });\n        }\n      }\n      const newBox = box.calc(keypoints.map((pt) => pt.position), [image.shape[2], image.shape[1]]);\n      // movenet-multipose has built-in box details\n      // const boxRaw: Box = [kpt[51 + 1], kpt[51 + 0], kpt[51 + 3] - kpt[51 + 1], kpt[51 + 2] - kpt[51 + 0]];\n      // const box: Box = [Math.trunc(boxRaw[0] * (image.shape[2] || 0)), Math.trunc(boxRaw[1] * (image.shape[1] || 0)), Math.trunc(boxRaw[2] * (image.shape[2] || 0)), Math.trunc(boxRaw[3] * (image.shape[1] || 0))];\n      const annotations: Record<BodyAnnotation, Point[][]> = {} as Record<BodyAnnotation, Point[][]>;\n      for (const [name, indexes] of Object.entries(coords.connected)) {\n        const pt: Array<Point[]> = [];\n        for (let i = 0; i < indexes.length - 1; i++) {\n          const pt0 = keypoints.find((kp) => kp.part === indexes[i]);\n          const pt1 = keypoints.find((kp) => kp.part === indexes[i + 1]);\n          if (pt0 && pt1 && pt0.score > (config.body.minConfidence || 0) && pt1.score > (config.body.minConfidence || 0)) pt.push([pt0.position, pt1.position]);\n        }\n        annotations[name] = pt;\n      }\n      const body: BodyResult = { id, score: totalScore, box: newBox.box, boxRaw: newBox.boxRaw, keypoints: [...keypoints], annotations };\n      fix.bodyParts(body);\n      bodies.push(body);\n    }\n  }\n  bodies.sort((a, b) => b.score - a.score);\n  if (bodies.length > config.body.maxDetected) bodies.length = config.body.maxDetected;\n  return bodies;\n}\n\nexport async function predict(input: Tensor, config: Config): Promise<BodyResult[]> {\n  if (!model || !model?.inputs[0].shape) return []; // something is wrong with the model\n  if (!config.skipAllowed) cache.boxes.length = 0; // allowed to use cache or not\n  skipped++; // increment skip frames\n  const skipTime = (config.body.skipTime || 0) > (now() - cache.last);\n  const skipFrame = skipped < (config.body.skipFrames || 0);\n  if (config.skipAllowed && skipTime && skipFrame) {\n    return cache.bodies; // return cached results without running anything\n  }\n  return new Promise(async (resolve) => {\n    const t: Record<string, Tensor> = {};\n    skipped = 0;\n    // run detection on squared input and cached boxes\n    /*\n    cache.bodies = []; // reset bodies result\n    if (cache.boxes.length >= (config.body.maxDetected || 0)) { // if we have enough cached boxes run detection using cache\n      for (let i = 0; i < cache.boxes.length; i++) { // run detection based on cached boxes\n        t.crop = tf.image.cropAndResize(input, [cache.boxes[i]], [0], [inputSize, inputSize], 'bilinear');\n        t.cast = tf.cast(t.crop, 'int32');\n        // t.input = prepareImage(input);\n        t.res = model?.execute(t.cast) as Tensor;\n        const res = await t.res.array();\n        const newBodies = (t.res.shape[2] === 17) ? await parseSinglePose(res, config, input, cache.boxes[i]) : await parseMultiPose(res, config, input, cache.boxes[i]);\n        cache.bodies = cache.bodies.concat(newBodies);\n        Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n      }\n    }\n    if (cache.bodies.length !== config.body.maxDetected) { // did not find enough bodies based on cached boxes so run detection on full frame\n      t.input = prepareImage(input);\n      t.res = model?.execute(t.input) as Tensor;\n      const res = await t.res.array();\n      cache.bodies = (t.res.shape[2] === 17) ? await parseSinglePose(res, config, input, [0, 0, 1, 1]) : await parseMultiPose(res, config, input, [0, 0, 1, 1]);\n      for (const body of cache.bodies) rescaleBody(body, [input.shape[2] || 1, input.shape[1] || 1]);\n      Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    }\n    cache.boxes.length = 0; // reset cache\n    for (let i = 0; i < cache.bodies.length; i++) {\n      if (cache.bodies[i].keypoints.length > (coords.kpt.length / 2)) { // only update cache if we detected at least half keypoints\n        const scaledBox = box.scale(cache.bodies[i].boxRaw, boxExpandFact);\n        const cropBox = box.crop(scaledBox);\n        cache.boxes.push(cropBox);\n      }\n    }\n    */\n\n    // run detection on squared input and no cached boxes\n    t.input = fix.padInput(input, inputSize);\n    t.res = model?.execute(t.input) as Tensor;\n    cache.last = now();\n    const res = await t.res.array();\n    cache.bodies = (t.res.shape[2] === 17)\n      ? await parseSinglePose(res, config, input)\n      : await parseMultiPose(res, config, input);\n    for (const body of cache.bodies) {\n      fix.rescaleBody(body, [input.shape[2] || 1, input.shape[1] || 1]);\n      fix.jitter(body.keypoints);\n    }\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n\n    resolve(cache.bodies);\n  });\n}\n", "/**\n * NanoDet object detection model implementation\n *\n * Based on: [**MB3-CenterNet**](https://github.com/610265158/mobilenetv3_centernet)\n */\n\nimport { log, now } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport { constants } from '../tfjs/constants';\nimport { labels } from './labels';\nimport type { ObjectResult, ObjectType, Box } from '../result';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\n\nlet model: GraphModel;\nlet last: Array<ObjectResult> = [];\nlet lastTime = 0;\nlet skipped = Number.MAX_SAFE_INTEGER;\nlet inputSize = 0;\n\nconst scaleBox = 2.5; // increase box size\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (!model || env.initial) {\n    model = await loadModel(config.object.modelPath);\n    const inputs = Object.values(model.modelSignature['inputs']);\n    inputSize = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;\n  } else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\nasync function process(res: Tensor[], outputShape: [number, number], config: Config) {\n  let id = 0;\n  let results: Array<ObjectResult> = [];\n  for (const strideSize of [1, 2, 4]) { // try each stride size as it detects large/medium/small objects\n    // find scores, boxes, classes\n    const baseSize = strideSize * 13; // 13x13=169, 26x26=676, 52x52=2704\n    // find boxes and scores output depending on stride\n    const scoresT = tf.squeeze(res.find((a: Tensor) => (a.shape[1] === (baseSize ** 2) && (a.shape[2] || 0) === labels.length)));\n    const scores = await scoresT.array(); // optionally use exponential scores or just as-is\n    const featuresT = tf.squeeze(res.find((a: Tensor) => (a.shape[1] === (baseSize ** 2) && (a.shape[2] || 0) < labels.length)));\n    const boxesMaxT = featuresT.reshape([-1, 4, featuresT.shape[1] / 4]); // reshape [output] to [4, output / 4] where number is number of different features inside each stride\n    const boxIdxT = boxesMaxT.argMax(2); // what we need is indexes of features with highest scores, not values itself\n    const boxIdx = await boxIdxT.array(); // what we need is indexes of features with highest scores, not values itself\n    for (let i = 0; i < scoresT.shape[0]; i++) { // total strides (x * y matrix)\n      for (let j = 0; j < scoresT.shape[1]; j++) { // one score for each class\n        const score = scores[i][j]; // get score for current position\n        if (score > (config.object.minConfidence || 0) && j !== 61) {\n          const cx = (0.5 + Math.trunc(i % baseSize)) / baseSize; // center.x normalized to range 0..1\n          const cy = (0.5 + Math.trunc(i / baseSize)) / baseSize; // center.y normalized to range 0..1\n          const boxOffset = boxIdx[i].map((a: number) => a * (baseSize / strideSize / inputSize)); // just grab indexes of features with highest scores\n          const [x, y] = [\n            cx - (scaleBox / strideSize * boxOffset[0]),\n            cy - (scaleBox / strideSize * boxOffset[1]),\n          ];\n          const [w, h] = [\n            cx + (scaleBox / strideSize * boxOffset[2]) - x,\n            cy + (scaleBox / strideSize * boxOffset[3]) - y,\n          ];\n          let boxRaw: Box = [x, y, w, h]; // results normalized to range 0..1\n          boxRaw = boxRaw.map((a) => Math.max(0, Math.min(a, 1))) as Box; // fix out-of-bounds coords\n          const box = [ // results normalized to input image pixels\n            boxRaw[0] * outputShape[0],\n            boxRaw[1] * outputShape[1],\n            boxRaw[2] * outputShape[0],\n            boxRaw[3] * outputShape[1],\n          ];\n          const result = {\n            id: id++,\n            // strideSize,\n            score: Math.round(100 * score) / 100,\n            class: j + 1,\n            label: labels[j].label as ObjectType,\n            // center: [Math.trunc(outputShape[0] * cx), Math.trunc(outputShape[1] * cy)],\n            // centerRaw: [cx, cy],\n            box: box.map((a) => Math.trunc(a)) as Box,\n            boxRaw,\n          };\n          results.push(result);\n        }\n      }\n    }\n    tf.dispose([scoresT, featuresT, boxesMaxT, boxIdxT]);\n  }\n\n  // normally nms is run on raw results, but since boxes need to be calculated this way we skip calulcation of\n  // unnecessary boxes and run nms only on good candidates (basically it just does IOU analysis as scores are already filtered)\n  const nmsBoxes = results.map((a) => [a.boxRaw[1], a.boxRaw[0], a.boxRaw[3], a.boxRaw[2]]); // switches coordinates from x,y to y,x as expected by tf.nms\n  const nmsScores = results.map((a) => a.score);\n  let nmsIdx: Array<number> = [];\n  if (nmsBoxes && nmsBoxes.length > 0) {\n    const nms = await tf.image.nonMaxSuppressionAsync(nmsBoxes, nmsScores, config.object.maxDetected, config.object.iouThreshold, config.object.minConfidence);\n    nmsIdx = await nms.data();\n    tf.dispose(nms);\n  }\n\n  // filter & sort results\n  results = results\n    .filter((_val, idx) => nmsIdx.includes(idx))\n    .sort((a, b) => (b.score - a.score));\n\n  return results;\n}\n\nexport async function predict(image: Tensor, config: Config): Promise<ObjectResult[]> {\n  const skipTime = (config.object.skipTime || 0) > (now() - lastTime);\n  const skipFrame = skipped < (config.object.skipFrames || 0);\n  if (config.skipAllowed && skipTime && skipFrame && (last.length > 0)) {\n    skipped++;\n    return last;\n  }\n  skipped = 0;\n  if (!env.kernels.includes('mod') || !env.kernels.includes('sparsetodense')) return last;\n  return new Promise(async (resolve) => {\n    const outputSize = [image.shape[2] || 0, image.shape[1] || 0];\n    const resizeT = tf.image.resizeBilinear(image, [inputSize, inputSize], false);\n    const normT = tf.div(resizeT, constants.tf255);\n    const transposeT = tf.transpose(normT, [0, 3, 1, 2]);\n\n    let objectT;\n    if (config.object.enabled) objectT = model.execute(transposeT);\n    lastTime = now();\n\n    const obj = await process(objectT as Tensor[], outputSize as [number, number], config);\n    last = obj;\n    tf.dispose([resizeT, normT, transposeT, ...objectT]);\n    resolve(obj);\n  });\n}\n", "/**\n * PoseNet body detection model implementation constants\n * See `posenet.ts` for entry point\n */\n\nimport type { Point, BodyResult, BodyAnnotation, BodyLandmark } from '../result';\n\nexport const partNames = [\n  'nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder',\n  'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist',\n  'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle',\n];\n\nexport const count = partNames.length; // 17 keypoints\n\nexport const partIds = partNames.reduce((result, jointName, i) => {\n  result[jointName] = i;\n  return result;\n}, {});\n\nconst connectedPartNames = [\n  ['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'],\n  ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'],\n  ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'],\n  ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'],\n  ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip'],\n];\nexport const connectedPartIndices = connectedPartNames.map(([jointNameA, jointNameB]) => ([partIds[jointNameA], partIds[jointNameB]]));\n\nexport const poseChain = [\n  ['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'],\n  ['rightEye', 'rightEar'], ['nose', 'leftShoulder'],\n  ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'],\n  ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'],\n  ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'],\n  ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'],\n  ['rightKnee', 'rightAnkle'],\n];\n\nexport function eitherPointDoesntMeetConfidence(a: number, b: number, minConfidence: number) {\n  return (a < minConfidence || b < minConfidence);\n}\n\nexport function getAdjacentKeyPoints(keypoints, minConfidence: number) {\n  return connectedPartIndices.reduce((result, [leftJoint, rightJoint]) => {\n    if (eitherPointDoesntMeetConfidence(keypoints[leftJoint].score, keypoints[rightJoint].score, minConfidence)) {\n      return result;\n    }\n    result.push([keypoints[leftJoint], keypoints[rightJoint]]);\n    return result;\n  }, []);\n}\n\nexport function getBoundingBox(keypoints): [number, number, number, number] {\n  const coord = keypoints.reduce(({ maxX, maxY, minX, minY }, { position: { x, y } }) => ({\n    maxX: Math.max(maxX, x),\n    maxY: Math.max(maxY, y),\n    minX: Math.min(minX, x),\n    minY: Math.min(minY, y),\n  }), {\n    maxX: Number.NEGATIVE_INFINITY,\n    maxY: Number.NEGATIVE_INFINITY,\n    minX: Number.POSITIVE_INFINITY,\n    minY: Number.POSITIVE_INFINITY,\n  });\n  return [coord.minX, coord.minY, coord.maxX - coord.minX, coord.maxY - coord.minY];\n}\n\nexport function scalePoses(poses, [height, width], [inputResolutionHeight, inputResolutionWidth]): Array<BodyResult> {\n  const scaleY = height / inputResolutionHeight;\n  const scaleX = width / inputResolutionWidth;\n  const scalePose = (pose, i): BodyResult => ({\n    id: i,\n    score: pose.score,\n    boxRaw: [pose.box[0] / inputResolutionWidth, pose.box[1] / inputResolutionHeight, pose.box[2] / inputResolutionWidth, pose.box[3] / inputResolutionHeight],\n    box: [Math.trunc(pose.box[0] * scaleX), Math.trunc(pose.box[1] * scaleY), Math.trunc(pose.box[2] * scaleX), Math.trunc(pose.box[3] * scaleY)],\n    keypoints: pose.keypoints.map(({ score, part, position }) => ({\n      score: score as number,\n      part: part as BodyLandmark,\n      position: [Math.trunc(position.x * scaleX), Math.trunc(position.y * scaleY)] as Point,\n      positionRaw: [position.x / inputResolutionHeight, position.y / inputResolutionHeight] as Point,\n    })),\n    annotations: {} as Record<BodyAnnotation, Point[][]>,\n  });\n  const scaledPoses = poses.map((pose, i) => scalePose(pose, i));\n  return scaledPoses;\n}\n\n// algorithm based on Coursera Lecture from Algorithms, Part 1: https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\nexport class MaxHeap {\n  priorityQueue: Array<unknown>; // don't touch\n  numberOfElements: number;\n  getElementValue: unknown; // function call\n\n  constructor(maxSize, getElementValue) {\n    this.priorityQueue = new Array(maxSize);\n    this.numberOfElements = -1;\n    this.getElementValue = getElementValue;\n  }\n\n  enqueue(x) {\n    this.priorityQueue[++this.numberOfElements] = x;\n    this.swim(this.numberOfElements);\n  }\n\n  dequeue() {\n    const max = this.priorityQueue[0];\n    this.exchange(0, this.numberOfElements--);\n    this.sink(0);\n    this.priorityQueue[this.numberOfElements + 1] = null;\n    return max;\n  }\n\n  empty() { return this.numberOfElements === -1; }\n\n  size() { return this.numberOfElements + 1; }\n\n  all() { return this.priorityQueue.slice(0, this.numberOfElements + 1); }\n\n  max() { return this.priorityQueue[0]; }\n\n  swim(k) {\n    while (k > 0 && this.less(Math.floor(k / 2), k)) {\n      this.exchange(k, Math.floor(k / 2));\n      k = Math.floor(k / 2);\n    }\n  }\n\n  sink(k) {\n    while (2 * k <= this.numberOfElements) {\n      let j = 2 * k;\n      if (j < this.numberOfElements && this.less(j, j + 1)) j++;\n      if (!this.less(k, j)) break;\n      this.exchange(k, j);\n      k = j;\n    }\n  }\n\n  getValueAt(i) {\n    // @ts-ignore getter is of unknown type\n    return this.getElementValue(this.priorityQueue[i]);\n  }\n\n  less(i, j) {\n    return this.getValueAt(i) < this.getValueAt(j);\n  }\n\n  exchange(i, j) {\n    const t = this.priorityQueue[i];\n    this.priorityQueue[i] = this.priorityQueue[j];\n    this.priorityQueue[j] = t;\n  }\n}\n\nexport function getOffsetPoint(y, x, keypoint, offsets) {\n  return {\n    y: offsets.get(y, x, keypoint),\n    x: offsets.get(y, x, keypoint + count),\n  };\n}\n\nexport function getImageCoords(part, outputStride, offsets) {\n  const { heatmapY, heatmapX, id: keypoint } = part;\n  const { y, x } = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);\n  return {\n    x: part.heatmapX * outputStride + x,\n    y: part.heatmapY * outputStride + y,\n  };\n}\n\nexport function fillArray(element, size) {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = element;\n  }\n  return result;\n}\n\nexport function clamp(a, min, max) {\n  if (a < min) return min;\n  if (a > max) return max;\n  return a;\n}\n\nexport function squaredDistance(y1, x1, y2, x2) {\n  const dy = y2 - y1;\n  const dx = x2 - x1;\n  return dy * dy + dx * dx;\n}\n\nexport function addVectors(a, b) {\n  return { x: a.x + b.x, y: a.y + b.y };\n}\n\nexport function clampVector(a, min, max) {\n  return { y: clamp(a.y, min, max), x: clamp(a.x, min, max) };\n}\n", "/**\n * PoseNet body detection model implementation\n *\n * Based on: [**PoseNet**](https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5)\n */\n\nimport { log } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport type { BodyResult, BodyLandmark, Box } from '../result';\nimport type { Tensor, GraphModel } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\nimport * as utils from './posenetutils';\n\nlet model: GraphModel;\nconst poseNetOutputs = ['MobilenetV1/offset_2/BiasAdd'/* offsets */, 'MobilenetV1/heatmap_2/BiasAdd'/* heatmapScores */, 'MobilenetV1/displacement_fwd_2/BiasAdd'/* displacementFwd */, 'MobilenetV1/displacement_bwd_2/BiasAdd'/* displacementBwd */];\nconst localMaximumRadius = 1;\nconst outputStride = 16;\nconst squaredNmsRadius = 50 ** 2;\n\nfunction traverse(edgeId, sourceKeypoint, targetId, scores, offsets, displacements, offsetRefineStep = 2) {\n  const getDisplacement = (point) => ({\n    y: displacements.get(point.y, point.x, edgeId),\n    x: displacements.get(point.y, point.x, (displacements.shape[2] / 2) + edgeId),\n  });\n  const getStridedIndexNearPoint = (point, height, width) => ({\n    y: utils.clamp(Math.round(point.y / outputStride), 0, height - 1),\n    x: utils.clamp(Math.round(point.x / outputStride), 0, width - 1),\n  });\n\n  const [height, width] = scores.shape;\n  // Nearest neighbor interpolation for the source->target displacements.\n  const sourceKeypointIndices = getStridedIndexNearPoint(sourceKeypoint.position, height, width);\n  const displacement = getDisplacement(sourceKeypointIndices);\n  const displacedPoint = utils.addVectors(sourceKeypoint.position, displacement);\n  let targetKeypoint = displacedPoint;\n  for (let i = 0; i < offsetRefineStep; i++) {\n    const targetKeypointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);\n    const offsetPoint = utils.getOffsetPoint(targetKeypointIndices.y, targetKeypointIndices.x, targetId, offsets);\n    targetKeypoint = utils.addVectors(\n      { x: targetKeypointIndices.x * outputStride, y: targetKeypointIndices.y * outputStride },\n      { x: offsetPoint.x, y: offsetPoint.y },\n    );\n  }\n  const targetKeyPointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);\n  const score = scores.get(targetKeyPointIndices.y, targetKeyPointIndices.x, targetId);\n  return { position: targetKeypoint, part: utils.partNames[targetId], score };\n}\n\nexport function decodePose(root, scores, offsets, displacementsFwd, displacementsBwd) {\n  const tuples = utils.poseChain.map(([parentJoinName, childJoinName]) => ([utils.partIds[parentJoinName], utils.partIds[childJoinName]]));\n  const edgesFwd = tuples.map(([, childJointId]) => childJointId);\n  const edgesBwd = tuples.map(([parentJointId]) => parentJointId);\n  const numParts = scores.shape[2]; // [21,21,17]\n  const numEdges = edgesFwd.length;\n  const keypoints = new Array(numParts);\n  // Start a new detection instance at the position of the root.\n  const rootPoint = utils.getImageCoords(root.part, outputStride, offsets);\n  keypoints[root.part.id] = {\n    score: root.score,\n    part: utils.partNames[root.part.id] as BodyLandmark,\n    position: rootPoint,\n  };\n  // Decode the part positions upwards in the tree, following the backward displacements.\n  for (let edge = numEdges - 1; edge >= 0; --edge) {\n    const sourceId = edgesFwd[edge];\n    const targetId = edgesBwd[edge];\n    if (keypoints[sourceId] && !keypoints[targetId]) {\n      keypoints[targetId] = traverse(edge, keypoints[sourceId], targetId, scores, offsets, displacementsBwd);\n    }\n  }\n  // Decode the part positions downwards in the tree, following the forward displacements.\n  for (let edge = 0; edge < numEdges; ++edge) {\n    const sourceId = edgesBwd[edge];\n    const targetId = edgesFwd[edge];\n    if (keypoints[sourceId] && !keypoints[targetId]) {\n      keypoints[targetId] = traverse(edge, keypoints[sourceId], targetId, scores, offsets, displacementsFwd);\n    }\n  }\n  return keypoints;\n}\n\nfunction scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, scores) {\n  const [height, width] = scores.shape;\n  let localMaximum = true;\n  const yStart = Math.max(heatmapY - localMaximumRadius, 0);\n  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n    const xStart = Math.max(heatmapX - localMaximumRadius, 0);\n    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n        localMaximum = false;\n        break;\n      }\n    }\n    if (!localMaximum) break;\n  }\n  return localMaximum;\n}\n\nexport function buildPartWithScoreQueue(minConfidence, scores) {\n  const [height, width, numKeypoints] = scores.shape;\n  const queue = new utils.MaxHeap(height * width * numKeypoints, ({ score }) => score);\n  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {\n    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {\n      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n        const score = scores.get(heatmapY, heatmapX, keypointId);\n        // Only consider parts with score greater or equal to threshold as root candidates.\n        if (score < minConfidence) continue;\n        // Only consider keypoints whose score is maximum in a local window.\n        if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, scores)) queue.enqueue({ score, part: { heatmapY, heatmapX, id: keypointId } });\n      }\n    }\n  }\n  return queue;\n}\n\nfunction withinRadius(poses, { x, y }, keypointId) {\n  return poses.some(({ keypoints }) => {\n    const correspondingKeypoint = keypoints[keypointId]?.position;\n    if (!correspondingKeypoint) return false;\n    return utils.squaredDistance(y, x, correspondingKeypoint.y, correspondingKeypoint.x) <= squaredNmsRadius;\n  });\n}\n\nfunction getInstanceScore(existingPoses, keypoints) {\n  const notOverlappedKeypointScores = keypoints.reduce((result, { position, score }, keypointId) => {\n    if (!withinRadius(existingPoses, position, keypointId)) result += score;\n    return result;\n  }, 0.0);\n  return notOverlappedKeypointScores / keypoints.length;\n}\n\nexport function decode(offsets, scores, displacementsFwd, displacementsBwd, maxDetected, minConfidence) {\n  const poses: Array<{ keypoints, box: Box, score: number }> = [];\n  const queue = buildPartWithScoreQueue(minConfidence, scores);\n  // Generate at most maxDetected object instances per image in decreasing root part score order.\n  while (poses.length < maxDetected && !queue.empty()) {\n    // The top element in the queue is the next root candidate.\n    const root = queue.dequeue();\n    // Part-based non-maximum suppression: We reject a root candidate if it is within a disk of `nmsRadius` pixels from the corresponding part of a previously detected instance.\n    // @ts-ignore this one is tree walk\n    const rootImageCoords = utils.getImageCoords(root.part, outputStride, offsets);\n    // @ts-ignore this one is tree walk\n    if (withinRadius(poses, rootImageCoords, root.part.id)) continue;\n    // Else start a new detection instance at the position of the root.\n    let keypoints = decodePose(root, scores, offsets, displacementsFwd, displacementsBwd);\n    keypoints = keypoints.filter((a) => a.score > minConfidence);\n    const score = getInstanceScore(poses, keypoints);\n    const box = utils.getBoundingBox(keypoints);\n    if (score > minConfidence) poses.push({ keypoints, box, score: Math.round(100 * score) / 100 });\n  }\n  return poses;\n}\n\nexport async function predict(input: Tensor, config: Config): Promise<BodyResult[]> {\n  /** posenet is mostly obsolete\n   * caching is not implemented\n   */\n  const res = tf.tidy(() => {\n    if (!model.inputs[0].shape) return [];\n    const resized = tf.image.resizeBilinear(input, [model.inputs[0].shape[2], model.inputs[0].shape[1]]);\n    const normalized = tf.sub(tf.div(tf.cast(resized, 'float32'), 127.5), 1.0);\n    const results: Array<Tensor> = model.execute(normalized, poseNetOutputs) as Array<Tensor>;\n    const results3d = results.map((y) => tf.squeeze(y, [0]));\n    results3d[1] = tf.sigmoid(results3d[1]); // apply sigmoid on scores\n    return results3d;\n  });\n\n  const buffers = await Promise.all(res.map((tensor: Tensor) => tensor.buffer()));\n  for (const t of res) tf.dispose(t);\n\n  const decoded = await decode(buffers[0], buffers[1], buffers[2], buffers[3], config.body.maxDetected, config.body.minConfidence);\n  if (!model.inputs[0].shape) return [];\n  const scaled = utils.scalePoses(decoded, [input.shape[1], input.shape[2]], [model.inputs[0].shape[2], model.inputs[0].shape[1]]) as BodyResult[];\n  return scaled;\n}\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (!model || env.initial) model = await loadModel(config.body.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n", "/**\n * Image segmentation for body detection model\n *\n * Based on:\n * - [**MediaPipe Meet**](https://drive.google.com/file/d/1lnP1bRi9CSqQQXUHa13159vLELYDgDu0/preview)\n * - [**MediaPipe Selfie**](https://drive.google.com/file/d/1dCfozqknMa068vVsO2j_1FgZkW_e3VWv/preview)\n */\n\nimport { log } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport { loadModel } from '../tfjs/load';\nimport * as image from '../image/image';\nimport { constants } from '../tfjs/constants';\nimport type { GraphModel, Tensor } from '../tfjs/types';\nimport type { Config } from '../config';\nimport { env } from '../util/env';\nimport type { Input, AnyCanvas } from '../exports';\n\nlet model: GraphModel;\nlet busy = false;\n\nexport async function load(config: Config): Promise<GraphModel> {\n  if (!model || env.initial) model = await loadModel(config.segmentation.modelPath);\n  else if (config.debug) log('cached model:', model['modelUrl']);\n  return model;\n}\n\nexport async function process(input: Input, background: Input | undefined, config: Config)\n: Promise<{ data: Array<number> | Tensor, canvas: AnyCanvas | null, alpha: AnyCanvas | null }> {\n  if (busy) return { data: [], canvas: null, alpha: null };\n  busy = true;\n  if (!model) await load(config);\n  const inputImage = await image.process(input, config);\n  const width = inputImage.tensor?.shape[2] || 0;\n  const height = inputImage.tensor?.shape[1] || 0;\n  if (!inputImage.tensor) return { data: [], canvas: null, alpha: null };\n  const t: Record<string, Tensor> = {};\n\n  t.resize = tf.image.resizeBilinear(inputImage.tensor, [model.inputs[0].shape ? model.inputs[0].shape[1] : 0, model.inputs[0].shape ? model.inputs[0].shape[2] : 0], false);\n  tf.dispose(inputImage.tensor);\n  t.norm = tf.div(t.resize, constants.tf255);\n  t.res = model.execute(t.norm) as Tensor;\n\n  t.squeeze = tf.squeeze(t.res, 0); // meet.shape:[1,256,256,1], selfie.shape:[1,144,256,2]\n  if (t.squeeze.shape[2] === 2) {\n    t.softmax = tf.softmax(t.squeeze); // model meet has two channels for fg and bg\n    [t.bg, t.fg] = tf.unstack(t.softmax, 2);\n    t.expand = tf.expandDims(t.fg, 2);\n    t.pad = tf.expandDims(t.expand, 0);\n    t.crop = tf.image.cropAndResize(t.pad, [[0, 0, 0.5, 0.5]], [0], [width, height]);\n    // running sofmax before unstack creates 2x2 matrix so we only take upper-left quadrant\n    // otherwise run softmax after unstack and use standard resize\n    // resizeOutput = tf.image.resizeBilinear(expand, [input.tensor?.shape[1], input.tensor?.shape[2]]);\n    t.data = tf.squeeze(t.crop, 0);\n  } else {\n    t.data = tf.image.resizeBilinear(t.squeeze, [height, width]); // model selfie has a single channel that we can use directly\n  }\n  const data = Array.from(await t.data.data()) as number[];\n\n  if (env.node && !env.Canvas && (typeof ImageData === 'undefined')) {\n    if (config.debug) log('canvas support missing');\n    Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n    return { data, canvas: null, alpha: null }; // running in nodejs so return alpha array as-is\n  }\n\n  const alphaCanvas = image.canvas(width, height);\n  // @ts-ignore browser is not defined in tfjs-node\n  if (tf.browser) await tf.browser.toPixels(t.data, alphaCanvas);\n  const alphaCtx = alphaCanvas.getContext('2d') as CanvasRenderingContext2D;\n  if (config.segmentation.blur && config.segmentation.blur > 0) alphaCtx.filter = `blur(${config.segmentation.blur}px)`; // use css filter for bluring, can be done with gaussian blur manually instead\n  const alphaData = alphaCtx.getImageData(0, 0, width, height);\n\n  const compositeCanvas = image.canvas(width, height);\n  const compositeCtx = compositeCanvas.getContext('2d') as CanvasRenderingContext2D;\n  if (inputImage.canvas) compositeCtx.drawImage(inputImage.canvas, 0, 0);\n  compositeCtx.globalCompositeOperation = 'darken'; // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation // best options are: darken, color-burn, multiply\n  if (config.segmentation.blur && config.segmentation.blur > 0) compositeCtx.filter = `blur(${config.segmentation.blur}px)`; // use css filter for bluring, can be done with gaussian blur manually instead\n  compositeCtx.drawImage(alphaCanvas, 0, 0);\n  compositeCtx.globalCompositeOperation = 'source-over'; // reset composite operation\n  compositeCtx.filter = 'none'; // reset css filter\n  const compositeData = compositeCtx.getImageData(0, 0, width, height);\n  for (let i = 0; i < width * height; i++) compositeData.data[4 * i + 3] = alphaData.data[4 * i + 0]; // copy original alpha value to new composite canvas\n  compositeCtx.putImageData(compositeData, 0, 0);\n\n  let mergedCanvas: AnyCanvas | null = null;\n  if (background && compositeCanvas) { // draw background with segmentation as overlay if background is present\n    mergedCanvas = image.canvas(width, height);\n    const bgImage = await image.process(background, config);\n    tf.dispose(bgImage.tensor);\n    const ctxMerge = mergedCanvas.getContext('2d') as CanvasRenderingContext2D;\n    ctxMerge.drawImage(bgImage.canvas as HTMLCanvasElement, 0, 0, mergedCanvas.width, mergedCanvas.height);\n    ctxMerge.drawImage(compositeCanvas, 0, 0);\n  }\n\n  Object.keys(t).forEach((tensor) => tf.dispose(t[tensor]));\n  busy = false;\n  // return { data, canvas: mergedCanvas || compositeCanvas, alpha: alphaCanvas };\n  return { data, canvas: compositeCanvas, alpha: alphaCanvas };\n}\n", "/** TFJS custom backend registration */\n\nimport type { Human } from '../human';\nimport { log } from '../util/util';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as image from '../image/image';\nimport * as models from '../models';\nimport type { AnyCanvas } from '../exports';\n// import { env } from '../env';\n\nexport const config = {\n  name: 'humangl',\n  priority: 999,\n  canvas: <null | AnyCanvas>null,\n  gl: <null | WebGL2RenderingContext>null,\n  extensions: <string[]> [],\n  webGLattr: { // https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2\n    alpha: false,\n    antialias: false,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: false,\n    depth: false,\n    stencil: false,\n    failIfMajorPerformanceCaveat: false,\n    desynchronized: true,\n  },\n};\n\nfunction extensions(): void {\n  /*\n  https://www.khronos.org/registry/webgl/extensions/\n  https://webglreport.com/?v=2\n  */\n  const gl = config.gl;\n  if (!gl) return;\n  config.extensions = gl.getSupportedExtensions() as string[];\n  // gl.getExtension('KHR_parallel_shader_compile');\n}\n\n/**\n * Registers custom WebGL2 backend to be used by Human library\n *\n * @returns void\n */\nexport async function register(instance: Human): Promise<void> {\n  // force backend reload if gl context is not valid\n  if (instance.config.backend !== 'humangl') return;\n  if ((config.name in tf.engine().registry) && (!config.gl || !config.gl.getParameter(config.gl.VERSION))) {\n    log('error: humangl backend invalid context');\n    models.reset(instance);\n    /*\n    log('resetting humangl backend');\n    await tf.removeBackend(config.name);\n    await register(instance); // re-register\n    */\n  }\n  if (!tf.findBackend(config.name)) {\n    try {\n      config.canvas = await image.canvas(100, 100);\n    } catch (err) {\n      log('error: cannot create canvas:', err);\n      return;\n    }\n    try {\n      config.gl = config.canvas?.getContext('webgl2', config.webGLattr) as WebGL2RenderingContext;\n      const glv2 = config.gl.getParameter(config.gl.VERSION).includes('2.0');\n      if (!glv2) {\n        log('override: using fallback webgl backend as webgl 2.0 is not detected');\n        instance.config.backend = 'webgl';\n        return;\n      }\n      if (config.canvas) {\n        config.canvas.addEventListener('webglcontextlost', async (e) => {\n          log('error: humangl:', e.type);\n          log('possible browser memory leak using webgl or conflict with multiple backend registrations');\n          instance.emit('error');\n          throw new Error('backend error: webgl context lost');\n          // log('resetting humangl backend');\n          // env.initial = true;\n          // models.reset(instance);\n          // await tf.removeBackend(config.name);\n          // await register(instance); // re-register\n        });\n        config.canvas.addEventListener('webglcontextrestored', (e) => {\n          log('error: humangl context restored:', e);\n        });\n        config.canvas.addEventListener('webglcontextcreationerror', (e) => {\n          log('error: humangl context create:', e);\n        });\n      }\n    } catch (err) {\n      log('error: cannot get WebGL context:', err);\n      return;\n    }\n    try {\n      tf.setWebGLContext(2, config.gl);\n    } catch (err) {\n      log('error: cannot set WebGL context:', err);\n      return;\n    }\n    try {\n      const ctx = new tf.GPGPUContext(config.gl);\n      tf.registerBackend(config.name, () => new tf.MathBackendWebGL(ctx), config.priority);\n    } catch (err) {\n      log('error: cannot register WebGL backend:', err);\n      return;\n    }\n    try {\n      const kernels = tf.getKernelsForBackend('webgl');\n      kernels.forEach((kernelConfig) => {\n        const newKernelConfig = { ...kernelConfig, backendName: config.name };\n        tf.registerKernel(newKernelConfig);\n      });\n    } catch (err) {\n      log('error: cannot update WebGL backend registration:', err);\n      return;\n    }\n    const current = tf.backend().getGPGPUContext ? tf.backend().getGPGPUContext().gl : null;\n    if (current) {\n      log(`humangl webgl version:${current.getParameter(current.VERSION)} renderer:${current.getParameter(current.RENDERER)}`);\n    } else {\n      log('error: no current gl context:', current, config.gl);\n      return;\n    }\n    try {\n      if (tf.env().flagRegistry['WEBGL_VERSION']) tf.env().set('WEBGL_VERSION', 2);\n    } catch (err) {\n      log('error: cannot set WebGL backend flags:', err);\n      return;\n    }\n    extensions();\n    log('backend registered:', config.name);\n  }\n}\n", "/** TFJS backend initialization and customization */\n\nimport type { Human } from '../human';\nimport { log, now } from '../util/util';\nimport { env } from '../util/env';\nimport * as humangl from './humangl';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as constants from './constants';\n\nfunction registerCustomOps() {\n  if (!env.kernels.includes('mod')) {\n    const kernelMod = {\n      kernelName: 'Mod',\n      backendName: tf.getBackend(),\n      kernelFunc: (op) => tf.tidy(() => tf.sub(op.inputs.a, tf.mul(tf.div(op.inputs.a, op.inputs.b), op.inputs.b))),\n    };\n    tf.registerKernel(kernelMod);\n    env.kernels.push('mod');\n  }\n  if (!env.kernels.includes('floormod')) {\n    const kernelMod = {\n      kernelName: 'FloorMod',\n      backendName: tf.getBackend(),\n      kernelFunc: (op) => tf.tidy(() => tf.floorDiv(op.inputs.a / op.inputs.b) * op.inputs.b + tf.mod(op.inputs.a, op.inputs.b)),\n    };\n    tf.registerKernel(kernelMod);\n    env.kernels.push('floormod');\n  }\n}\n\nexport async function check(instance: Human, force = false) {\n  instance.state = 'backend';\n  if (force || env.initial || (instance.config.backend && (instance.config.backend.length > 0) && (tf.getBackend() !== instance.config.backend))) {\n    const timeStamp = now();\n\n    if (instance.config.backend && instance.config.backend.length > 0) {\n      // detect web worker\n      // @ts-ignore ignore missing type for WorkerGlobalScope as that is the point\n      if (typeof window === 'undefined' && typeof WorkerGlobalScope !== 'undefined' && instance.config.debug) {\n        if (instance.config.debug) log('running inside web worker');\n      }\n\n      // force browser vs node backend\n      if (env.browser && instance.config.backend === 'tensorflow') {\n        if (instance.config.debug) log('override: backend set to tensorflow while running in browser');\n        instance.config.backend = 'humangl';\n      }\n      if (env.node && (instance.config.backend === 'webgl' || instance.config.backend === 'humangl')) {\n        if (instance.config.debug) log(`override: backend set to ${instance.config.backend} while running in nodejs`);\n        instance.config.backend = 'tensorflow';\n      }\n\n      // handle webgpu\n      if (env.browser && instance.config.backend === 'webgpu') {\n        if (typeof navigator === 'undefined' || typeof navigator['gpu'] === 'undefined') {\n          log('override: backend set to webgpu but browser does not support webgpu');\n          instance.config.backend = 'humangl';\n        } else {\n          const adapter = await navigator['gpu'].requestAdapter();\n          if (instance.config.debug) log('enumerated webgpu adapter:', adapter);\n          if (!adapter) {\n            log('override: backend set to webgpu but browser reports no available gpu');\n            instance.config.backend = 'humangl';\n          } else {\n            // @ts-ignore requestAdapterInfo is not in tslib\n            // eslint-disable-next-line no-undef\n            const adapterInfo = 'requestAdapterInfo' in adapter ? await (adapter as GPUAdapter).requestAdapterInfo() : undefined;\n            // if (adapter.features) adapter.features.forEach((feature) => log('webgpu features:', feature));\n            log('webgpu adapter info:', adapterInfo);\n          }\n        }\n      }\n\n      // check available backends\n      if (instance.config.backend === 'humangl') await humangl.register(instance);\n      const available = Object.keys(tf.engine().registryFactory);\n      if (instance.config.debug) log('available backends:', available);\n\n      if (!available.includes(instance.config.backend)) {\n        log(`error: backend ${instance.config.backend} not found in registry`);\n        instance.config.backend = env.node ? 'tensorflow' : 'webgl';\n        if (instance.config.debug) log(`override: setting backend ${instance.config.backend}`);\n      }\n\n      if (instance.config.debug) log('setting backend:', instance.config.backend);\n\n      // customize wasm\n      if (instance.config.backend === 'wasm') {\n        if (tf.env().flagRegistry['CANVAS2D_WILL_READ_FREQUENTLY']) tf.env().set('CANVAS2D_WILL_READ_FREQUENTLY', true);\n        if (instance.config.debug) log('wasm path:', instance.config.wasmPath);\n        if (typeof tf?.setWasmPaths !== 'undefined') await tf.setWasmPaths(instance.config.wasmPath, instance.config.wasmPlatformFetch);\n        else throw new Error('backend error: attempting to use wasm backend but wasm path is not set');\n        const simd = await tf.env().getAsync('WASM_HAS_SIMD_SUPPORT');\n        const mt = await tf.env().getAsync('WASM_HAS_MULTITHREAD_SUPPORT');\n        if (instance.config.debug) log(`wasm execution: ${simd ? 'SIMD' : 'no SIMD'} ${mt ? 'multithreaded' : 'singlethreaded'}`);\n        if (instance.config.debug && !simd) log('warning: wasm simd support is not enabled');\n      }\n\n      try {\n        await tf.setBackend(instance.config.backend);\n        await tf.ready();\n        constants.init();\n      } catch (err) {\n        log('error: cannot set backend:', instance.config.backend, err);\n        return false;\n      }\n    }\n\n    // customize humangl\n    if (tf.getBackend() === 'humangl') {\n      if (tf.env().flagRegistry['CHECK_COMPUTATION_FOR_ERRORS']) tf.env().set('CHECK_COMPUTATION_FOR_ERRORS', false);\n      if (tf.env().flagRegistry['WEBGL_CPU_FORWARD']) tf.env().set('WEBGL_CPU_FORWARD', true);\n      if (tf.env().flagRegistry['WEBGL_USE_SHAPES_UNIFORMS']) tf.env().set('WEBGL_USE_SHAPES_UNIFORMS', true);\n      if (tf.env().flagRegistry['CPU_HANDOFF_SIZE_THRESHOLD']) tf.env().set('CPU_HANDOFF_SIZE_THRESHOLD', 256);\n      if (tf.env().flagRegistry['WEBGL_EXP_CONV']) tf.env().set('WEBGL_EXP_CONV', true); // <https://github.com/tensorflow/tfjs/issues/6678>\n      if (tf.env().flagRegistry['USE_SETTIMEOUTWPM']) tf.env().set('USE_SETTIMEOUTWPM', true); // <https://github.com/tensorflow/tfjs/issues/6687>\n      // if (tf.env().flagRegistry['WEBGL_PACK_DEPTHWISECONV'])  tf.env().set('WEBGL_PACK_DEPTHWISECONV', false);\n      // if (if (tf.env().flagRegistry['WEBGL_FORCE_F16_TEXTURES']) && !instance.config.object.enabled) tf.env().set('WEBGL_FORCE_F16_TEXTURES', true); // safe to use 16bit precision\n      if (typeof instance.config['deallocate'] !== 'undefined' && instance.config['deallocate']) { // hidden param\n        log('changing webgl: WEBGL_DELETE_TEXTURE_THRESHOLD:', true);\n        tf.env().set('WEBGL_DELETE_TEXTURE_THRESHOLD', 0);\n      }\n      if (tf.backend().getGPGPUContext) {\n        const gl = await tf.backend().getGPGPUContext().gl;\n        if (instance.config.debug) log(`gl version:${gl.getParameter(gl.VERSION)} renderer:${gl.getParameter(gl.RENDERER)}`);\n      }\n    }\n\n    // customize webgpu\n    if (tf.getBackend() === 'webgpu') {\n      // if (tf.env().flagRegistry['WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD']) tf.env().set('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD', 512);\n      // if (tf.env().flagRegistry['WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE']) tf.env().set('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE', 0);\n      // if (tf.env().flagRegistry['WEBGPU_CPU_FORWARD']) tf.env().set('WEBGPU_CPU_FORWARD', true);\n    }\n\n    // wait for ready\n    tf.enableProdMode();\n    await tf.ready();\n\n    instance.performance.initBackend = Math.trunc(now() - timeStamp);\n    instance.config.backend = tf.getBackend();\n\n    await env.updateBackend(); // update env on backend init\n    registerCustomOps();\n    // await env.updateBackend(); // update env on backend init\n  }\n  return true;\n}\n\n// register fake missing tfjs ops\nexport function fakeOps(kernelNames: Array<string>, config) {\n  // if (config.debug) log('registerKernel:', kernelNames);\n  for (const kernelName of kernelNames) {\n    const kernelConfig = {\n      kernelName,\n      backendName: config.backend,\n      kernelFunc: () => { if (config.debug) log('kernelFunc', kernelName, config.backend); },\n      // setupFunc: () => { if (config.debug) log('kernelFunc', kernelName, config.backend); },\n      // disposeFunc: () => { if (config.debug) log('kernelFunc', kernelName, config.backend); },\n    };\n    tf.registerKernel(kernelConfig);\n  }\n  env.kernels = tf.getKernelsForBackend(tf.getBackend()).map((kernel) => kernel.kernelName.toLowerCase()); // re-scan registered ops\n}\n", "/**\n * Face algorithm implementation\n * Uses FaceMesh, Emotion and FaceRes models to create a unified pipeline\n */\n\nimport { log, now } from '../util/util';\nimport { env } from '../util/env';\nimport * as tf from '../../dist/tfjs.esm.js';\nimport * as facemesh from './facemesh';\nimport type { FaceResult } from '../result';\nimport type { Tensor } from '../tfjs/types';\nimport type { Human } from '../human';\n\nexport const detectFace = async (instance: Human /* instance of human */, input: Tensor): Promise<FaceResult[]> => {\n  // run facemesh, includes blazeface and iris\n  // eslint-disable-next-line no-async-promise-executor\n  const timeStamp: number = now();\n\n  const faceRes: Array<FaceResult> = [];\n  instance.state = 'run:face';\n\n  const faces = await facemesh.predict(input, instance.config);\n  instance.performance.face = env.perfadd ? (instance.performance.face || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);\n  if (!input.shape || input.shape.length !== 4) return [];\n  if (!faces) return [];\n  // for (const face of faces) {\n  for (let i = 0; i < faces.length; i++) {\n    // instance.analyze('Get Face');\n\n    // is something went wrong, skip the face\n    // @ts-ignore possibly undefied\n    if (!faces[i].tensor || faces[i].tensor['isDisposedInternal']) {\n      log('Face object is disposed:', faces[i].tensor);\n      continue;\n    }\n\n    // calculate face angles\n    // const rotation = faces[i].mesh && (faces[i].mesh.length > 200) ? calculateFaceAngle(faces[i], [input.shape[2], input.shape[1]]) : null;\n\n    // instance.analyze('Finish Face:');\n\n    // optionally return tensor\n    // const tensor = instance.config.face.detector?.return ? tf.squeeze(faces[i].tensor) : null;\n    // dispose original face tensor\n    tf.dispose(faces[i].tensor);\n    // delete temp face image\n    if (faces[i].tensor) delete faces[i].tensor;\n    // combine results\n    const res: FaceResult = {\n      ...faces[i],\n      id: i,\n    };\n    // if (rotation) res.rotation = rotation;\n    // if (tensor) res.tensor = tensor;\n    faceRes.push(res);\n    // instance.analyze('End Face');\n  }\n  // instance.analyze('End FaceMesh:');\n  if (instance.config.async) {\n    if (instance.performance.face) delete instance.performance.face;\n    if (instance.performance.age) delete instance.performance.age;\n    if (instance.performance.gender) delete instance.performance.gender;\n    if (instance.performance.emotion) delete instance.performance.emotion;\n  }\n  return faceRes;\n};\n", "/**\n * Results interpolation for smoothening of video detection results inbetween detected frames\n */\n\nimport type { Result, FaceResult, BodyResult, HandResult, ObjectResult, GestureResult, PersonResult, Box, Point, BodyLandmark, BodyAnnotation } from '../result';\nimport type { Config } from '../config';\n\nimport * as moveNetCoords from '../body/movenetcoords';\nimport * as blazePoseCoords from '../body/blazeposecoords';\nimport * as efficientPoseCoords from '../body/efficientposecoords';\nimport { now } from './util';\nimport { env } from './env';\n\nconst bufferedResult: Result = { face: [], body: [], hand: [], gesture: [], object: [], persons: [], performance: {}, timestamp: 0, error: null };\nlet interpolateTime = 0;\n\nexport function calc(newResult: Result, config: Config): Result {\n  const t0 = now();\n  if (!newResult) return { face: [], body: [], hand: [], gesture: [], object: [], persons: [], performance: {}, timestamp: 0, error: null };\n  // each record is only updated using deep clone when number of detected record changes, otherwise it will converge by itself\n  // otherwise bufferedResult is a shallow clone of result plus updated local calculated values\n  // thus mixing by-reference and by-value assignments to minimize memory operations\n\n  const elapsed = Date.now() - newResult.timestamp;\n  // curve fitted: buffer = 8 - ln(delay)\n  // interpolation formula: current = ((buffer - 1) * previous + live) / buffer\n  // - at  50ms delay buffer = ~4.1 => 28% towards live data\n  // - at 250ms delay buffer = ~2.5 => 40% towards live data\n  // - at 500ms delay buffer = ~1.8 => 55% towards live data\n  // - at 750ms delay buffer = ~1.4 => 71% towards live data\n  // - at  1sec delay buffer = 1 which means live data is used\n  const bufferedFactor = elapsed < 1000 ? 8 - Math.log(elapsed + 1) : 1;\n\n  if (newResult.canvas) bufferedResult.canvas = newResult.canvas;\n  if (newResult.error) bufferedResult.error = newResult.error;\n\n  // interpolate body results\n  if (!bufferedResult.body || (newResult.body.length !== bufferedResult.body.length)) {\n    bufferedResult.body = JSON.parse(JSON.stringify(newResult.body as BodyResult[])); // deep clone once\n  } else {\n    for (let i = 0; i < newResult.body.length; i++) {\n      const box = newResult.body[i].box // update box\n        .map((newBoxCoord, j) => ((bufferedFactor - 1) * bufferedResult.body[i].box[j] + newBoxCoord) / bufferedFactor) as Box;\n      const boxRaw = newResult.body[i].boxRaw // update boxRaw\n        .map((newBoxCoord, j) => ((bufferedFactor - 1) * bufferedResult.body[i].boxRaw[j] + newBoxCoord) / bufferedFactor) as Box;\n      const keypoints = (newResult.body[i].keypoints // update keypoints\n        .map((newKpt, j) => ({\n          score: newKpt.score,\n          part: newKpt.part as BodyLandmark,\n          position: [\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[0] || 0) + (newKpt.position[0] || 0)) / bufferedFactor : newKpt.position[0],\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[1] || 0) + (newKpt.position[1] || 0)) / bufferedFactor : newKpt.position[1],\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[2] || 0) + (newKpt.position[2] || 0)) / bufferedFactor : newKpt.position[2],\n          ],\n          positionRaw: [\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[0] || 0) + (newKpt.positionRaw[0] || 0)) / bufferedFactor : newKpt.positionRaw[0],\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[1] || 0) + (newKpt.positionRaw[1] || 0)) / bufferedFactor : newKpt.positionRaw[1],\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[2] || 0) + (newKpt.positionRaw[2] || 0)) / bufferedFactor : newKpt.positionRaw[2],\n          ],\n          distance: [\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].distance?.[0] || 0) + (newKpt.distance?.[0] || 0)) / bufferedFactor : newKpt.distance?.[0],\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].distance?.[1] || 0) + (newKpt.distance?.[1] || 0)) / bufferedFactor : newKpt.distance?.[1],\n            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].distance?.[2] || 0) + (newKpt.distance?.[2] || 0)) / bufferedFactor : newKpt.distance?.[2],\n          ],\n        }))) as Array<{ score: number, part: BodyLandmark, position: [number, number, number?], positionRaw: [number, number, number?] }>;\n\n      const annotations: Record<BodyAnnotation, Point[][]> = {} as Record<BodyAnnotation, Point[][]>; // recreate annotations\n      let coords = { connected: {} };\n      if (config.body?.modelPath?.includes('efficientpose')) coords = efficientPoseCoords;\n      else if (config.body?.modelPath?.includes('blazepose')) coords = blazePoseCoords;\n      else if (config.body?.modelPath?.includes('movenet')) coords = moveNetCoords;\n      for (const [name, indexes] of Object.entries(coords.connected as Record<string, string[]>)) {\n        const pt: Array<Point[]> = [];\n        for (let j = 0; j < indexes.length - 1; j++) {\n          const pt0 = keypoints.find((kp) => kp.part === indexes[j]);\n          const pt1 = keypoints.find((kp) => kp.part === indexes[j + 1]);\n          // if (pt0 && pt1 && pt0.score > (config.body.minConfidence || 0) && pt1.score > (config.body.minConfidence || 0)) pt.push([pt0.position, pt1.position]);\n          if (pt0 && pt1) pt.push([pt0.position, pt1.position]);\n        }\n        annotations[name] = pt;\n      }\n      bufferedResult.body[i] = { ...newResult.body[i], box, boxRaw, keypoints, annotations: annotations as BodyResult['annotations'] }; // shallow clone plus updated values\n    }\n  }\n\n  // interpolate hand results\n  if (!bufferedResult.hand || (newResult.hand.length !== bufferedResult.hand.length)) {\n    bufferedResult.hand = JSON.parse(JSON.stringify(newResult.hand as HandResult[])); // deep clone once\n  } else {\n    for (let i = 0; i < newResult.hand.length; i++) {\n      const box = (newResult.hand[i].box// update box\n        .map((b, j) => ((bufferedFactor - 1) * bufferedResult.hand[i].box[j] + b) / bufferedFactor)) as Box;\n      const boxRaw = (newResult.hand[i].boxRaw // update boxRaw\n        .map((b, j) => ((bufferedFactor - 1) * bufferedResult.hand[i].boxRaw[j] + b) / bufferedFactor)) as Box;\n      if (bufferedResult.hand[i].keypoints.length !== newResult.hand[i].keypoints.length) bufferedResult.hand[i].keypoints = newResult.hand[i].keypoints; // reset keypoints as previous frame did not have them\n      const keypoints = newResult.hand[i].keypoints && newResult.hand[i].keypoints.length > 0 ? newResult.hand[i].keypoints // update landmarks\n        .map((landmark, j) => landmark\n          .map((coord, k) => (((bufferedFactor - 1) * (bufferedResult.hand[i].keypoints[j][k] || 1) + (coord || 0)) / bufferedFactor)) as Point)\n        : [];\n      let annotations = {};\n      if (Object.keys(bufferedResult.hand[i].annotations).length !== Object.keys(newResult.hand[i].annotations).length) {\n        bufferedResult.hand[i].annotations = newResult.hand[i].annotations; // reset annotations as previous frame did not have them\n        annotations = bufferedResult.hand[i].annotations;\n      } else if (newResult.hand[i].annotations) {\n        for (const key of Object.keys(newResult.hand[i].annotations)) { // update annotations\n          annotations[key] = newResult.hand[i].annotations[key] && newResult.hand[i].annotations[key][0]\n            ? newResult.hand[i].annotations[key]\n              .map((val, j: number) => val\n                .map((coord: number, k: number) => ((bufferedFactor - 1) * bufferedResult.hand[i].annotations[key][j][k] + coord) / bufferedFactor))\n            : null;\n        }\n      }\n      bufferedResult.hand[i] = { ...newResult.hand[i], box, boxRaw, keypoints, annotations: annotations as HandResult['annotations'] }; // shallow clone plus updated values\n    }\n  }\n\n  // interpolate face results\n  if (!bufferedResult.face || (newResult.face.length !== bufferedResult.face.length)) {\n    bufferedResult.face = JSON.parse(JSON.stringify(newResult.face as FaceResult[])); // deep clone once\n  } else {\n    for (let i = 0; i < newResult.face.length; i++) {\n      const box = (newResult.face[i].box // update box\n        .map((b, j) => ((bufferedFactor - 1) * bufferedResult.face[i].box[j] + b) / bufferedFactor)) as Box;\n      const boxRaw = (newResult.face[i].boxRaw // update boxRaw\n        .map((b, j) => ((bufferedFactor - 1) * bufferedResult.face[i].boxRaw[j] + b) / bufferedFactor)) as Box;\n      if (newResult.face[i].rotation) {\n        const rotation: {\n          matrix: [number, number, number, number, number, number, number, number, number],\n          angle: { roll: number, yaw: number, pitch: number },\n          gaze: { bearing: number, strength: number }\n        } = { matrix: [0, 0, 0, 0, 0, 0, 0, 0, 0], angle: { roll: 0, yaw: 0, pitch: 0 }, gaze: { bearing: 0, strength: 0 } };\n        rotation.matrix = newResult.face[i].rotation?.matrix as [number, number, number, number, number, number, number, number, number];\n        rotation.angle = {\n          roll: ((bufferedFactor - 1) * (bufferedResult.face[i].rotation?.angle?.roll || 0) + (newResult.face[i].rotation?.angle?.roll || 0)) / bufferedFactor,\n          yaw: ((bufferedFactor - 1) * (bufferedResult.face[i].rotation?.angle?.yaw || 0) + (newResult.face[i].rotation?.angle?.yaw || 0)) / bufferedFactor,\n          pitch: ((bufferedFactor - 1) * (bufferedResult.face[i].rotation?.angle?.pitch || 0) + (newResult.face[i].rotation?.angle?.pitch || 0)) / bufferedFactor,\n        };\n        rotation.gaze = {\n          // not fully correct due projection on circle, also causes wrap-around draw on jump from negative to positive\n          bearing: ((bufferedFactor - 1) * (bufferedResult.face[i].rotation?.gaze?.bearing || 0) + (newResult.face[i].rotation?.gaze?.bearing || 0)) / bufferedFactor,\n          strength: ((bufferedFactor - 1) * (bufferedResult.face[i].rotation?.gaze?.strength || 0) + (newResult.face[i].rotation?.gaze?.strength || 0)) / bufferedFactor,\n        };\n        bufferedResult.face[i] = { ...newResult.face[i], rotation, box, boxRaw }; // shallow clone plus updated values\n      }\n      bufferedResult.face[i] = { ...newResult.face[i], box, boxRaw }; // shallow clone plus updated values\n    }\n  }\n\n  // interpolate object detection results\n  if (!bufferedResult.object || (newResult.object.length !== bufferedResult.object.length)) {\n    bufferedResult.object = JSON.parse(JSON.stringify(newResult.object as ObjectResult[])); // deep clone once\n  } else {\n    for (let i = 0; i < newResult.object.length; i++) {\n      const box = (newResult.object[i].box // update box\n        .map((b, j) => ((bufferedFactor - 1) * bufferedResult.object[i].box[j] + b) / bufferedFactor)) as Box;\n      const boxRaw = (newResult.object[i].boxRaw // update boxRaw\n        .map((b, j) => ((bufferedFactor - 1) * bufferedResult.object[i].boxRaw[j] + b) / bufferedFactor)) as Box;\n      bufferedResult.object[i] = { ...newResult.object[i], box, boxRaw }; // shallow clone plus updated values\n    }\n  }\n\n  // interpolate person results\n  if (newResult.persons) {\n    const newPersons = newResult.persons; // trigger getter function\n    if (!bufferedResult.persons || (newPersons.length !== bufferedResult.persons.length)) {\n      bufferedResult.persons = JSON.parse(JSON.stringify(newPersons as PersonResult[]));\n    } else {\n      for (let i = 0; i < newPersons.length; i++) { // update person box, we don't update the rest as it's updated as reference anyhow\n        bufferedResult.persons[i].box = (newPersons[i].box\n          .map((box, j) => ((bufferedFactor - 1) * bufferedResult.persons[i].box[j] + box) / bufferedFactor)) as Box;\n      }\n    }\n  }\n\n  // just copy latest gestures without interpolation\n  if (newResult.gesture) bufferedResult.gesture = newResult.gesture as GestureResult[];\n\n  // append interpolation performance data\n  const t1 = now();\n  interpolateTime = env.perfadd ? interpolateTime + Math.round(t1 - t0) : Math.round(t1 - t0);\n  if (newResult.performance) bufferedResult.performance = { ...newResult.performance, interpolate: interpolateTime };\n\n  return bufferedResult;\n}\n", "/** Face descriptor type as number array */\nexport type Descriptor = Array<number>\nexport type MatchOptions = { order?: number, threshold?: number, multiplier?: number, min?: number, max?: number } | undefined;\n\n/** Calculates distance between two descriptors\n * @param options - calculation options\n * - order - algorithm to use\n *   Euclidean distance if `order` is 2 (default), Minkowski distance algorithm of nth order if `order` is higher than 2\n * - multiplier - by how much to enhance difference analysis in range of 1..100\n *   default is 20 which normalizes results to similarity above 0.5 can be considered a match\n */\nexport function distance(descriptor1: Descriptor, descriptor2: Descriptor, options: MatchOptions = { order: 2, multiplier: 25 }) {\n  // general minkowski distance, euclidean distance is limited case where order is 2\n  let sum = 0;\n  for (let i = 0; i < descriptor1.length; i++) {\n    const diff = (!options.order || options.order === 2) ? (descriptor1[i] - descriptor2[i]) : (Math.abs(descriptor1[i] - descriptor2[i]));\n    sum += (!options.order || options.order === 2) ? (diff * diff) : (diff ** options.order);\n  }\n  return (options.multiplier || 20) * sum;\n}\n\n// invert distance to similarity, normalize to given range and clamp\nconst normalizeDistance = (dist, order, min, max) => {\n  if (dist === 0) return 1; // short circuit for identical inputs\n  const root = order === 2 ? Math.sqrt(dist) : dist ** (1 / order); // take root of distance\n  const norm = (1 - (root / 100) - min) / (max - min); // normalize to range\n  const clamp = Math.max(Math.min(norm, 1), 0); // clamp to 0..1\n  return clamp;\n};\n\n/** Calculates normalized similarity between two face descriptors based on their `distance`\n * @param options - calculation options\n * - order - algorithm to use\n *   Euclidean distance if `order` is 2 (default), Minkowski distance algorithm of nth order if `order` is higher than 2\n * - multiplier - by how much to enhance difference analysis in range of 1..100\n *   default is 20 which normalizes results to similarity above 0.5 can be considered a match\n * - min - normalize similarity result to a given range\n * - max - normalzie similarity resutl to a given range\n *   default is 0.2...0.8\n * Returns similarity between two face descriptors normalized to 0..1 range where 0 is no similarity and 1 is perfect similarity\n */\nexport function similarity(descriptor1: Descriptor, descriptor2: Descriptor, options: MatchOptions = { order: 2, multiplier: 25, min: 0.2, max: 0.8 }) {\n  const dist = distance(descriptor1, descriptor2, options);\n  return normalizeDistance(dist, options.order || 2, options.min || 0, options.max || 1);\n}\n\n/** Matches given descriptor to a closest entry in array of descriptors\n * @param descriptor - face descriptor\n * @param descriptors - array of face descriptors to commpare given descriptor to\n * @param options - see `similarity` method for options description\n * Returns\n * - `index` index array index where best match was found or -1 if no matches\n * - `distance` calculated `distance` of given descriptor to the best match\n * - `similarity` calculated normalized `similarity` of given descriptor to the best match\n*/\nexport function match(descriptor: Descriptor, descriptors: Array<Descriptor>, options: MatchOptions = { order: 2, multiplier: 25, threshold: 0, min: 0.2, max: 0.8 }) {\n  if (!Array.isArray(descriptor) || !Array.isArray(descriptors) || descriptor.length < 64 || descriptors.length === 0) { // validate input\n    return { index: -1, distance: Number.POSITIVE_INFINITY, similarity: 0 };\n  }\n  let lowestDistance = Number.MAX_SAFE_INTEGER;\n  let index = -1;\n  for (let i = 0; i < descriptors.length; i++) {\n    const res = descriptors[i].length === descriptor.length ? distance(descriptor, descriptors[i], options) : Number.MAX_SAFE_INTEGER;\n    if (res < lowestDistance) {\n      lowestDistance = res;\n      index = i;\n    }\n    if (lowestDistance < (options.threshold || 0)) break;\n  }\n  const normalizedSimilarity = normalizeDistance(lowestDistance, options.order || 2, options.min || 0, options.max || 1);\n  return { index, distance: lowestDistance, similarity: normalizedSimilarity };\n}\n", "/**\n * Analyze detection Results and sort&combine them into per-person view\n */\n\nimport type { FaceResult, BodyResult, HandResult, GestureResult, PersonResult, Box } from '../result';\n\nexport function join(faces: Array<FaceResult>, bodies: Array<BodyResult>, hands: Array<HandResult>, gestures: Array<GestureResult>, shape: Array<number> | undefined): Array<PersonResult> {\n  let id = 0;\n  const persons: Array<PersonResult> = [];\n  for (const face of faces) { // person is defined primarily by face and then we append other objects as found\n    const person: PersonResult = { id: id++, face, body: null, hands: { left: null, right: null }, gestures: [], box: [0, 0, 0, 0] };\n    for (const body of bodies) {\n      if (face.box[0] > body.box[0] // x within body\n        && face.box[0] < body.box[0] + body.box[2]\n        && face.box[1] + face.box[3] > body.box[1] // y within body\n        && face.box[1] + face.box[3] < body.box[1] + body.box[3]) {\n        person.body = body;\n      }\n    }\n    if (person.body) { // only try to join hands if body is found\n      for (const hand of hands) {\n        if (hand.box[0] + hand.box[2] > person.body.box[0] // x within body for left hand\n          && hand.box[0] + hand.box[2] < person.body.box[0] + person.body.box[2]\n          && hand.box[1] + hand.box[3] > person.body.box[1] // x within body for left hand\n          && hand.box[1] + hand.box[3] < person.body.box[1] + person.body.box[3]) {\n          if (person.hands) person.hands.left = hand;\n        }\n        if (hand.box[0] < person.body.box[0] + person.body.box[2] // x within body for right hand\n          && hand.box[0] > person.body.box[0]\n          && hand.box[1] + hand.box[3] > person.body.box[1] // x within body for right hand\n          && hand.box[1] + hand.box[3] < person.body.box[1] + person.body.box[3]) {\n          if (person.hands) person.hands.right = hand;\n        }\n      }\n    }\n    for (const gesture of gestures) { // append all gestures according to ids\n      if (gesture['face'] !== undefined && gesture['face'] === face.id) person.gestures?.push(gesture);\n      else if (gesture['iris'] !== undefined && gesture['iris'] === face.id) person.gestures?.push(gesture);\n      else if (gesture['body'] !== undefined && gesture['body'] === person.body?.id) person.gestures?.push(gesture);\n      else if (gesture['hand'] !== undefined && gesture['hand'] === person.hands?.left?.id) person.gestures?.push(gesture);\n      else if (gesture['hand'] !== undefined && gesture['hand'] === person.hands?.right?.id) person.gestures?.push(gesture);\n    }\n\n    // create new overarching box from all boxes belonging to person\n    const x: number[] = [];\n    const y: number[] = [];\n    const extractXY = (box: Box | undefined) => { // extract all [x, y] coordinates from boxes [x, y, width, height]\n      if (box && box.length === 4) {\n        x.push(box[0], box[0] + box[2]);\n        y.push(box[1], box[1] + box[3]);\n      }\n    };\n    extractXY(person.face?.box);\n    extractXY(person.body?.box);\n    extractXY(person.hands?.left?.box);\n    extractXY(person.hands?.right?.box);\n    const minX = Math.min(...x);\n    const minY = Math.min(...y);\n    person.box = [minX, minY, Math.max(...x) - minX, Math.max(...y) - minY]; // create new overarching box\n\n    // shape is known so we calculate boxRaw as well\n    if (shape && shape[1] && shape[2]) person.boxRaw = [person.box[0] / shape[2], person.box[1] / shape[1], person.box[2] / shape[2], person.box[3] / shape[1]];\n\n    persons.push(person);\n  }\n  return persons;\n}\n", "/**\n * Embedded sample images used during warmup in dataURL format\n */\n\n// data:image/jpeg;base64,\nexport const face = `\n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`;\n\n// data:image/jpeg;base64,\nexport const body = `\n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\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAa2p1UYo5adbz+xbxMlvqJ1OqjDHLXree0ejmzNrWm953tPmTPWbWneZ7yoy5YhjrXXTjH8s75N\nmtkyxt0VZM2/m175N1V03yTKubMLXVXybeYLLX2VXy7eam+b0bOg4VquJW+rry4/O9uyZOq3UjVm\n9r25axMzPaIdvhns1kzbZddM0p5Y47z8/R2+HcF03Doi1a8+Xzvbv+TotJnjDXkt+K8ODHp8cY8N\nIpSO0RCwF2YAAAAAAAAACvUZYw6fJkntWN3k8dfHz2vLucdz8mkjFE9bz1+UOZosX1UzPm0nqI/W\nMYo9FlcPNklfFGeH/NshLGun+Cz6PtHZtVZWlRLS+jxPkRpIn7rdoupHTdA5s6SI+7H6Mfo+32Y2\n+To3neSIiZ7A0IjPXpXLePlMotGW3272t85datKzHZjbTVnsDj+FG/2Y/RlGP4R+jo20u7H6N1Ql\no+H8I/REY957R+jpfReiK6eOYHLtj2tttH6KrY/6Y/R2c+kjeJiFVtLG24hxpw7/AHY/RRkw9O37\nO99Hrt1YX0tfOBLjcGp4XF8c+u8fs9c4dcVcGemSI61nd3IneN1orQAAAAAAAAAAAAABFqxes1tE\nTE9JiUgPKcX4RbRXnNgiZwWnrH4XPi28PdXpW9JraImsxtMS8pxXhF9DecuGJtgmf+1TWW2N/la1\nL7N7T5e3Vy6W3hsYcvLbqzbO9jvvCzvDR0+XeO7crO6FmGSvRThy/RtVXJ92elvk2rRvDUzU7pl4\nizsd2J3jeBpcNz+Lg5LT7+Pp+Xk3W7js5eAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADs0NTrN96Yp6edkW8Wzm6+LNTq4pvTHO9vOfRoWtt\n1mes95YWvs1s2fZldddOczLPLn2ju0MmebT3YZc2/mpm3qqllN1drsbZIhr3yzvtHf4AsvlYYseb\nV5Yx4KTe0+UQ6nDvZ3UazbJqd8OKeu33peq0eh0+hxcmnxxWPOfOfm0mP+steT/ji8N9mKY9suum\nL37+HHaPm9DSlaVitKxWsdohI0Y22gAgAAAAAAAAAABXnyRhw3yT92Nwef4xm8bVzET0rPJH5d12\n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\nAOZE/OsPS29nuH27YrV+VpeV9pdPXhOtw49NG9Mld55+vXcTPd42I47qo7xSfyWV9oM8d8VJ/VxM\nd8l46xWF9cV7en6o/qLfxp2I9ob+eCv/AHMo9op89P8A/wBORGmyT5R+qfo2X8P7n9Q/jTsx7RR5\n6ef+4/8AuHftg/8A6cWcOSO9J/WEbWr3pY7Efzp2Lcfv5YK/9zWy8d1E/ZpSv5Oba1/+Hb9lc+LP\nbFt87I7E/wAabWbiurvEx4nL/pjZzc2bJkn372t85ZXx55/BX85lucC0vPxnTxlnnjm32mOiZqUu\nLJ2p4TwnVavNWaYbRTfre0bQ99pcH0bT0xb78vmtiIiNojaErMwAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAHnfarF7umzRHaZrLjYrdIen9ocPi8JyTt1xzF4eUw23rCm3R4r6bMy\nwt6kdTaWLdjswmNoZontsCm0K5XWjopnuDC0dGpqG5bs08/daKV672MjbSaif6oh6Z5f2LtvptRX\n0tEvUN3Jfo8f7cYve0eX4zV7B5z20xc/C8eSPuZIRficfXlcPaG7ino08HWIbePpLF2NuiyOyrHK\n3fZFSwuovHVfaVF4QK5YWTM9UT0EKry6Ps1Tn4zjn8NZn9nOtLseydObiWW34cf918fWfk+PYANn\nKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq1WKM+ly4p+/WYeBxTNd6zG0xO0\nvobw3FcP0bi2em20Tbmj5Srr418V9sa2Z7qKyzi07MXUylhaU7yjqhLCeiq3ddaFNxFYW7NLNG8t\nzya+WO6Va9J7FW66mvwidnrXiPY3Ny8RyUn71Jj9Ht3RPjk19HK9pMHj8D1ER3rHN+jqqtTjjNps\nuOe16zAifXzfTz7kNyndpYazS9qT0mszDdoxrsi6m8LazMq6zDOsq1ZEyrt1WWlXaUCqyq0rbKbi\nFdp6PReyFd8uqv8ACsfy83aXrPZHHto89/xX2/SP/dpj6y8vx6EBq5gAAAAAAAAAAAAAAAAAAAAA\n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\nNO67NbkhzNVnmInqzaOZrL93JyZeV0M1++7S02jvxDWxhxx033tPpC8Z6rrezWjmZyazJG2/u03h\n2vFibTHoqvamiwVwY+nLGzV0+SZ1Mx8G0/45tOhzJ5lXMc3UVXRdlF1HP+iYsDPLPPy49/tz1+Te\npSIr0ho6ak5Ms5J8o2q6NImOrHV7XX488ypzTtHXo0s9t6zG7c1G1qz6ubeZiZ3UatXJG3yauSO7\ncvMTEx5tPLb3prPRMVr0HB8vicNxf0+7+kt+LOJwTJyY/Bnz3tH93X36N58cWvq6LSyiyndMSlC7\nmZcymLJiwLosmJVRLKLAtiU7q4lMSCzc3YxJuDMRuAlKAEgAAAlAkAAAAAABKAEgAAAAAJAAAAAA\nAAAAAAAEgAAAAAAAAAAAAAkAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAhIAAACAAAASgAAAAAAEAAAA\nhGzJAImGMwzQDDZjNVuyNgUTVhNGxysZqDVmiu1G5NN2M4waM0+DCaN2cbGcQNGaMZq3JxMJxA1J\nqx2bU4kU09slorWNwa20z02RXHbJbl26QvtFovbHWkxEdJt5y2MOHlr2U1W3jx+1hiw8vSO63lmI\nXRTaEWmtY6snRHO1VpmJ+DjavpSZl2s8b7y4HFcnh0n0gha5ebJN55KRM2mdoiPN6fh+kpwXh0Wy\nRHj5Otp/s5Ps1p62y31+em9aTMYt/OfVfxTiPjZ52naI7fBrI5t66xz5+a1rW7yx0eSL6iZjtEOX\nqNbSletom3lENjh2fbHzbbWt3iVozruc+5ztWubf4M4ybpQ2Oboyrva0Vjza8WdDR4OkXt3n9ldX\nkaePP9VtYqctYhdvt5oivTeCZ2YOxXk6ubqMfV0b9mrljfqlFcq88k7z2U5axeItDa1OPessuC8P\nya7XRWYnwqdbT/ZMilvIu4dpslNdixXja8Y5tt85djZdbDWnGOesRtXFtuw6T27No5Kx2OrKYQlC\nExKJgBnEpiyvdlEgsizKLKollFgWxLKJVRLKJBbEp3VxLKJBnuMWQJEbpBIAAAJAAAABIAAAAAAA\nlAJAAAAAAAAAAAAAASAAAAAAAAAAAAAJAAAABAJABAlAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAA\nAAABAJQAAAAgAABAAI2EoBGyJhkgGPKxmqxAKpownHC+YRMdN5BrTj67R3bOn01o7p01Iv71u89o\n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\n2Q==`;\n", "/**\n * Warmup algorithm that uses embedded images to exercise loaded models for faster future inference\n */\n\nimport { log, now, mergeDeep } from './util/util';\nimport * as sample from './sample';\nimport * as tf from '../dist/tfjs.esm.js';\nimport * as image from './image/image';\nimport { env } from './util/env';\nimport type { Config } from './config';\nimport type { Result } from './result';\nimport type { Human, Models } from './human';\nimport type { Tensor } from './tfjs/types';\n\nasync function warmupBitmap(instance: Human): Promise<Result | undefined> {\n  const b64toBlob = (base64: string, type = 'application/octet-stream') => fetch(`data:${type};base64,${base64}`).then((res) => res.blob());\n  let blob;\n  let res;\n  switch (instance.config.warmup) {\n    case 'face': blob = await b64toBlob(sample.face); break;\n    case 'body':\n    case 'full': blob = await b64toBlob(sample.body); break;\n    default: blob = null;\n  }\n  if (blob) {\n    const bitmap = await createImageBitmap(blob);\n    res = await instance.detect(bitmap, instance.config);\n    bitmap.close();\n  }\n  return res;\n}\n\nasync function warmupCanvas(instance: Human): Promise<Result | undefined> {\n  return new Promise((resolve) => {\n    let src;\n    // let size = 0;\n    switch (instance.config.warmup) {\n      case 'face':\n        // size = 256;\n        src = 'data:image/jpeg;base64,' + sample.face;\n        break;\n      case 'full':\n      case 'body':\n        // size = 1200;\n        src = 'data:image/jpeg;base64,' + sample.body;\n        break;\n      default:\n        src = null;\n    }\n    // src = encodeURI('../assets/human-sample-upper.jpg');\n    let img: HTMLImageElement;\n    if (typeof Image !== 'undefined') img = new Image();\n    // @ts-ignore env.image is an external monkey-patch\n    else if (env.Image) img = new env.Image();\n    else return;\n    img.onload = async () => {\n      const canvas = image.canvas(img.naturalWidth, img.naturalHeight);\n      if (!canvas) {\n        log('Warmup: Canvas not found');\n        resolve(undefined);\n      } else {\n        const ctx = canvas.getContext('2d');\n        if (ctx) ctx.drawImage(img, 0, 0);\n        // const data = ctx?.getImageData(0, 0, canvas.height, canvas.width);\n        const tensor = await instance.image(canvas);\n        const res = await instance.detect(tensor.tensor as Tensor, instance.config);\n        resolve(res);\n      }\n    };\n    if (src) img.src = src;\n    else resolve(undefined);\n  });\n}\n\nasync function warmupNode(instance: Human): Promise<Result | undefined> {\n  const atob = (str: string) => Buffer.from(str, 'base64');\n  let img;\n  if (instance.config.warmup === 'face') img = atob(sample.face);\n  else img = atob(sample.body);\n  let res;\n  if ('node' in tf) {\n    // @ts-ignore tf.node may be undefined\n    const data = tf['node'].decodeJpeg(img);\n    const expanded = data.expandDims(0);\n    instance.tf.dispose(data);\n    // log('Input:', expanded);\n    res = await instance.detect(expanded, instance.config);\n    instance.tf.dispose(expanded);\n  } else {\n    if (instance.config.debug) log('Warmup tfjs-node not loaded');\n    /*\n    const input = await canvasJS.loadImage(img);\n    const canvas = canvasJS.createCanvas(input.width, input.height);\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0, input.width, input.height);\n    res = await instance.detect(input, instance.config);\n    */\n  }\n  return res;\n}\n\nasync function runInference(instance: Human) {\n  let res: Result | undefined;\n  if (typeof createImageBitmap === 'function') res = await warmupBitmap(instance);\n  else if (typeof Image !== 'undefined' || env.Canvas !== undefined) res = await warmupCanvas(instance);\n  else res = await warmupNode(instance);\n  return res;\n}\n\n/** Runs pre-compile on all loaded models */\nexport async function runCompile(allModels: Models) {\n  if (!tf.env().flagRegistry['ENGINE_COMPILE_ONLY']) return; // tfjs does not support compile-only inference\n  const backendType = tf.getBackend();\n  const webGLBackend = tf.backend();\n  if ((backendType !== 'webgl' && backendType !== 'humangl') || (!webGLBackend || !webGLBackend.checkCompileCompletion)) {\n    // log('compile pass: skip');\n    return;\n  }\n  tf.env().set('ENGINE_COMPILE_ONLY', true);\n  const numTensorsStart = tf.engine().state.numTensors;\n  const compiledModels: string[] = [];\n  for (const [modelName, model] of Object.entries(allModels).filter(([key, val]) => (key !== null && val !== null))) {\n    const shape = (model.inputs && model.inputs[0] && model.inputs[0].shape) ? [...model.inputs[0].shape] : [1, 64, 64, 3];\n    const dtype = (model.inputs && model.inputs[0] && model.inputs[0].dtype) ? model.inputs[0].dtype : 'float32';\n    for (let dim = 0; dim < shape.length; dim++) {\n      if (shape[dim] === -1) shape[dim] = dim === 0 ? 1 : 64; // override batch number and any dynamic dimensions\n    }\n    const tensor = tf.zeros(shape, dtype);\n    // const res = await model.executeAsync(tensor); // fails with current tfjs\n    try {\n      const res = model.execute(tensor);\n      compiledModels.push(modelName);\n      if (Array.isArray(res)) res.forEach((t) => tf.dispose(t));\n      else tf.dispose(res);\n    } catch {\n      log('compile fail model:', modelName);\n    }\n    tf.dispose(tensor);\n  }\n  const kernels = await webGLBackend.checkCompileCompletionAsync();\n  webGLBackend.getUniformLocations();\n  log('compile pass models:', compiledModels);\n  log('compile pass kernels:', kernels.length);\n  tf.env().set('ENGINE_COMPILE_ONLY', false);\n  const numTensorsEnd = tf.engine().state.numTensors;\n  if ((numTensorsEnd - numTensorsStart) > 0) log('tensor leak:', numTensorsEnd - numTensorsStart);\n}\n\n/** Warmup method pre-initializes all configured models for faster inference\n * - can take significant time on startup\n * - only used in browser environments for `webgl` and `humangl` backends\n * @param userConfig?: Config\n*/\nexport async function warmup(instance: Human, userConfig?: Partial<Config>): Promise<Result | undefined> {\n  const t0 = now();\n  instance.state = 'warmup';\n  if (userConfig) instance.config = mergeDeep(instance.config, userConfig) as Config;\n  if (!instance.config.warmup || instance.config.warmup.length === 0 || instance.config.warmup === 'none') {\n    return { face: [], body: [], hand: [], gesture: [], object: [], performance: instance.performance, timestamp: now(), persons: [], error: null };\n  }\n  return new Promise(async (resolve) => {\n    await runCompile(instance.models);\n    const res = await runInference(instance);\n    const t1 = now();\n    if (instance.config.debug) log('warmup', instance.config.warmup, Math.round(t1 - t0), 'ms');\n    instance.emit('warmup');\n    resolve(res);\n  });\n}\n", "/**\n * Human main module\n * @default Human Library\n * @summary <https://github.com/vladmandic/human>\n * @author <https://github.com/vladmandic>\n * @copyright <https://github.com/vladmandic>\n * @license MIT\n */\n\n// module imports\nimport { log, now, mergeDeep, validate } from './util/util';\nimport { defaults } from './config';\nimport { env, Env } from './util/env';\nimport { setModelLoadOptions } from './tfjs/load';\nimport * as tf from '../dist/tfjs.esm.js';\nimport * as app from '../package.json';\nimport * as backend from './tfjs/backend';\nimport * as face from './face/face';\nimport * as facemesh from './face/facemesh';\nimport * as humangl from './tfjs/humangl';\nimport * as image from './image/image';\nimport * as interpolate from './util/interpolate';\nimport * as match from './face/match';\nimport * as models from './models';\nimport * as persons from './util/persons';\nimport * as warmups from './warmup';\n// type definitions\nimport type { Input, Tensor, Config, Result, FaceResult, HandResult, BodyResult, ObjectResult, AnyCanvas, ModelStats } from './exports';\n// type exports\nexport * from './exports';\n\n/** **Human** library main class\n *\n * All methods and properties are available only as members of Human class\n *\n * - Configuration object definition: {@link Config}\n * - Results object definition: {@link Result}\n * - Possible inputs: {@link Input}\n *\n * @param userConfig - {@link Config}\n * @returns instance of {@link Human}\n */\nexport class Human {\n  /** Current version of Human library in *semver* format */\n  version: string;\n\n  /** Current configuration\n   * - Defaults: [config](https://github.com/vladmandic/human/blob/main/src/config.ts#L262)\n   */\n  config: Config;\n\n  /** Last known result of detect run\n   * - Can be accessed anytime after initial detection\n  */\n  result: Result;\n\n  /** Current state of Human library\n   * - Can be polled to determine operations that are currently executed\n   * - Progresses through: 'config', 'check', 'backend', 'load', 'run:<model>', 'idle'\n   */\n  state: string;\n\n  /** currenty processed image tensor and canvas */\n  process: { tensor: Tensor | null, canvas: AnyCanvas | null };\n\n  /** Instance of TensorFlow/JS used by Human\n   *  - Can be embedded or externally provided\n   * [TFJS API](https://js.tensorflow.org/api/latest/)\n   */\n  tf;\n\n  /** Object containing environment information used for diagnostics */\n  env: Env;\n\n  /** Currently loaded models\n   * @internal\n   * {@link Models}\n  */\n  models: models.Models;\n\n  /** Container for events dispatched by Human\n   * Possible events:\n   * - `create`: triggered when Human object is instantiated\n   * - `load`: triggered when models are loaded (explicitly or on-demand)\n   * - `image`: triggered when input image is processed\n   * - `result`: triggered when detection is complete\n   * - `warmup`: triggered when warmup is complete\n   * - `error`: triggered on some errors\n   */\n  events: EventTarget | undefined;\n  /** Reference face triangualtion array of 468 points, used for triangle references between points */\n  faceTriangulation: number[];\n  /** Refernce UV map of 468 values, used for 3D mapping of the face mesh */\n  faceUVMap: [number, number][];\n  /** Performance object that contains values for all recently performed operations */\n  performance: Record<string, number>; // perf members are dynamically defined as needed\n  #numTensors: number;\n  #analyzeMemoryLeaks: boolean;\n  #checkSanity: boolean;\n  /** WebGL debug info */\n  gl: Record<string, unknown>;\n  // definition end\n\n  /** Constructor for **Human** library that is futher used for all operations\n   * @param userConfig - user configuration object {@link Config}\n   */\n  constructor(userConfig?: Partial<Config>) {\n    this.env = env;\n    /*\n    defaults.wasmPath = tf.version['tfjs-core'].includes('-') // custom build or official build\n      ? 'https://vladmandic.github.io/tfjs/dist/'\n      : `https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${tf.version_core}/dist/`;\n    */\n    const tfVersion = (tf.version?.tfjs || tf.version_core).replace(/-(.*)/, '');\n    defaults.wasmPath = `https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${tfVersion}/dist/`;\n    defaults.modelBasePath = env.browser ? '../models/' : 'file://models/';\n    defaults.backend = env.browser ? 'humangl' : 'tensorflow';\n    this.version = app.version; // expose version property on instance of class\n    Object.defineProperty(this, 'version', { value: app.version }); // expose version property directly on class itself\n    this.config = JSON.parse(JSON.stringify(defaults));\n    Object.seal(this.config);\n    this.config.cacheModels = typeof indexedDB !== 'undefined';\n    if (userConfig) this.config = mergeDeep(this.config, userConfig);\n    setModelLoadOptions(this.config);\n    this.tf = tf;\n    this.state = 'idle';\n    this.#numTensors = 0;\n    this.#analyzeMemoryLeaks = false;\n    this.#checkSanity = false;\n    this.performance = {};\n    this.events = (typeof EventTarget !== 'undefined') ? new EventTarget() : undefined;\n    // object that contains all initialized models\n    this.models = new models.Models();\n    // reexport draw methods\n    this.result = { face: [], body: [], hand: [], gesture: [], object: [], performance: {}, timestamp: 0, persons: [], error: null };\n    // export access to image processing\n    // @ts-ignore eslint-typescript cannot correctly infer type in anonymous function\n    this.process = { tensor: null, canvas: null };\n    // export raw access to underlying models\n    this.faceTriangulation = facemesh.triangulation;\n    this.faceUVMap = facemesh.uvmap;\n    // set gl info\n    this.gl = humangl.config;\n    // include platform info\n    this.emit('create');\n  }\n\n  /** internal function to measure tensor leaks */\n  analyze = (...msg: string[]) => {\n    if (!this.#analyzeMemoryLeaks) return;\n    const currentTensors = this.tf.engine().state.numTensors;\n    const previousTensors = this.#numTensors;\n    this.#numTensors = currentTensors;\n    const leaked = currentTensors - previousTensors;\n    if (leaked !== 0) log(...msg, leaked);\n  };\n\n  /** internal function for quick sanity check on inputs @hidden */\n  #sanity = (input: Input): null | string => {\n    if (!this.#checkSanity) return null;\n    if (!input) return 'input is not defined';\n    if (this.env.node && !(input instanceof tf.Tensor)) return 'input must be a tensor';\n    try {\n      this.tf.getBackend();\n    } catch {\n      return 'backend not loaded';\n    }\n    return null;\n  };\n\n  /** Reset configuration to default values */\n  reset(): void {\n    const currentBackend = this.config.backend; // save backend;\n    this.config = JSON.parse(JSON.stringify(defaults));\n    this.config.backend = currentBackend;\n  }\n\n  /** Validate current configuration schema */\n  validate(userConfig?: Partial<Config>) {\n    return validate(defaults, userConfig || this.config);\n  }\n\n  /** Exports face matching methods {@link match#similarity} */\n  public similarity = match.similarity;\n  /** Exports face matching methods {@link match#distance} */\n  public distance = match.distance;\n  /** Exports face matching methods {@link match#match} */\n  public match = match.match;\n\n  /** Utility wrapper for performance.now() */\n  now(): number {\n    return now();\n  }\n\n  /** Process input as return canvas and tensor\n   *\n   * @param input - any input {@link Input}\n   * @param getTensor - should image processing also return tensor or just canvas\n   * Returns object with `tensor` and `canvas`\n   */\n  image(input: Input, getTensor: boolean = true) {\n    return image.process(input, this.config, getTensor);\n  }\n\n  /** Compare two input tensors for pixel simmilarity\n   * - use `human.image` to process any valid input and get a tensor that can be used for compare\n   * - when passing manually generated tensors:\n   *  - both input tensors must be in format [1, height, width, 3]\n   *  - if resolution of tensors does not match, second tensor will be resized to match resolution of the first tensor\n   * - return value is pixel similarity score normalized by input resolution and rgb channels\n  */\n  compare(firstImageTensor: Tensor, secondImageTensor: Tensor): Promise<number> {\n    return image.compare(this.config, firstImageTensor, secondImageTensor);\n  }\n\n  /** Explicit backend initialization\n   *  - Normally done implicitly during initial load phase\n   *  - Call to explictly register and initialize TFJS backend without any other operations\n   *  - Use when changing backend during runtime\n   */\n  async init(): Promise<void> {\n    await backend.check(this, true);\n    await this.tf.ready();\n  }\n\n  /** Load method preloads all configured models on-demand\n   * - Not explicitly required as any required model is load implicitly on it's first run\n   *\n   * @param userConfig - {@link Config}\n  */\n  async load(userConfig?: Partial<Config>): Promise<void> {\n    this.state = 'load';\n    const timeStamp = now();\n    const count = Object.values(this.models).filter((model) => model).length;\n    if (userConfig) this.config = mergeDeep(this.config, userConfig) as Config;\n\n    if (this.env.initial) { // print version info on first run and check for correct backend setup\n      if (this.config.debug) log(`version: ${this.version}`);\n      if (this.config.debug) log(`tfjs version: ${this.tf.version['tfjs-core']}`);\n      if (!await backend.check(this)) log('error: backend check failed');\n      await tf.ready();\n      if (this.env.browser) {\n        if (this.config.debug) log('configuration:', this.config);\n        if (this.config.debug) log('environment:', this.env);\n        if (this.config.debug) log('tf flags:', this.tf.ENV['flags']);\n      }\n    }\n\n    await models.load(this); // actually loads models\n    if (this.env.initial && this.config.debug) log('tf engine state:', this.tf.engine().state.numBytes, 'bytes', this.tf.engine().state.numTensors, 'tensors'); // print memory stats on first run\n    this.env.initial = false;\n\n    const loaded = Object.values(this.models).filter((model) => model).length;\n    if (loaded !== count) { // number of loaded models changed\n      await models.validate(this); // validate kernel ops used by model against current backend\n      this.emit('load');\n    }\n\n    const current = Math.trunc(now() - timeStamp);\n    if (current > (this.performance.loadModels as number || 0)) this.performance.loadModels = this.env.perfadd ? (this.performance.loadModels || 0) + current : current;\n  }\n\n  /** emit event */\n  emit = (event: string) => {\n    if (this.events && this.events.dispatchEvent) this.events?.dispatchEvent(new Event(event));\n  };\n\n  /** Runs interpolation using last known result and returns smoothened result\n   * Interpolation is based on time since last known result so can be called independently\n   *\n   * @param result - {@link Result} optional use specific result set to run interpolation on\n   * @returns result - {@link Result}\n   */\n  next(result: Result = this.result): Result {\n    return interpolate.calc(result, this.config) as Result;\n  }\n\n  /** get model loading/loaded stats */\n  getModelStats(): ModelStats { return models.getModelStats(this); }\n\n  /** Warmup method pre-initializes all configured models for faster inference\n   * - can take significant time on startup\n   * - only used for `webgl` and `humangl` backends\n   * @param userConfig - {@link Config}\n   * @returns result - {@link Result}\n  */\n  async warmup(userConfig?: Partial<Config>) {\n    const t0 = now();\n    const res = await warmups.warmup(this, userConfig);\n    const t1 = now();\n    this.performance.warmup = Math.trunc(t1 - t0);\n    return res;\n  }\n\n  /** Run detect with tensorflow profiling\n   * - result object will contain total exeuction time information for top-20 kernels\n   * - actual detection object can be accessed via `human.result`\n  */\n  async profile(input: Input, userConfig?: Partial<Config>): Promise<Array<{ kernel: string, time: number, perc: number }>> {\n    const profile = await this.tf.profile(() => this.detect(input, userConfig));\n    const kernels: Record<string, number> = {};\n    let total = 0;\n    for (const kernel of profile.kernels) { // sum kernel time values per kernel\n      if (kernels[kernel.name]) kernels[kernel.name] += kernel.kernelTimeMs;\n      else kernels[kernel.name] = kernel.kernelTimeMs;\n      total += kernel.kernelTimeMs;\n    }\n    const kernelArr: Array<{ kernel: string, time: number, perc: number }> = [];\n    Object.entries(kernels).forEach((key) => kernelArr.push({ kernel: key[0], time: key[1] as unknown as number, perc: 0 })); // convert to array\n    for (const kernel of kernelArr) {\n      kernel.perc = Math.round(1000 * kernel.time / total) / 1000;\n      kernel.time = Math.round(1000 * kernel.time) / 1000;\n    }\n    kernelArr.sort((a, b) => b.time - a.time); // sort\n    kernelArr.length = 20; // crop\n    return kernelArr;\n  }\n\n  /** Main detection method\n   * - Analyze configuration: {@link Config}\n   * - Pre-process input: {@link Input}\n   * - Run inference for all configured models\n   * - Process and return result: {@link Result}\n   *\n   * @param input - {@link Input}\n   * @param userConfig - {@link Config}\n   * @returns result - {@link Result}\n  */\n  async detect(input: Input, userConfig?: Partial<Config>): Promise<Result> {\n    // detection happens inside a promise\n    this.state = 'detect';\n    return new Promise(async (resolve) => {\n      this.state = 'config';\n      let timeStamp;\n\n      // update configuration\n      this.config = mergeDeep(this.config, userConfig) as Config;\n\n      // sanity checks\n      this.state = 'check';\n      const error = this.#sanity(input);\n      if (error) {\n        log(error, input);\n        this.emit('error');\n        resolve({ face: [], body: [], hand: [], gesture: [], object: [], performance: this.performance, timestamp: now(), persons: [], error });\n      }\n\n      const timeStart = now();\n\n      // configure backend if needed\n      await backend.check(this);\n\n      // load models if enabled\n      await this.load();\n\n      timeStamp = now();\n      this.state = 'image';\n      const img = await image.process(input, this.config) as { canvas: AnyCanvas, tensor: Tensor };\n      this.process = img;\n      this.performance.inputProcess = this.env.perfadd ? (this.performance.inputProcess || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);\n      // this.analyze('Get Image:');\n\n      if (!img.tensor) {\n        if (this.config.debug) log('could not convert input to tensor');\n        this.emit('error');\n        resolve({ face: [], body: [], hand: [], gesture: [], object: [], performance: this.performance, timestamp: now(), persons: [], error: 'could not convert input to tensor' });\n        return;\n      }\n      this.emit('image');\n\n      timeStamp = now();\n      this.config.skipAllowed = await image.skip(this.config, img.tensor);\n      if (!this.performance.totalFrames) this.performance.totalFrames = 0;\n      if (!this.performance.cachedFrames) this.performance.cachedFrames = 0;\n      (this.performance.totalFrames as number)++;\n      if (this.config.skipAllowed) this.performance.cachedFrames++;\n      this.performance.cacheCheck = this.env.perfadd ? (this.performance.cacheCheck || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);\n      // this.analyze('Check Changed:');\n\n      // prepare where to store model results\n      // keep them with weak typing as it can be promise or not\n      let faceRes: FaceResult[] | Promise<FaceResult[]> | never[] = [];\n      let bodyRes: BodyResult[] | Promise<BodyResult[]> | never[] = [];\n      let handRes: HandResult[] | Promise<HandResult[]> | never[] = [];\n      let objectRes: ObjectResult[] | Promise<ObjectResult[]> | never[] = [];\n\n      // run face detection followed by all models that rely on face bounding box: face mesh, age, gender, emotion\n      this.state = 'detect:face';\n      if (this.config.async) {\n        faceRes = this.config.face.enabled ? face.detectFace(this, img.tensor) : [];\n        if (this.performance.face) delete this.performance.face;\n      } else {\n        timeStamp = now();\n        faceRes = this.config.face.enabled ? await face.detectFace(this, img.tensor) : [];\n        this.performance.face = this.env.perfadd ? (this.performance.face || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);\n      }\n\n      if (this.config.async && (this.config.body.maxDetected === -1 || this.config.hand.maxDetected === -1)) faceRes = await faceRes; // need face result for auto-detect number of hands or bodies\n\n      // if async wait for results\n      this.state = 'detect:await';\n      if (this.config.async) [faceRes, bodyRes, handRes, objectRes] = await Promise.all([faceRes, bodyRes, handRes, objectRes]);\n\n      this.performance.total = this.env.perfadd ? (this.performance.total || 0) + Math.trunc(now() - timeStart) : Math.trunc(now() - timeStart);\n      const shape = this.process?.tensor?.shape || [];\n      this.result = {\n        face: faceRes as FaceResult[],\n        body: bodyRes as BodyResult[],\n        hand: handRes as HandResult[],\n        gesture: [],\n        object: objectRes as ObjectResult[],\n        performance: this.performance,\n        canvas: this.process.canvas,\n        timestamp: Date.now(),\n        error: null,\n        get persons() { return persons.join(faceRes as FaceResult[], bodyRes as BodyResult[], handRes as HandResult[], [], shape); },\n      };\n\n      // finally dispose input tensor\n      tf.dispose(img.tensor);\n\n      // log('Result:', result);\n      this.emit('detect');\n      this.state = 'idle';\n      resolve(this.result);\n    });\n  }\n}\n\n/** Class Human as default export */\n/* eslint no-restricted-exports: [\"off\", { \"restrictedNamedExports\": [\"default\"] }] */\nexport { Human as default, match, models };\n"],
  "mappings": ";;;;;;m5BAOO,SAASA,KAAOC,EAAW,CAChC,IAAMC,EAAK,IAAI,KACTC,EAAK,GAAGD,EAAG,SAAS,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,KAAKA,EAAG,WAAW,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,KAAKA,EAAG,WAAW,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,KAAKA,EAAG,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,IAEpMD,GAAK,QAAQ,IAAIE,EAAI,SAAU,GAAGF,CAAG,CAC3C,CAGO,SAASG,GAAKC,EAAgBC,EAAsB,CACzD,IAAMC,EAAYF,EAAO,SAAS,GAAG,EAAI,GAAK,IAExCG,EADWF,EAAK,WAAW,GAAG,GAAKA,EAAK,WAAW,GAAG,GAAKA,EAAK,WAAW,OAAO,GAAKA,EAAK,WAAW,QAAQ,GAAKA,EAAK,WAAW,OAAO,EACzH,GAAGA,IAAS,GAAGD,IAASE,IAAYD,IAC5D,GAAI,CAACE,EAAK,kBAAkB,EAAE,SAAS,OAAO,EAAG,MAAM,IAAI,MAAM,yCAAyCA,GAAM,EAChH,OAAOA,CACT,CAGO,IAAMC,EAAM,IACb,OAAO,aAAgB,YAAoB,YAAY,IAAI,EACxD,UAAU,OAAO,QAAQ,OAAO,OAAO,CAAC,EAAI,IAAO,KAAM,SAAS,CAAC,EAIrE,SAASC,GAASC,EAA2BC,EAAyBC,EAAS,SAAUC,EAAoE,CAAC,EAAG,CACtK,QAAWC,KAAO,OAAO,KAAKH,CAAM,EAClC,GAAI,OAAOA,EAAOG,IAAS,SACzBL,GAASC,EAASI,GAAMH,EAAOG,GAAMA,EAAKD,CAAI,MACzC,CACL,IAAME,EAAUL,GAAa,OAAOA,EAASI,IAAS,YACjDC,GAASF,EAAK,KAAK,CAAE,OAAQ,mBAAoB,MAAO,GAAGD,KAAUE,OAASH,EAAOG,IAAO,CAAC,EAClG,IAAME,EAAON,GAAY,OAAOA,EAASI,IAAS,OAAOH,EAAOG,GAC5DC,GAAW,CAACC,GAAMH,EAAK,KAAK,CAAE,OAAQ,yBAA0B,MAAO,GAAGD,KAAUE,OAASH,EAAOG,KAAQ,SAAU,OAAOJ,EAASI,EAAK,CAAC,CAClJ,CAGF,OAAIH,EAAO,OAASC,IAAW,UAAYC,EAAK,OAAS,GAAGd,EAAI,wBAAyBc,CAAI,EACtFA,CACT,CAGO,SAASI,MAAaC,EAAS,CACpC,IAAMC,EAAYC,GAAQA,GAAO,OAAOA,GAAQ,SAChD,OAAOF,EAAQ,OAAO,CAACG,EAAMD,KAC3B,OAAO,KAAKA,GAAO,CAAC,CAAC,EAAE,QAASN,GAAQ,CACtC,IAAMQ,EAAOD,EAAKP,GACZS,EAAOH,EAAIN,GACb,MAAM,QAAQQ,CAAI,GAAK,MAAM,QAAQC,CAAI,EAAGF,EAAKP,GAAOQ,EAAK,OAAO,GAAGC,CAAI,EACtEJ,EAASG,CAAI,GAAKH,EAASI,CAAI,EAAGF,EAAKP,GAAOG,GAAUK,EAAMC,CAAI,EACtEF,EAAKP,GAAOS,CACnB,CAAC,EACMF,GACN,CAAC,CAAC,CACP,CC6PA,IAAMG,GAAiB,CACrB,QAAS,GACT,cAAe,GACf,YAAa,GACb,SAAU,GACV,kBAAmB,GACnB,MAAO,GACP,MAAO,GACP,OAAQ,OACR,iBAAkB,GAClB,YAAa,GACb,WAAY,GACZ,OAAQ,CACN,QAAS,GACT,aAAc,GACd,MAAO,EACP,OAAQ,EACR,KAAM,GACN,OAAQ,GACR,WAAY,EACZ,SAAU,EACV,UAAW,EACX,KAAM,EACN,WAAY,EACZ,IAAK,EACL,SAAU,GACV,MAAO,GACP,QAAS,GACT,WAAY,GACZ,YAAa,GACb,SAAU,GACV,SAAU,CACZ,EACA,QAAS,CACP,QAAS,EACX,EACA,KAAM,CACJ,QAAS,GACT,SAAU,CACR,UAAW,iBACX,SAAU,GACV,YAAa,EACb,WAAY,GACZ,SAAU,KACV,cAAe,GACf,aAAc,GACd,KAAM,GACN,OAAQ,EACV,EACA,KAAM,CACJ,QAAS,GACT,UAAW,gBACX,YAAa,EACf,EACA,UAAW,CACT,QAAS,GACT,UAAW,yBACb,EACA,KAAM,CACJ,QAAS,GACT,UAAW,WACb,EACA,QAAS,CACP,QAAS,GACT,cAAe,GACf,WAAY,GACZ,SAAU,KACV,UAAW,cACb,EACA,YAAa,CACX,QAAS,GACT,UAAW,eACX,WAAY,GACZ,SAAU,IACV,cAAe,EACjB,EACA,UAAW,CACT,QAAS,GACT,WAAY,GACZ,SAAU,IACV,UAAW,gBACb,EACA,SAAU,CACR,QAAS,GACT,WAAY,GACZ,SAAU,IACV,UAAW,eACb,CACF,EACA,KAAM,CACJ,QAAS,GACT,UAAW,yBACX,YAAa,GACb,cAAe,GACf,WAAY,EACZ,SAAU,GACZ,EACA,KAAM,CACJ,QAAS,GACT,SAAU,GACV,WAAY,GACZ,SAAU,IACV,cAAe,GACf,aAAc,GACd,YAAa,GACb,UAAW,GACX,SAAU,CACR,UAAW,gBACb,EACA,SAAU,CACR,UAAW,wBACb,CACF,EACA,OAAQ,CACN,QAAS,GACT,UAAW,qBACX,cAAe,GACf,aAAc,GACd,YAAa,GACb,WAAY,GACZ,SAAU,GACZ,EACA,aAAc,CACZ,QAAS,GACT,UAAW,cACX,KAAM,CACR,CACF,ECvbA,IAAAC,EAAA,GAAAC,GAAAD,EAAA,gBAAAE,GAAA,WAAAC,GAAA,YAAAC,KAMAC,EAAAL,EAAAM,IAA4CD,EAAAL,EAAAM,IAA5C,UAAAA,OAAW,iCAAiC,UAAAA,OAAW,+CAAuP,OAAO,UAAUH,OAAM,iCAAiC,OAAO,cAAcD,OAAM,wCAA3R,IAAIK,GAAE,SAASC,GAAE,SAASC,GAAE,SAASC,GAAE,SAASC,GAAE,SAASC,GAAE,SAASC,GAAE,SAAST,GAAE,CAAC,KAAKG,GAAE,YAAYC,GAAE,YAAYC,GAAE,cAAcC,GAAE,iBAAiBC,GAAE,qBAAqBC,GAAE,oBAAoBC,EAAC,ECNrS,IAAMC,GAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAqBvB,IAAMC,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcvBC,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAc1BC,GAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeXC,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBPC,GAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EChF3B,IAAMC,GAAU,CAACC,EAAQC,EAAQC,IAAe,CAC9C,IAAM,EAAI,IAAI,OAAO,MAAQD,EAAS,eAAgB,IAAI,EAC1DD,EAAO,QAAQ,EAAG,CAACG,EAAOC,KACxBF,EAAWE,GAAQ,EACZD,EACR,CACH,EAEME,GAAN,KAAgB,CAMd,YAAYC,EAAIC,EAAcC,EAAgB,CAL9CC,EAAA,eAAU,CAAC,GACXA,EAAA,iBAAY,CAAC,GACbA,EAAA,WACAA,EAAA,WA2BAA,EAAA,eAAU,CAACT,EAAQU,IAA6B,CAC9C,IAAMC,EAAS,KAAK,GAAG,aAAaD,CAAI,EACxC,OAAKC,GAIL,KAAK,GAAG,aAAaA,EAAQX,CAAM,EACnC,KAAK,GAAG,cAAcW,CAAM,EACvB,KAAK,GAAG,mBAAmBA,EAAQ,KAAK,GAAG,cAAc,EAIvDA,GAHLC,EAAI,8BAA8B,KAAK,GAAG,iBAAiBD,CAAM,GAAG,EAC7D,QAPPC,EAAI,iCAAiC,EAC9B,KASX,GArCE,KAAK,GAAKN,EACV,IAAMO,EAAe,KAAK,QAAQN,EAAc,KAAK,GAAG,aAAa,EAC/DO,EAAiB,KAAK,QAAQN,EAAgB,KAAK,GAAG,eAAe,EAE3E,GADA,KAAK,GAAK,KAAK,GAAG,cAAc,EAC5B,GAACK,GAAgB,CAACC,GACtB,IAAI,CAAC,KAAK,GAAI,CACZF,EAAI,wCAAwC,EAC5C,MACF,CAIA,GAHA,KAAK,GAAG,aAAa,KAAK,GAAIC,CAAY,EAC1C,KAAK,GAAG,aAAa,KAAK,GAAIC,CAAc,EAC5C,KAAK,GAAG,YAAY,KAAK,EAAE,EACvB,CAAC,KAAK,GAAG,oBAAoB,KAAK,GAAI,KAAK,GAAG,WAAW,EAAG,CAC9DF,EAAI,2BAA2B,KAAK,GAAG,kBAAkB,KAAK,EAAE,GAAG,EACnE,MACF,CACA,KAAK,GAAG,WAAW,KAAK,EAAE,EAC1Bb,GAAQQ,EAAc,YAAa,KAAK,SAAS,EACjD,QAAWQ,KAAK,KAAK,UAAW,KAAK,UAAUA,GAAK,KAAK,GAAG,kBAAkB,KAAK,GAAIA,CAAC,EACxFhB,GAAQQ,EAAc,UAAW,KAAK,OAAO,EAC7CR,GAAQS,EAAgB,UAAW,KAAK,OAAO,EAC/C,QAAWQ,KAAK,KAAK,QAAS,KAAK,QAAQA,GAAK,KAAK,GAAG,mBAAmB,KAAK,GAAIA,CAAC,EACvF,CAgBF,EAWO,SAASC,IAAgB,CAC9B,IAAIC,EAAY,EACZC,EAAqC,KACrCC,EAAc,GACdC,EAA0B,GAC1BC,EAAoG,CAAC,KAAM,IAAI,EAC/GC,EAAyC,CAAC,EAC1CC,EAAmC,KACnCC,EAAmC,KACjCC,EAAWC,EAAO,IAAK,GAAG,EAC1BC,EAAqB,CAAE,EACvBC,EAAO,CAAE,aAAc,CAAE,EACzBvB,EAAKoB,EAAS,WAAW,OAAO,EACtC,GAAI,CAACpB,EAAI,CACPM,EAAI,kCAAkC,EACtC,MACF,CAEA,KAAK,GAAKN,EAEV,SAASwB,EAAOC,EAAOC,EAAQ,CAC7B,GAAI,EAAAD,IAAUL,EAAS,OAASM,IAAWN,EAAS,QAGpD,IAFAA,EAAS,MAAQK,EACjBL,EAAS,OAASM,EACd,CAACR,EAAc,CACjB,IAAMS,EAAW,IAAI,aAAa,CAAC,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,CAAC,EAChHT,EAAelB,EAAG,aAAa,EAC/BA,EAAG,WAAWA,EAAG,aAAckB,CAAY,EAC3ClB,EAAG,WAAWA,EAAG,aAAc2B,EAAU3B,EAAG,WAAW,EACvDA,EAAG,YAAYA,EAAG,+BAAgC,EAAI,CACxD,CACAA,EAAG,SAAS,EAAG,EAAGoB,EAAS,MAAOA,EAAS,MAAM,EACjDJ,EAAmB,CAAC,KAAM,IAAI,EAChC,CAEA,SAASY,EAAyBH,EAAOC,EAAQ,CAC/C,IAAMG,EAAM7B,EAAG,kBAAkB,EACjCA,EAAG,gBAAgBA,EAAG,YAAa6B,CAAG,EACtC,IAAMC,EAAe9B,EAAG,mBAAmB,EAC3CA,EAAG,iBAAiBA,EAAG,aAAc8B,CAAY,EACjD,IAAMC,EAAU/B,EAAG,cAAc,EACjC,OAAAA,EAAG,YAAYA,EAAG,WAAY+B,CAAO,EACrC/B,EAAG,WAAWA,EAAG,WAAY,EAAGA,EAAG,KAAMyB,EAAOC,EAAQ,EAAG1B,EAAG,KAAMA,EAAG,cAAe,IAAI,EAC1FA,EAAG,cAAcA,EAAG,WAAYA,EAAG,mBAAoBA,EAAG,MAAM,EAChEA,EAAG,cAAcA,EAAG,WAAYA,EAAG,mBAAoBA,EAAG,MAAM,EAChEA,EAAG,cAAcA,EAAG,WAAYA,EAAG,eAAgBA,EAAG,aAAa,EACnEA,EAAG,cAAcA,EAAG,WAAYA,EAAG,eAAgBA,EAAG,aAAa,EACnEA,EAAG,qBAAqBA,EAAG,YAAaA,EAAG,kBAAmBA,EAAG,WAAY+B,EAAS,CAAC,EACvF/B,EAAG,YAAYA,EAAG,WAAY,IAAI,EAClCA,EAAG,gBAAgBA,EAAG,YAAa,IAAI,EAChC,CAAE,IAAA6B,EAAK,QAAAE,CAAQ,CACxB,CAEA,SAASC,EAAmBC,EAAuE,CACjG,OAAAjB,EAAiBiB,GAASjB,EAAiBiB,IAAUL,EAAyBR,EAAS,MAAOA,EAAS,MAAM,EACtGJ,EAAiBiB,EAC1B,CAEA,SAASC,EAAKC,EAAQ,EAAG,CACvB,GAAI,CAAChB,EAAgB,OACrB,IAAIzB,EAA8B,KAC9B0C,EAAkC,KAClCC,EAAQ,GACRzB,IAAc,EAAGlB,EAASmB,EACzBnB,EAASsC,EAAmBjB,CAAuB,EAAE,SAAW,KACrEH,IACIE,GAAe,EAAEqB,EAAQZ,EAAK,eAChCa,EAAS,KACTC,EAAQzB,EAAY,IAAM,IAE1BG,GAA2BA,EAA0B,GAAK,EAC1DqB,EAASJ,EAAmBjB,CAAuB,EAAE,KAAO,MAE9Df,EAAG,YAAYA,EAAG,WAAYN,CAAM,EACpCM,EAAG,gBAAgBA,EAAG,YAAaoC,CAAM,EACzCpC,EAAG,UAAUmB,EAAe,QAAQ,MAAWkB,EAAQ,GAAK,CAAE,EAC9DrC,EAAG,WAAWA,EAAG,UAAW,EAAG,CAAC,CAClC,CAEA,SAASsC,EAAcpC,EAAkC,CACvD,GAAIoB,EAAmBpB,GACrB,OAAAiB,EAAiBG,EAAmBpB,GACpCF,EAAG,YAAYmB,EAAiBA,EAAe,GAAK,OAAS,IAAI,EAC1DA,EAGT,GADAA,EAAiB,IAAIpB,GAAUC,EAAYuC,GAAgBrC,CAAc,EACrE,CAACiB,EACH,OAAAb,EAAI,qCAAqC,EAClC,KAET,IAAMkC,EAAY,aAAa,kBACzBC,EAAW,EAAID,EACrB,OAAAxC,EAAG,wBAAwBmB,EAAe,UAAU,GAAM,EAC1DnB,EAAG,oBAAoBmB,EAAe,UAAU,IAAQ,EAAGnB,EAAG,MAAO,GAAOyC,EAAU,EAAID,CAAS,EACnGxC,EAAG,wBAAwBmB,EAAe,UAAU,EAAK,EACzDnB,EAAG,oBAAoBmB,EAAe,UAAU,GAAO,EAAGnB,EAAG,MAAO,GAAOyC,EAAU,EAAID,CAAS,EAClGlB,EAAmBpB,GAAkBiB,EAC9BA,CACT,CAEA,IAAMuB,EAAS,CACb,YAAcC,GAAW,CACvB,IAAMC,EAAI,IAAI,aAAaD,CAAM,EACjCC,EAAE,IAAM,IACRA,EAAE,IAAM,IACRA,EAAE,KAAO,IACTA,EAAE,KAAO,IACT,IAAMvC,EAAUuC,EAAE,MAAQ,GAAKA,EAAE,KAAO,GAAKA,EAAE,KAAO,GAAKA,EAAE,MAAQ,GAAKA,EAAE,MAAQ,GAAKA,EAAE,MAAQ,GAAKA,EAAE,MAAQ,GAAKA,EAAE,MAAQ,EACrHC,GACAC,GACNC,EAAUT,EAAcjC,CAAM,EAChC,CAAC0C,IACL/C,EAAG,WAAW+C,EAAQ,QAAQ,EAAMH,CAAC,EACrCV,EAAK,EACP,EAEA,WAAac,GAAe,CAC1B,IAAMC,GAAKD,GAAc,GAAK,EAC9BN,EAAO,YAAY,CACjBO,EAAG,EAAG,EAAG,EAAG,EACZ,EAAGA,EAAG,EAAG,EAAG,EACZ,EAAG,EAAGA,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,WAAaC,GAAW,CACtB,IAAMC,GAAKD,GAAU,GAAK,EAAI,EAAI,EAC5BE,GAAMD,EAAI,GAAK,IACrBT,EAAO,YAAY,CACjBS,EAAGC,EAAGA,EAAG,EAAG,EACZA,EAAGD,EAAGC,EAAG,EAAG,EACZA,EAAGA,EAAGD,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,WAAY,IAAM,CAChBT,EAAO,WAAW,EAAE,CACtB,EAEA,SAAWQ,GAAW,CACpB,IAAMG,GAAKH,GAAU,GAAK,EACpBI,EAAI,MAAQD,EAAI,GACtBX,EAAO,YAAY,CACjBW,EAAG,EAAG,EAAG,EAAGC,EACZ,EAAGD,EAAG,EAAG,EAAGC,EACZ,EAAG,EAAGD,EAAG,EAAGC,EACZ,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,SAAU,IAAM,CACdZ,EAAO,SAAS,EAAE,CACpB,EAEA,IAAMa,GAAa,CACjBA,GAAYA,GAAY,GAAK,IAAM,KAAK,GACxC,IAAMC,EAAM,KAAK,IAAID,CAAQ,EACvBE,EAAM,KAAK,IAAIF,CAAQ,EACvBG,EAAO,KACPC,EAAO,KACPC,EAAO,KACblB,EAAO,YAAY,CACjBgB,EAAOF,GAAO,EAAIE,GAAQD,EAAO,CAACC,EAAOC,EAAOH,EAAO,CAACG,EAAQF,EAAO,CAACE,EAAOC,EAAOJ,EAAO,CAACI,EAAQH,GAAO,EAAIG,GAAO,EAAG,EAC3HF,EAAOF,EAAO,CAACE,EAAQD,EAAO,KAAQE,EAAOH,GAAO,EAAIG,GAAQF,EAAO,IAAQG,EAAOJ,EAAO,CAACI,EAAQH,EAAO,MAAS,EAAG,EACzHC,EAAOF,EAAO,CAACE,EAAQD,EAAO,EAAE,EAAIC,GAAQC,EAAOH,EAAO,CAACG,EAAQF,EAAOE,EAAOC,EAAOJ,GAAO,EAAII,GAAQH,EAAOG,EAAO,EAAG,EAC5H,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,oBAAqB,IAAM,CACzBlB,EAAO,YAAY,CACjB,SAAW,QAAW,SAAW,EAAG,MACpC,SAAW,QAAW,SAAW,EAAG,MACpC,SAAW,QAAW,SAAW,EAAG,MACpC,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,MAAO,IAAM,CACXA,EAAO,YAAY,CACjB,KAAO,SAAW,UAAY,EAAG,EACjC,KAAO,SAAW,UAAY,EAAG,EACjC,KAAO,SAAW,UAAY,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,QAAS,IAAM,CACbA,EAAO,YAAY,CACjB,kBAAoB,mBAAqB,mBAAqB,EAAG,kBACjE,qBAAuB,kBAAoB,mBAAqB,EAAG,mBACnE,mBAAqB,oBAAsB,mBAAqB,EAAG,mBACnE,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,eAAgB,IAAM,CACpBA,EAAO,YAAY,CACjB,kBAAoB,kBAAoB,oBAAsB,EAAG,kBACjE,mBAAqB,kBAAoB,mBAAqB,EAAG,kBACjE,kBAAoB,mBAAqB,kBAAoB,EAAG,kBAChE,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,WAAY,IAAM,CAChBA,EAAO,YAAY,CACjB,mBAAoB,mBAAqB,oBAAsB,EAAG,kBAClE,oBAAsB,mBAAoB,oBAAsB,EAAG,mBACnE,oBAAsB,mBAAqB,mBAAoB,EAAG,kBAClE,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,YAAa,IAAM,CACjBA,EAAO,YAAY,CACjB,mBAAoB,mBAAqB,oBAAsB,EAAG,mBAClE,mBAAqB,mBAAoB,oBAAsB,EAAG,mBAClE,kBAAoB,mBAAqB,kBAAmB,EAAG,mBAC/D,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,SAAU,IAAM,CACdA,EAAO,YAAY,CACjB,MAAO,MAAQ,MAAQ,EAAG,EAC1B,MAAQ,MAAO,MAAQ,EAAG,EAC1B,MAAQ,MAAQ,MAAO,EAAG,EAC1B,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,WAAY,IAAM,CAChBA,EAAO,YAAY,CACjB,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,CACd,CAAC,CACH,EAEA,YAAcC,GAAW,CACvB,IAAMC,EAAI,IAAI,aAAaD,CAAM,EAC3BkB,EAAa,EAAIzC,EAAS,MAC1B0C,EAAa,EAAI1C,EAAS,OAC1B2B,EAAUT,EAAsByB,EAAW,EAC7C,CAAChB,IACL/C,EAAG,WAAW+C,EAAQ,QAAQ,EAAMH,CAAC,EACrC5C,EAAG,UAAU+C,EAAQ,QAAQ,GAAOc,EAAYC,CAAU,EAC1D5B,EAAK,EACP,EAEA,YAAa,IAAM,CAEjBQ,EAAO,YAAY,KAAK,KAAM,CAC5B,EAAG,EAAG,EACN,EAAG,GAAI,EACP,EAAG,EAAG,CACR,CAAC,CACH,EAEA,OAAQ,IAAM,CAEZA,EAAO,YAAY,KAAK,KAAM,CAC5B,GAAI,EAAG,EACP,GAAI,EAAG,EACP,GAAI,EAAG,CACT,CAAC,CACH,EAEA,OAAQ,IAAM,CAEZA,EAAO,YAAY,KAAK,KAAM,CAC5B,GAAI,GAAI,GACR,EAAG,EAAG,EACN,EAAG,EAAG,CACR,CAAC,CACH,EAEA,QAAUQ,GAAW,CACnB,IAAMzC,EAAIyC,GAAU,EAEpBR,EAAO,YAAY,KAAK,KAAM,CAC5B,EAAG,GAAKjC,EAAG,EACX,GAAKA,EAAG,EAAI,EAAIA,EAAG,GAAKA,EACxB,EAAG,GAAKA,EAAG,CACb,CAAC,CACH,EAEA,OAASuD,GAAS,CAChB,IAAMC,EAAID,GAAQ,EAElBtB,EAAO,YAAY,KAAK,KAAM,CAC5B,GAAKuB,EAAG,GAAKA,EAAG,EAChB,GAAKA,EAAG,EAAG,EAAIA,EACf,EAAG,EAAIA,EAAG,EAAIA,CAChB,CAAC,CACH,EAEA,KAAOD,GAAS,CACd,IAAME,EAAaF,EAAO,EAAK5C,EAAS,MAClC+C,EAAaH,EAAO,EAAK5C,EAAS,OAClC2B,EAAUT,EAAsB8B,EAAI,EACtC,CAACrB,IAEL/C,EAAG,UAAU+C,EAAQ,QAAQ,GAAO,EAAGoB,CAAS,EAChDjC,EAAKX,EAAK,YAAY,EAEtBvB,EAAG,UAAU+C,EAAQ,QAAQ,GAAOmB,EAAW,CAAC,EAChDhC,EAAK,EACP,EAEA,SAAW8B,GAAS,CAClB,IAAME,EAAaF,EAAQ5C,EAAS,MAC9B+C,EAAaH,EAAQ5C,EAAS,OAC9B2B,EAAUT,EAAsB+B,EAAQ,EAC1C,CAACtB,IACL/C,EAAG,UAAU+C,EAAQ,QAAQ,KAASmB,EAAWC,CAAS,EAC1DjC,EAAK,EACP,CACF,EAGA,KAAK,IAAM,SAAUpC,EAAM,CAEzB,IAAMwE,EAAO,MAAM,UAAU,MAAM,KAAK,UAAW,CAAC,EAC9CC,EAAO7B,EAAO5C,GACpBmB,EAAY,KAAK,CAAE,KAAAsD,EAAM,KAAAD,CAAK,CAAC,CACjC,EAGA,KAAK,MAAQ,UAAY,CACvBrD,EAAc,CAAC,CACjB,EAGA,KAAK,IAAM,UAAY,CACrB,OAAOA,CACT,EAGA,KAAK,MAAQ,SAAUuD,EAAO,CAC5BhD,EAAOgD,EAAM,MAAOA,EAAM,MAAM,EAChC5D,EAAY,EACPC,IAAeA,EAAgBb,EAAG,cAAc,GACrDA,EAAG,YAAYA,EAAG,WAAYa,CAAa,EAC3Cb,EAAG,cAAcA,EAAG,WAAYA,EAAG,eAAgBA,EAAG,aAAa,EACnEA,EAAG,cAAcA,EAAG,WAAYA,EAAG,eAAgBA,EAAG,aAAa,EACnEA,EAAG,cAAcA,EAAG,WAAYA,EAAG,mBAAoBA,EAAG,OAAO,EACjEA,EAAG,cAAcA,EAAG,WAAYA,EAAG,mBAAoBA,EAAG,OAAO,EACjEA,EAAG,WAAWA,EAAG,WAAY,EAAGA,EAAG,KAAMA,EAAG,KAAMA,EAAG,cAAewE,CAAK,EACzE,QAASC,EAAI,EAAGA,EAAIxD,EAAY,OAAQwD,IAAK,CAC3C3D,EAAe2D,IAAMxD,EAAY,OAAS,EAC1C,IAAMyD,EAAIzD,EAAYwD,GAEtBC,EAAE,KAAK,MAAM,KAAMA,EAAE,MAAQ,CAAC,CAAC,CACjC,CACA,OAAOtD,CACT,EAGA,KAAK,KAAO,SAAUoD,EAAO,CAC3B,YAAK,IAAI,aAAc,CAAC,EACjB,KAAK,MAAMA,CAAK,CACzB,CACF,CCjbA,eAAsBG,GAAsBC,EAAqC,CAE/E,IAAMC,EAAUD,EAAW,MAAM,SAAW,EAAO,UAAQA,CAAU,EAAIA,EACnEE,EAAc,QAAMD,EAAS,EAAG,CAAC,EACjCE,EAAgB,CAAI,MAAID,EAAS,EAAE,EAAM,MAAIA,EAAS,EAAE,EAAM,MAAIA,EAAS,EAAE,CAAC,EAC9EE,EAAgB,CAAI,MAAIF,EAAS,EAAE,EAAM,MAAIA,EAAS,EAAE,EAAM,MAAIA,EAAS,EAAE,CAAC,EAC9EG,EAAS,MAAM,QAAQ,IAAID,EAAI,IAAKE,GAAYA,EAAQ,KAAK,CAAC,CAAC,EAC/DC,EAAW,IAAO,KAAK,IAAIF,EAAO,GAAG,GAAIA,EAAO,GAAG,GAAIA,EAAO,GAAG,EAAE,EACnEG,EAAM,CAAI,MAAIN,EAAS,GAAIC,EAAI,EAAE,EAAM,MAAID,EAAS,GAAIC,EAAI,EAAE,EAAM,MAAID,EAAS,GAAIC,EAAI,EAAE,CAAC,EAC5FM,EAAQ,CAAI,MAAIL,EAAI,GAAID,EAAI,EAAE,EAAM,MAAIC,EAAI,GAAID,EAAI,EAAE,EAAM,MAAIC,EAAI,GAAID,EAAI,EAAE,CAAC,EAC/EO,EAAO,CAAI,MAAIH,EAAUE,EAAM,EAAE,EAAM,MAAIF,EAAUE,EAAM,EAAE,EAAM,MAAIF,EAAUE,EAAM,EAAE,CAAC,EAC1FE,EAAM,CAAI,MAAIH,EAAI,GAAIE,EAAK,EAAE,EAAM,MAAIF,EAAI,GAAIE,EAAK,EAAE,EAAM,MAAIF,EAAI,GAAIE,EAAK,EAAE,CAAC,EAChFE,EAAS,QAAM,CAACD,EAAI,GAAIA,EAAI,GAAIA,EAAI,EAAE,EAAG,CAAC,EAC1CE,EAAa,UAAQD,EAAK,CAAC,EAAGX,EAAQ,MAAM,GAAIA,EAAQ,MAAM,GAAI,CAAC,CAAC,EAC1E,OAAG,UAAQ,CAAC,GAAGC,EAAU,GAAGC,EAAK,GAAGC,EAAK,GAAGI,EAAK,GAAGC,EAAO,GAAGC,EAAM,GAAGC,EAAKC,EAAKX,CAAO,CAAC,EAClFY,CACT,CCZA,IAAMC,GAAU,KAEZC,EAA6B,KAC7BC,EAA8B,KAC9BC,GAA8B,KAE9BC,EAEEC,GAAoG,CACxG,SAAU,EACV,UAAW,EACX,UAAW,EACX,YAAa,MACf,EAEO,SAASC,EAAOC,EAAeC,EAA2B,CAC/D,IAAIC,EACJ,GAAIC,EAAI,QACN,GAAIA,EAAI,OAAQ,CACd,GAAI,OAAO,iBAAoB,YAAa,MAAM,IAAI,MAAM,mFAAmF,EAC/ID,EAAI,IAAI,gBAAgBF,EAAOC,CAAM,CACvC,KAAO,CACL,GAAI,OAAO,UAAa,YAAa,MAAM,IAAI,MAAM,kEAAkE,EACvHC,EAAI,SAAS,cAAc,QAAQ,EACnCA,EAAE,MAAQF,EACVE,EAAE,OAASD,CACb,MAGI,OAAOE,EAAI,QAAW,YAAaD,EAAI,IAAIC,EAAI,OAAOH,EAAOC,CAAM,EAC9D,OAAO,WAAW,QAAW,cAAaC,EAAI,IAAI,WAAW,OAAOF,EAAOC,CAAM,GAG5F,OAAOC,CACT,CAGO,SAASE,GAAKC,EAAkBC,EAAoB,CACzD,IAAMC,EAAeD,GAAUP,EAAOM,EAAM,MAAOA,EAAM,MAAM,EAE/D,OADYE,EAAa,WAAW,IAAI,EACpC,UAAUF,EAAO,EAAG,CAAC,EAClBE,CACT,CAKA,eAAsBC,GAAQH,EAAcI,EAAgBC,EAAqB,GAAoE,CACnJ,GAAI,CAACL,EAEH,OAAII,EAAO,OAAOE,EAAI,+BAA+B,EAC9C,CAAE,OAAQ,KAAM,OAAQ,IAAK,EAGtC,GACE,EAAEN,aAAoBO,KACnB,EAAE,OAAO,OAAU,aAAeP,aAAiB,QACnD,EAAE,OAAOF,EAAI,QAAW,aAAeE,aAAiBF,EAAI,SAC5D,EAAE,OAAO,WAAW,QAAW,aAAeE,aAAiB,WAAW,SAC1E,EAAE,OAAO,WAAc,aAAeA,aAAiB,YACvD,EAAE,OAAO,aAAgB,aAAeA,aAAiB,cACzD,EAAE,OAAO,kBAAqB,aAAeA,aAAiB,mBAC9D,EAAE,OAAO,kBAAqB,aAAeA,aAAiB,mBAC9D,EAAE,OAAO,kBAAqB,aAAeA,aAAiB,mBAC9D,EAAE,OAAO,mBAAsB,aAAeA,aAAiB,oBAC/D,EAAE,OAAO,iBAAoB,aAAeA,aAAiB,iBAEhE,MAAM,IAAI,MAAM,qCAAqC,EAEvD,GAAIA,aAAoBO,GAAQ,CAC9B,IAAIC,EAAwB,KAC5B,GAAKR,EAAiB,mBAAuB,MAAM,IAAI,MAAM,yDAAyD,EACtH,GAAI,CAAEA,EAAiB,MAAU,MAAM,IAAI,MAAM,sDAAsD,EACvG,GAAKA,EAAiB,MAAM,SAAW,GACrC,GAAKA,EAAiB,MAAM,KAAO,EACjCQ,EAAY,aAAWR,EAAO,CAAC,UACrBA,EAAiB,MAAM,KAAO,EAAG,CAC3C,IAAMS,EAAS,UAAQT,EAAO,CAAC,EAAG,EAAG,CAAC,EAAG,CAAC,GAAI,GAAI,CAAC,CAAC,EACpDQ,EAAY,aAAWC,EAAK,CAAC,EAC1B,UAAQA,CAAG,CAChB,OACUT,EAAiB,MAAM,SAAW,IACvCA,EAAiB,MAAM,KAAO,EACjCQ,EAAY,QAAMR,CAAK,EACbA,EAAiB,MAAM,KAAO,IACxCQ,EAAY,UAAQR,EAAO,CAAC,EAAG,EAAG,EAAG,CAAC,EAAG,CAAC,GAAI,GAAI,GAAI,CAAC,CAAC,IAI5D,GAAIQ,GAAU,MAAQA,EAAO,MAAM,SAAW,GAAKA,EAAO,MAAM,KAAO,GAAKA,EAAO,MAAM,KAAO,EAAG,MAAM,IAAI,MAAM,iEAAiER,EAAM,OAAU,EACpM,GAAKQ,EAAkB,QAAU,QAAS,CACxC,IAAME,EAAU,OAAKF,EAAQ,SAAS,EACnC,UAAQA,CAAM,EACjBA,EAASE,CACX,CACA,MAAO,CAAE,OAAAF,EAAQ,OAASJ,EAAO,OAAO,OAASd,EAAY,IAAM,CACrE,KAAO,CAEL,GAAI,OAAOU,EAAM,YAAkB,aAAeA,EAAM,YAAiB,EACvE,OAAII,EAAO,OAAOE,EAAI,2BAA2B,EAC1C,CAAE,OAAQ,KAAM,OAAQjB,CAAS,EAE1C,IAAMsB,EAAgBX,EAAM,cAAmBA,EAAM,YAAiBA,EAAM,OAAaA,EAAM,OAAaA,EAAM,MAAS,GAAK,EAC1HY,EAAiBZ,EAAM,eAAoBA,EAAM,aAAkBA,EAAM,QAAcA,EAAM,OAAaA,EAAM,MAAS,GAAK,EACpI,GAAI,CAACW,GAAiB,CAACC,EACrB,OAAIR,EAAO,OAAOE,EAAI,mCAAmC,EAClD,CAAE,OAAQ,KAAM,OAAQjB,CAAS,EAE1C,IAAIwB,EAAcF,EACdG,EAAeF,EAenB,GAdIC,EAAczB,KAChByB,EAAczB,GACd0B,EAAe,KAAK,MAAMD,EAAcD,EAAiBD,CAAa,GAEpEG,EAAe1B,KACjB0B,EAAe1B,GACfyB,EAAc,KAAK,MAAMC,EAAeH,EAAgBC,CAAc,IAInER,EAAO,OAAO,OAAS,GAAK,EAAGS,EAAcT,EAAO,OAAO,OACtDA,EAAO,OAAO,QAAU,GAAK,IAAGS,EAAcF,IAAkBP,EAAO,OAAO,QAAU,GAAKQ,KAClGR,EAAO,OAAO,QAAU,GAAK,EAAGU,EAAeV,EAAO,OAAO,QACxDA,EAAO,OAAO,OAAS,GAAK,IAAGU,EAAeF,IAAmBR,EAAO,OAAO,OAAS,GAAKO,IACnG,CAACE,GAAe,CAACC,EAAc,MAAM,IAAI,MAAM,yCAAyC,GACxF,CAACzB,IAAaA,GAAA,YAAAA,EAAU,SAAUwB,IAAiBxB,GAAA,YAAAA,EAAU,UAAWyB,KAAezB,EAAWK,EAAOmB,EAAaC,CAAY,GAGtI,IAAMC,EAAQ1B,EAAS,WAAW,IAAI,EAmDtC,GAlDK,OAAO,WAAc,aAAiBW,aAAiB,UAC1De,EAAM,aAAaf,EAAO,EAAG,CAAC,EAE1BI,EAAO,OAAO,MAAQ,OAAOW,EAAM,WAAc,aACnDA,EAAM,UAAUJ,EAAe,CAAC,EAChCI,EAAM,MAAM,GAAI,CAAC,EACjBA,EAAM,UAAUf,EAAoB,EAAG,EAAGW,EAAeC,EAAgB,EAAG,EAAGvB,GAAA,YAAAA,EAAU,MAAOA,GAAA,YAAAA,EAAU,MAAM,EAChH0B,EAAM,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,GAEnCA,EAAM,UAAUf,EAAoB,EAAG,EAAGW,EAAeC,EAAgB,EAAG,EAAGvB,GAAA,YAAAA,EAAU,MAAOA,GAAA,YAAAA,EAAU,MAAM,GAIhH,CAACC,GAAcD,EAAS,QAAUC,EAAU,QAAWD,GAAA,YAAAA,EAAU,WAAWC,GAAA,YAAAA,EAAW,WAASA,EAAYI,EAAOL,EAAS,MAAOA,EAAS,MAAM,GAGlJe,EAAO,OAAO,SAAWN,EAAI,MAAM,WAChCN,IAAIA,EAAKM,EAAI,QAAU,IAAYkB,GAAkB,MAC1DlB,EAAI,OAAS,CAAC,CAACN,EACX,CAACA,GAAM,CAACA,EAAG,KACTY,EAAO,OAAOE,EAAI,gDAAgD,EACtER,EAAI,MAAM,UAAY,GACtBM,EAAO,OAAO,QAAU,GACxBL,GAAKV,EAAUC,CAAS,IAGxBE,EAAG,MAAM,EACLY,EAAO,OAAO,aAAe,GAAGZ,EAAG,IAAI,aAAcY,EAAO,OAAO,UAAU,EAC7EA,EAAO,OAAO,WAAa,GAAGZ,EAAG,IAAI,WAAYY,EAAO,OAAO,QAAQ,EACvEA,EAAO,OAAO,YAAc,GAAGZ,EAAG,IAAI,UAAWY,EAAO,OAAO,SAAS,EACxEA,EAAO,OAAO,OAAS,GAAGZ,EAAG,IAAI,OAAQY,EAAO,OAAO,IAAI,EAC3DA,EAAO,OAAO,aAAe,GAAGZ,EAAG,IAAI,aAAcY,EAAO,OAAO,UAAU,EAC7EA,EAAO,OAAO,MAAQ,GAAGZ,EAAG,IAAI,MAAOY,EAAO,OAAO,GAAG,EACxDA,EAAO,OAAO,UAAUZ,EAAG,IAAI,UAAU,EACzCY,EAAO,OAAO,OAAOZ,EAAG,IAAI,OAAO,EACnCY,EAAO,OAAO,SAASZ,EAAG,IAAI,SAAS,EACvCY,EAAO,OAAO,OAAOZ,EAAG,IAAI,OAAO,EACnCY,EAAO,OAAO,YAAYZ,EAAG,IAAI,YAAY,EAC7CY,EAAO,OAAO,aAAaZ,EAAG,IAAI,aAAa,EAC/CY,EAAO,OAAO,UAAUZ,EAAG,IAAI,UAAU,EACzCY,EAAO,OAAO,WAAa,GAAGZ,EAAG,IAAI,WAAYY,EAAO,OAAO,QAAQ,EACvEZ,EAAG,IAAI,EAAI,EAAGF,EAAYE,EAAG,MAAMH,CAAQ,EAC1CC,EAAYE,EAAG,KAAKH,CAAQ,KAGnCU,GAAKV,EAAUC,CAAS,EACpBE,IAAIA,EAAK,MACbM,EAAI,OAAS,CAAC,CAACN,GAGb,CAACa,EAAW,MAAO,CAAE,OAAQ,KAAM,OAAQf,CAAU,EACzD,GAAI,CAACA,EAAW,MAAM,IAAI,MAAM,oCAAoC,EAGpE,IAAI2B,EACAC,EAAQ,EACZ,GAAK,OAAO,WAAc,aAAelB,aAAiB,WAAeA,EAAM,MAAWA,EAAM,OAAYA,EAAM,OAChH,GAAIF,EAAI,SAAc,UACpBmB,EAAY,UAAa,UAAQ,WAAWjB,CAAK,EAAI,SAChD,CACLkB,EAAQlB,EAAM,KAAQ,OAASA,EAAM,OAAYA,EAAM,MAEvD,IAAMmB,EAAM,IAAI,WAAWnB,EAAM,KAAQ,MAAS,EAClDiB,EAAY,SAAOE,EAAK,CAACnB,EAAM,OAAWA,EAAM,MAAUkB,CAAK,EAAG,OAAO,CAC3E,UAEI,CAAC3B,IAAcD,EAAU,QAAUC,GAAU,OAAWD,EAAU,SAAWC,GAAU,UAASA,GAAYG,EAAOJ,EAAU,MAAOA,EAAU,MAAM,GACjJ,WAAWQ,EAAI,QAChBM,EAAO,UAAY,SAAWA,EAAO,UAAY,WAAaA,EAAO,UAAY,SACnFa,EAAY,UAAQ,WAAW3B,CAAS,GAExCC,GAAYQ,GAAKT,CAAS,EAC1B2B,EAAY,UAAQ,WAAW1B,EAAS,OAErC,CAGL,IAAM6B,EAFarB,GAAKT,CAAS,EACN,WAAW,IAAI,EACjB,aAAa,EAAG,EAAGuB,EAAaC,CAAY,EACrEI,EAAQE,EAAS,KAAK,OAASP,EAAcC,EAC7C,IAAMK,EAAM,IAAI,WAAWC,EAAS,KAAK,MAAM,EAC/CH,EAAY,SAAOE,EAAK,CAACN,EAAaC,EAAcI,CAAK,CAAC,CAC5D,CAEF,GAAIA,IAAU,EAAG,CACf,IAAMT,EAAS,UAAQQ,EAAQ,CAAC,EAAG,EAAG,CAAC,EAAG,CAAC,GAAI,GAAI,CAAC,CAAC,EAClD,UAAQA,CAAM,EACjBA,EAASR,CACX,CACA,GAAI,CAACQ,EAAQ,MAAM,IAAI,MAAM,mCAAmC,EAChE,IAAMI,EAAY,OAAKJ,EAAQ,SAAS,EAClCT,EAASJ,EAAO,OAAO,aAAe,MAAckB,GAAsBD,CAAM,EAAO,aAAWA,EAAQ,CAAC,EACjH,OAAG,UAAQ,CAACJ,EAAQI,CAAM,CAAC,EACpB,CAAE,OAAAb,EAAQ,OAASJ,EAAO,OAAO,OAASd,EAAY,IAAM,CACrE,CACF,CAgCA,eAAsBiC,GAAKnB,EAAyBJ,EAAe,CACjE,IAAIwB,EAAY,GAChB,GAAIpB,EAAO,mBAAqB,GAAK,CAACJ,EAAM,OAASA,EAAM,MAAM,SAAW,GAAKA,EAAM,MAAM,GAAK,MAAQA,EAAM,MAAM,GAAK,KAAM,OAAOwB,EAcxI,GAAI,CAAC/B,GAAK,YACRA,GAAK,YAAiB,QAAMO,CAAK,UACxBP,GAAK,YAAY,MAAM,KAAOO,EAAM,MAAM,IAAMP,GAAK,YAAY,MAAM,KAAOO,EAAM,MAAM,GAChG,UAAQP,GAAK,WAAW,EAC3BA,GAAK,YAAiB,QAAMO,CAAK,MAC5B,CACL,IAAMyB,EAA4B,CAAC,EACnCA,EAAE,KAAU,MAAIzB,EAAOP,GAAK,WAAW,EACvCgC,EAAE,QAAa,MAAIA,EAAE,KAAMA,EAAE,IAAI,EACjCA,EAAE,IAAS,MAAIA,EAAE,OAAO,EAExB,IAAMC,GADU,MAAMD,EAAE,IAAI,KAAK,GACJ,IAAMzB,EAAM,MAAM,IAAM,IAAMA,EAAM,MAAM,IAAM,GAAK,IAAM,EACrF,UAAQ,CAACP,GAAK,YAAagC,EAAE,KAAMA,EAAE,QAASA,EAAE,GAAG,CAAC,EACvDhC,GAAK,YAAiB,QAAMO,CAAK,EACjCwB,EAAYE,IAAiBtB,EAAO,kBAAoB,EAC1D,CACA,OAAOoB,CACT,CAEA,eAAsBG,GAAQvB,EAAyBwB,EAAgBC,EAAiC,CACtG,IAAMJ,EAA4B,CAAC,EACnC,GAAI,CAACG,GAAU,CAACC,GAAUD,EAAO,MAAM,SAAW,GAAKA,EAAO,MAAM,SAAWC,EAAO,MAAM,OAC1F,OAAKzB,EAAO,OAAOE,EAAI,sDAAuDsB,EAAO,MAAOC,EAAO,KAAK,EACjG,EAET,GAAID,EAAO,MAAM,KAAO,GAAKC,EAAO,MAAM,KAAO,GAAKD,EAAO,MAAM,KAAO,GAAKC,EAAO,MAAM,KAAO,EACjG,OAAKzB,EAAO,OAAOE,EAAI,wDAAyDsB,EAAO,MAAOC,EAAO,KAAK,EACnG,EAETJ,EAAE,OAAY,QAAMG,CAAM,EAC1BH,EAAE,OAAUG,EAAO,MAAM,KAAOC,EAAO,MAAM,IAAMD,EAAO,MAAM,KAAOC,EAAO,MAAM,GAAS,QAAM,eAAeA,EAAQ,CAACD,EAAO,MAAM,GAAIA,EAAO,MAAM,EAAE,CAAC,EAAO,QAAMC,CAAM,EAC/KJ,EAAE,KAAU,MAAIA,EAAE,OAAQA,EAAE,MAAM,EAClCA,EAAE,QAAa,MAAIA,EAAE,KAAMA,EAAE,IAAI,EACjCA,EAAE,IAAS,MAAIA,EAAE,OAAO,EAExB,IAAMC,GADU,MAAMD,EAAE,IAAI,KAAK,GACJ,IAAMG,EAAO,MAAM,IAAM,IAAMA,EAAO,MAAM,IAAM,GAAK,IAAM,EAC1F,OAAG,UAAQ,CAACH,EAAE,OAAQA,EAAE,OAAQA,EAAE,KAAMA,EAAE,QAASA,EAAE,GAAG,CAAC,EAClDC,CACT,CC5TO,IAAMI,GAAN,KAAU,CA4Ef,aAAc,CA1EdC,EAAA,gBAEAA,EAAA,aAEAA,EAAA,eAEAA,EAAA,gBAAmB,IAEnBA,EAAA,aAAgB,IAEhBA,EAAA,gBAAqB,CAAC,GAEtBA,EAAA,gBAEAA,EAAA,eAEAA,EAAA,aAIAA,EAAA,kBAEAA,EAAA,eAAmB,IAEnBA,EAAA,YAKI,CACA,UAAW,OACX,QAAS,OACT,KAAM,OACN,YAAa,MACf,GAEFA,EAAA,aAKI,CACA,UAAW,OACX,QAAS,OACT,QAAS,OACT,SAAU,MACZ,GAEFA,EAAA,cAII,CACA,UAAW,OACX,QAAS,OACT,QAAS,MACX,GAEFA,EAAA,WAGI,CACA,MAAO,OACP,MAAO,CAAC,CACV,GAEFA,EAAA,eAAoB,CAAC,GAErBA,EAAA,eAEAA,EAAA,cAEAA,EAAA,kBAUE,GAPA,KAAK,QAAU,OAAO,WAAc,YACpC,KAAK,KAAQ,OAAO,SAAY,aAAiB,OAAO,QAAQ,UAAa,aAAiB,OAAO,QAAQ,SAAS,MAAS,YAC/H,KAAK,KAAO,CAAE,QAAYC,GAAQ,YAAa,EAC/C,KAAK,UAAY,OAAO,iBAAoB,YAC5C,KAAK,QAAU,GAEf,KAAK,OAAS,KAAK,SAAW,KAAK,UAAa,OAAO,mBAAsB,YAAe,OACxF,OAAO,WAAc,YAAa,CACpC,IAAMC,EAAM,UAAU,UAAU,MAAM,eAAe,EACrD,GAAIA,GAAOA,EAAI,GAAI,CACjB,IAAMC,EAAgBD,EAAI,GAAG,MAAM,eAAe,EAClD,KAAK,SAAYC,GAAiBA,EAAc,GAAMA,EAAc,GAAG,QAAQ,SAAU,EAAE,EAAI,GAC/F,KAAK,MAAQ,UAAU,UAAU,QAAQD,EAAI,GAAI,EAAE,EAC/C,KAAK,SAAS,KAAI,KAAK,MAAQ,KAAK,MAAM,QAAQA,EAAI,GAAI,EAAE,GAChE,KAAK,MAAQ,KAAK,MAAM,QAAQ,MAAO,GAAG,CAU5C,CACF,MAAW,OAAO,SAAY,cAC5B,KAAK,SAAW,GAAG,QAAQ,YAAY,QAAQ,OAC/C,KAAK,MAAQ,UAAU,QAAQ,UAEnC,CAGA,MAAM,eAAgB,CAEpB,KAAK,SAAW,OAAO,KAAQ,SAAO,EAAE,eAAe,EACvD,KAAK,KAAK,UAAY,OAAO,aAAgB,YAC7C,KAAK,KAAK,QAAU,KAAK,SAAS,SAAS,MAAM,EAC7C,KAAK,KAAK,WAAa,KAAK,KAAK,SAAc,aAAW,IAAM,SAClE,KAAK,KAAK,KAAO,MAAS,MAAI,EAAE,SAAS,uBAAuB,EAChE,KAAK,KAAK,YAAc,MAAS,MAAI,EAAE,SAAS,8BAA8B,GAEhF,IAAME,EAAUC,EAAO,IAAK,GAAG,EACzBC,EAAMF,EAAIA,EAAE,WAAW,QAAQ,EAAI,OAIzC,GAFA,KAAK,MAAM,UAAY,OAAOE,GAAQ,YACtC,KAAK,MAAM,QAAU,KAAK,SAAS,SAAS,OAAO,EAC/C,KAAK,MAAM,WAAa,KAAK,MAAM,UAAe,aAAW,IAAM,SAAc,aAAW,IAAM,WAAY,CAEhH,IAAMC,EAAQ,UAAQ,EAAE,QAAU,YAAc,MAAS,UAAQ,EAAE,gBAAgB,EAAE,GAAK,KACtFA,IACF,KAAK,MAAM,QAAUA,EAAG,aAAaA,EAAG,OAAO,EAC/C,KAAK,MAAM,SAAWA,EAAG,aAAaA,EAAG,QAAQ,EAErD,CAEA,KAAK,OAAO,UAAY,KAAK,SAAW,OAAO,UAAU,KAAW,YACpE,KAAK,OAAO,QAAU,KAAK,SAAS,SAAS,QAAQ,EACrD,GAAI,CAEE,KAAK,OAAO,YAAW,KAAK,OAAO,SAAW,MAAM,UAAU,IAAO,eAAe,GAAG,KAC7F,OAAQC,EAAN,CACA,KAAK,OAAO,UAAY,EAC1B,CACA,GAAI,CACF,KAAK,QAAa,uBAAwB,aAAW,CAAC,EAAE,IAAKC,GAAWA,EAAO,WAAW,YAAY,CAAC,CACzG,OAAQD,EAAN,CAAa,CACjB,CAGA,MAAM,WAAY,CAChB,IAAME,EAAM,CAAE,MAAO,GAAI,MAAO,CAAC,CAAE,EAC/B,KAAK,MAAQ,KAAK,SAAS,WAAW,OAAO,EAY5C,KAAK,IACL,KAAK,IAASA,EADD,OAAO,eAAe,KAAM,MAAO,CAAE,MAAOA,CAAI,CAAC,CAErE,CACF,EAEaC,EAAM,IAAIZ,mlECnKvB,IAAMa,EAAU,CACd,YAAa,GACb,eAAgB,GAChB,QAAS,GACT,MAAO,GACP,cAAe,EACjB,EAUaC,EAAwC,CAAC,EAEtD,eAAeC,GAAYC,EAAKC,EAAiC,CAC/D,OAAIJ,EAAQ,OAAOK,EAAI,oBAAqBF,EAAKC,CAAI,EAC9C,MAAMD,EAAKC,CAAI,CACxB,CAEO,SAASE,GAAoBC,EAAgB,CAClDP,EAAQ,YAAcO,EAAO,YAC7BP,EAAQ,QAAUO,EAAO,MACzBP,EAAQ,cAAgBO,EAAO,aACjC,CAEA,eAAsBC,EAAUC,EAAoD,CAnCpF,IAAAC,EAAAC,EAAAC,EAoCE,IAAIC,EAAWC,GAAKd,EAAQ,cAAeS,GAAa,EAAE,EACrDI,EAAS,YAAY,EAAE,SAAS,OAAO,IAAGA,GAAY,SAC3D,IAAME,EAAoBF,EAAS,SAAS,GAAG,EAAIA,EAAS,MAAM,GAAG,EAAIA,EAAS,MAAM,IAAI,EACtFG,EAAiBD,EAAkBA,EAAkB,OAAS,GAAG,QAAQ,QAAS,EAAE,EACpFE,EAAkB,eAAiBD,EACzCf,EAAWe,GAAkB,CAC3B,KAAMA,EACN,iBAAkB,EAClB,kBAAmB,EACnB,YAAaE,GAAWF,GACxB,QAAS,EACX,EACAhB,EAAQ,eAAkB,OAAO,QAAW,aAAiB,OAAO,OAAO,cAAiB,aAAiB,OAAO,OAAO,WAAc,YACzI,IAAImB,EAAe,CAAC,EACpB,GAAI,CACFA,EAAgBnB,EAAQ,gBAAkBA,EAAQ,YAAe,MAAS,KAAG,WAAW,EAAI,CAAC,CAC/F,OAAQoB,EAAN,CACApB,EAAQ,eAAiB,EAC3B,CACAC,EAAWe,GAAgB,QAAWhB,EAAQ,gBAAkBA,EAAQ,aAAgB,OAAO,KAAKmB,CAAY,EAAE,SAASF,CAAe,EAC1I,IAAMI,EAAgB,OAAO,OAAU,YAAc,CAAC,EAAI,CAAE,UAAW,CAAClB,EAAKC,IAAUF,GAAYC,EAAKC,CAAI,CAAE,EACxGkB,EAAoB,IAAOC,GAAWtB,EAAWe,GAAgB,QAAUC,EAAkBJ,EAAUQ,CAAa,EACtHG,EAAS,GACb,GAAI,CAEFF,EAAM,cAAc,EAChBtB,EAAQ,OAAOK,EAAI,sBAAuBiB,EAAM,OAAU,EAE9D,IAAMG,EAAY,MAAMH,EAAM,QAAQ,KAAK,EAC3CrB,EAAWe,GAAgB,mBAAmBN,EAAAe,GAAA,YAAAA,EAAW,aAAX,YAAAf,EAAuB,aAAc,EACnFY,EAAM,SAASG,CAAS,EAExBxB,EAAWe,GAAgB,oBAAoBJ,GAAAD,EAAAW,GAAA,YAAAA,EAAO,YAAP,YAAAX,EAAkB,aAAlB,YAAAC,EAA8B,aAAc,EACvFZ,EAAQ,SAASK,EAAI,cAAeiB,EAAM,SAAa,CAAE,MAAOrB,EAAWe,GAAgB,iBAAkB,EAAGhB,CAAO,EAC3HwB,EAAS,EACX,OAASE,EAAP,CACArB,EAAI,uBAAwBQ,EAAUa,CAAG,CAC3C,CACA,GAAIF,GAAUxB,EAAQ,aAAeA,EAAQ,gBAAkB,CAACC,EAAWe,GAAgB,QACzF,GAAI,CACF,IAAMW,EAAa,MAAML,EAAM,KAAKL,CAAe,EACnDZ,EAAI,eAAgBY,EAAiBU,CAAU,CACjD,OAASD,EAAP,CACArB,EAAI,sBAAuBQ,EAAUa,CAAG,CAC1C,CAEF,OAAOJ,CACT,gBCnFA,IAAAM,GAAA,GAAAC,GAAAD,GAAA,YAAAE,GAAA,kBAAAC,GAAA,SAAAC,GAAA,UAAAC,GAAA,aAAAC,KCeA,IAAIC,GAMJ,IAAIC,GAAU,OAAO,iBAGrB,eAAsBC,GAAKC,EAAgB,CAxB3C,IAAAC,EAyBE,OAAIC,EAAI,UAASC,GAAQ,MACpBA,GACIH,EAAO,OAAOI,EAAI,gBAAiBD,GAAM,QAAW,EADjDA,GAAQ,MAAME,GAAUJ,EAAAD,EAAO,KAAK,OAAZ,YAAAC,EAAqB,SAAS,EAE3DE,EACT,CC1BO,IAAMG,EAAwD,CACnE,MAAO,IACP,IAAK,EACL,IAAK,EACL,KAAM,GACN,MAAO,MACP,IAAK,CAAC,MAAQ,KAAQ,IAAM,CAC9B,EAEO,SAASC,IAAO,CACrBD,EAAU,MAAW,SAAO,IAAK,SAAS,EAC1CA,EAAU,IAAS,SAAO,EAAG,SAAS,EACtCA,EAAU,IAAS,SAAO,EAAG,SAAS,EACtCA,EAAU,KAAU,SAAO,GAAK,SAAS,EACzCA,EAAU,MAAW,SAAO,MAAO,SAAS,EAC5CA,EAAU,IAAS,WAAS,CAAC,MAAQ,KAAQ,IAAM,EAAG,SAAS,CACjE,CCLA,IAAIE,GAIJ,IAAIC,GAAU,OAAO,iBAGrB,eAAsBC,GAAKC,EAAgB,CACzC,OAAIC,EAAI,UAASC,GAAQ,MACpBA,GACIF,EAAO,OAAOG,EAAI,gBAAiBD,GAAM,QAAW,EADjDA,GAAQ,MAAME,EAAUJ,EAAO,KAAK,OAAU,YAAY,EAE/DE,EACT,CCXA,IAAIG,GAIJ,IAAIC,GAAU,OAAO,iBAMrB,eAAsBC,GAAKC,EAAsB,CAC/C,OAAIC,EAAI,UAASC,GAAQ,MACpBA,GACIF,EAAO,OAAOG,EAAI,gBAAiBD,GAAM,QAAW,EADjDA,GAAQ,MAAME,EAAUJ,EAAO,KAAK,OAAU,eAAe,EAElEE,EACT,CCnBA,IAAIG,GAEJ,IAAIC,GAAU,OAAO,iBAIrB,eAAsBC,GAAKC,EAAqC,CAjBhE,IAAAC,EAkBE,OAAIC,EAAI,UAASC,GAAQ,MACpBA,GACIH,EAAO,OAAOI,EAAI,gBAAiBD,GAAM,QAAW,EADjDA,GAAQ,MAAME,GAAUJ,EAAAD,EAAO,KAAK,YAAZ,YAAAC,EAAuB,SAAS,EAE7DE,EACT,CCjBO,IAAMG,GAA4C,CACvD,WAAY,CACV,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtD,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACvD,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GACpD,EAKA,eAAgB,CAAC,IAAK,GAAI,GAAI,GAAI,EAAG,IAAK,IAAK,IAAK,GAAG,EACvD,eAAgB,CAAC,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAG,EAClE,eAAgB,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAG,EACxD,eAAgB,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAG,EACjE,mBAAoB,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAG,EACrE,mBAAoB,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAG,EAC5D,mBAAoB,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAG,EACrE,mBAAoB,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAG,EAC5D,eAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAClD,eAAgB,CAAC,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EACzD,eAAgB,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAG,EAC7C,eAAgB,CAAC,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAG,EACvD,eAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAClD,eAAgB,CAAC,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAC3D,eAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAC5D,kBAAmB,CAAC,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAG,EACtD,kBAAmB,CAAC,GAAI,IAAK,GAAI,GAAI,GAAI,EAAE,EAC3C,aAAc,CAAC,IAAK,IAAK,IAAK,IAAK,GAAG,EACtC,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EACjD,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAC3D,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EACjD,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAC3D,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EACjD,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAC3D,cAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAC3D,iBAAkB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EACzD,iBAAkB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAC/C,YAAa,CAAC,IAAK,IAAK,IAAK,IAAK,GAAG,EACrC,kBAAmB,CAAC,GAAG,EACvB,QAAS,CAAC,CAAC,EACX,WAAY,CAAC,CAAC,EACd,gBAAiB,CAAC,EAAE,EACpB,eAAgB,CAAC,GAAG,EACpB,WAAY,CAAC,GAAG,EAChB,UAAW,CAAC,GAAG,CACjB,EAEaC,GAAmD,CAC9D,MAAO,IACP,MAAO,GACP,aAAc,CAAC,GAAID,GAAgB,kBAAqB,EAAE,CAC5D,EAEaE,GAAwD,CACnE,QAAS,EACT,SAAU,EACV,KAAM,EACN,MAAO,EACP,QAAS,EACT,SAAU,EACV,aAAc,CAAC,EAAG,CAAC,CACrB,EAcO,IAAMC,GAA4B,CACvC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,eAAiB,gBAAiB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,eAAiB,gBAAiB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,eAAiB,gBAAiB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,eAAgB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,eAAiB,gBAAiB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,eAAiB,gBAAiB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,eAAiB,gBAAiB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,eAAiB,eAAgB,EAClC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,eAAiB,gBAAiB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,eAAgB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,cAAgB,gBAAiB,EAClC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,gBAAkB,gBAAiB,EACpC,CAAC,eAAiB,gBAAiB,EACnC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,EACrC,CAAC,iBAAmB,gBAAiB,CACvC,EAEaC,GAAwB,CACnC,IAAK,GAAI,IAAK,GAAI,EAAG,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,EACtJ,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAClJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GACrJ,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,EAAG,IAC7I,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAClJ,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GACrJ,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GACpJ,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GACjJ,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,IAC/I,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,EAAG,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IACnJ,IAAK,GAAI,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IACnJ,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,EAAG,IAAK,IAAK,GAAI,EAAG,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAC9I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GACtJ,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,GAClJ,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,EAAG,EAAG,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GACnJ,IAAK,IAAK,IAAK,GAAI,GAAI,EAAG,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GACrJ,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IACpJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,IAClJ,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,IAAK,IAAK,IAAK,IACnJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IACnJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAChJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,EAAG,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAChJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAClJ,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7I,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,EAAG,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GACnJ,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GACpJ,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,GAAI,IAAK,GAAI,IAAK,EAAG,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAClJ,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAClJ,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAChJ,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IACpJ,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GACrJ,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,GACpJ,IAAK,GAAI,IAAK,IAAK,EAAG,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAC/I,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAC9I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GACpJ,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACrJ,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IACpJ,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,EAAG,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,EACpJ,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAC9I,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,GAAI,IAClJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAC9I,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAChJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAChJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAC9I,IAAK,GAAI,IAAK,EAAG,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAChJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAClJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,IACpJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAwB1I,IAA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MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,OAAS,EAAG,MAAQ,EACzB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAAG,MAAQ,EAAG,KAAO,EACvB,CAAE,EAA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",
  "names": ["log", "msg", "dt", "ts", "join", "folder", "file", "separator", "path", "now", "validate", "defaults", "config", "parent", "msgs", "key", "defined", "same", "mergeDeep", "objects", "isObject", "obj", "prev", "pVal", "oVal", "config", "tfjs_esm_exports", "__export", "l", "d", "v", "__reExport", "dist_star", "r", "e", "o", "a", "t", "s", "f", "vertexIdentity", "colorMatrixWithAlpha", "colorMatrixWithoutAlpha", "pixelate", "blur", "convolution", "collect", "source", "prefix", "collection", "match", "name", "GLProgram", "gl", "vertexSource", "fragmentSource", "__publicField", "type", "shader", "log", "vertexShader", "fragmentShader", "a", "u", "GLImageFilter", "drawCount", "sourceTexture", "lastInChain", "currentFramebufferIndex", "tempFramebuffers", "filterChain", "vertexBuffer", "currentProgram", "fxcanvas", "canvas", "shaderProgramCache", "DRAW", "resize", "width", "height", "vertices", "createFramebufferTexture", "fbo", "renderbuffer", "texture", "getTempFramebuffer", "index", "draw", "flags", "target", "flipY", "compileShader", "vertexIdentity", "floatSize", "vertSize", "filter", "matrix", "m", "colorMatrixWithoutAlpha", "colorMatrixWithAlpha", "program", "brightness", "b", "amount", "x", "y", "v", "o", "rotation", "cos", "sin", "lumR", "lumG", "lumB", "pixelSizeX", "pixelSizeY", "convolution", "size", "s", "blurSizeX", "blurSizeY", "blur", "pixelate", "args", "func", "image", "i", "f", "histogramEqualization", "inputImage", "squeeze", "channels", "min", "max", "absMax", "channel", "maxValue", "sub", "range", "fact", "enh", "rgb", "reshape", "maxSize", "inCanvas", "outCanvas", "tmpCanvas", "fx", "last", "canvas", "width", "height", "c", "env", "copy", "input", "output", "outputCanvas", "process", "config", "getTensor", "log", "d", "tensor", "rgb", "cast", "originalWidth", "originalHeight", "targetWidth", "targetHeight", "inCtx", "GLImageFilter", "pixels", "depth", "arr", "tempData", "casted", "histogramEqualization", "skip", "skipFrame", "t", "diffRelative", "compare", "input1", "input2", "Env", "__publicField", "v", "raw", "platformMatch", "c", "canvas", "ctx", "gl", "e", "kernel", "cpu", "env", "options", "modelStats", "httpHandler", "url", "init", "log", "setModelLoadOptions", "config", "loadModel", "modelPath", "_a", "_b", "_c", "modelUrl", "join", "modelPathSegments", "shortModelName", "cachedModelName", "models_exports", "cachedModels", "e", "tfLoadOptions", "model", "l", "loaded", "artifacts", "err", "saveResult", "models_exports", "__export", "Models", "getModelStats", "load", "reset", "validate", "model", "skipped", "load", "config", "_a", "env", "model", "log", "loadModel", "constants", "init", "model", "skipped", "load", "config", "env", "model", "log", "loadModel", "model", "skipped", "load", "config", "env", "model", "log", "loadModel", "model", "skipped", "load", "config", "_a", "env", "model", "log", "loadModel", "meshAnnotations", "meshLandmarks", "blazeFaceLandmarks", "UV468", "TRI468", "VTX68", "VTX33", "VTX7", "UV68", "x", "UV468", "UV33", "UV7", "connectionsToIndices", "connections", "indices", "connection", "pairsLips", "pairsLeftEye", "pairsLeftEyebrow", "pairsLeftIris", "pairsRightEye", "pairsRightEyebrow", "pairsRightIris", "pairsFaceContour", "contourKeypoints", "getBoxSize", "box", "getBoxCenter", "clampBox", "input", "getRawBox", "scaleBoxCoordinates", "factor", "startPoint", "endPoint", "cutAndResize", "image", "cropSize", "h", "w", "cutBox", "crop", "norm", "constants", "enlargeBox", "center", "size", "halfSize", "squarifyBox", "centers", "fixedRotationMatrix", "normalizeRadians", "angle", "computeRotation", "point1", "point2", "buildTranslationMatrix", "x", "y", "dot", "v1", "v2", "product", "i", "getColumnFrom2DArr", "arr", "columnIndex", "column", "multiplyTransformMatrices", "mat1", "mat2", "size", "row", "col", "buildRotationMatrix", "rotation", "center", "cosA", "sinA", "rotationMatrix", "translationMatrix", "translationTimesRotation", "negativeTranslationMatrix", "generateAnchors", "inputSize", "spec", "anchors", "i", "stride", "gridRows", "gridCols", "anchorsNum", "gridY", "anchorY", "gridX", "anchorX", "n", "correctFaceRotation", "rotate", "box", "input", "inputSize", "symmetryLine", "meshLandmarks", "blazeFaceLandmarks", "angle", "rotationMatrix", "fixedRotationMatrix", "face", "env", "computeRotation", "center", "getBoxCenter", "centerRaw", "rotated", "buildRotationMatrix", "cutAndResize", "keypointsCount", "faceBoxScaleFactor", "model", "anchors", "inputSize", "inputSizeT", "size", "load", "config", "_a", "env", "log", "loadModel", "generateAnchors", "decodeBoxes", "boxOutputs", "t", "constants", "boxes", "tensor", "getBoxes", "inputImage", "_b", "_c", "_d", "res", "sorted", "a", "b", "nms", "scores", "i", "confidence", "points", "rawBox", "scaledBox", "scaleBoxCoordinates", "enlargedBox", "enlargeBox", "squaredBox", "squarifyBox", "blazeposecoords_exports", "__export", "connected", "kpt", "inputSize", "anchorTensor", "numLayers", "strides", "createAnchors", "anchors", "layerId", "anchorCount", "lastSameStrideLayer", "stride", "featureMapHeight", "featureMapWidth", "y", "x", "anchorId", "a", "env", "models", "inputSize", "skipped", "loadDetect", "config", "env", "models", "loadModel", "inputs", "inputSize", "log", "createAnchors", "loadPose", "model", "inputSize", "skipped", "load", "config", "env", "model", "log", "loadModel", "inputs", "inputSize", "efficientposecoords_exports", "__export", "connected", "kpt", "model", "skipped", "load", "config", "env", "model", "log", "loadModel", "model", "skipped", "load", "config", "_a", "env", "model", "log", "loadModel", "model", "skipped", "load", "config", "env", "model", "log", "loadModel", "model", "skipped", "load", "config", "env", "model", "log", "loadModel", "cache", "model", "predict", "input", "config", "_a", "_b", "_c", "_d", "skipTime", "now", "skipFrame", "getBoxes", "faces", "newCache", "id", "i", "box", "face", "correctFaceRotation", "size", "clampBox", "getRawBox", "load", "env", "log", "loadModel", "triangulation", "TRI468", "uvmap", "UV468", "model", "skipped", "load", "config", "_a", "env", "model", "log", "loadModel", "getBoxSize", "box", "getBoxCenter", "cutBoxFromImageAndResize", "image", "cropSize", "h", "w", "boxes", "scaleBoxCoordinates", "factor", "startPoint", "endPoint", "palmLandmarks", "coord", "enlargeBox", "center", "size", "newHalfSize", "squarifyBox", "centers", "halfSize", "normalizeRadians", "angle", "computeRotation", "point1", "point2", "radians", "buildTranslationMatrix", "x", "y", "dot", "v1", "v2", "product", "i", "getColumnFrom2DArr", "arr", "columnIndex", "column", "multiplyTransformMatrices", "mat1", "mat2", "size", "row", "col", "buildRotationMatrix", "rotation", "center", "cosA", "sinA", "rotationMatrix", "translationMatrix", "translationTimesRotation", "negativeTranslationMatrix", "invertTransformMatrix", "matrix", "rotationComponent", "translationComponent", "invertedTranslation", "rotatePoint", "homogeneousCoordinate", "anchors", "HandDetector", "model", "__publicField", "anchors", "anchor", "boxes", "t", "res", "tensor", "rawPalmLandmarks", "index", "input", "config", "constants", "scores", "nms", "hands", "p", "box", "startPoint", "endPoint", "palmLandmarks", "hand", "scaled", "scaleBoxCoordinates", "palmBoxEnlargeFactor", "handBoxEnlargeFactor", "palmLandmarkIds", "palmLandmarksPalmBase", "palmLandmarksMiddleFingerBase", "lastTime", "HandPipeline", "handDetector", "handPoseModel", "__publicField", "landmarks", "xs", "d", "ys", "startPoint", "endPoint", "palmLandmarks", "rotationMatrix", "rotatedPalmLandmarks", "coord", "rotatePoint", "boxAroundPalm", "enlargeBox", "squarifyBox", "boundingBox", "boxAroundHand", "i", "rawCoords", "box2", "angle", "boxSize", "getBoxSize", "scaleFactor", "coordsScaled", "coordsRotationMatrix", "buildRotationMatrix", "coordsRotated", "inverseRotationMatrix", "invertTransformMatrix", "boxCenter", "getBoxCenter", "originalBoxCenter", "dot", "image", "config", "useFreshBox", "boxes", "skipTime", "now", "skipFrame", "hands", "currentBox", "computeRotation", "palmCenter", "palmCenterNormalized", "rotatedImage", "env", "newBox", "croppedInput", "cutBoxFromImageAndResize", "handImage", "constants", "confidenceT", "keypoints", "confidence", "keypointsReshaped", "coords", "nextBoundingBox", "result", "enlarged", "a", "Finger", "value", "FingerCurl", "FingerDirection", "FingerGesture", "name", "__publicField", "finger", "curl", "confidence", "position", "weight", "total", "a", "b", "el", "detectedCurls", "detectedDirections", "fingerIdx", "detectedCurl", "expectedCurls", "expectedCurl", "score", "detectedDirection", "expectedDirections", "expectedDirection", "thumb", "index", "middle", "ring", "pinky", "Finger", "none", "half", "full", "FingerCurl", "verticalUp", "verticalDown", "horizontalLeft", "horizontalRight", "diagonalUpRight", "diagonalUpLeft", "diagonalDownRight", "diagonalDownLeft", "FingerDirection", "ThumbsUp", "FingerGesture", "finger", "Victory", "Point", "MiddleFinger", "OpenPalm", "handDetectorModel", "handPoseModel", "handPipeline", "load", "config", "_a", "_b", "env", "handDetectorModel", "handPoseModel", "loadModel", "log", "handDetector", "HandDetector", "handPipeline", "HandPipeline", "models", "inputSize", "skipped", "loadDetect", "config", "_a", "env", "models", "log", "fakeOps", "loadModel", "inputs", "inputSize", "loadSkeleton", "model", "inputSize", "leftOutline", "meshAnnotations", "rightOutline", "eyeLandmarks", "load", "config", "_a", "env", "model", "log", "loadModel", "inputSize", "model", "skipped", "load", "config", "_a", "env", "model", "log", "loadModel", "movenetcoords_exports", "__export", "connected", "horizontal", "kpt", "relative", "vertical", "model", "inputSize", "skipped", "load", "config", "env", "model", "log", "fakeOps", "loadModel", "inputSize", "model", "skipped", "inputSize", "load", "config", "model", "env", "loadModel", "inputs", "inputSize", "log", "partNames", "count", "partIds", "result", "jointName", "i", "connectedPartNames", "connectedPartIndices", "jointNameA", "jointNameB", "model", "squaredNmsRadius", "load", "config", "model", "env", "loadModel", "log", "model", "load", "config", "model", "env", "loadModel", "log", "Models", "__publicField", "getModelStats", "instance", "totalSizeFromManifest", "totalSizeWeights", "totalSizeLoading", "m", "modelStats", "percentageLoaded", "reset", "model", "load", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "_l", "_m", "_n", "_o", "_p", "_q", "_r", "_s", "_t", "_u", "_v", "_w", "_x", "_y", "_z", "_A", "_B", "_C", "_D", "_E", "_F", "env", "loadPose", "loadDetect", "loadSkeleton", "validate", "simpleOps", "defined", "ops", "executor", "kernel", "op", "log", "missing", "config", "extensions", "gl", "register", "instance", "_a", "log", "reset", "canvas", "err", "e", "ctx", "kernelConfig", "newKernelConfig", "current", "registerCustomOps", "env", "kernelMod", "op", "check", "instance", "force", "timeStamp", "now", "log", "adapter", "adapterInfo", "register", "available", "tfjs_esm_exports", "simd", "mt", "init", "err", "gl", "fakeOps", "kernelNames", "config", "kernelName", "kernelConfig", "kernel", "detectFace", "instance", "input", "timeStamp", "now", "faceRes", "faces", "predict", "env", "i", "log", "res", "bufferedResult", "interpolateTime", "calc", "newResult", "config", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "_l", "_m", "_n", "_o", "_p", "_q", "_r", "_s", "_t", "_u", "_v", "_w", "_x", "_y", "_z", "_A", "t0", "now", "elapsed", "bufferedFactor", "i", "box", "newBoxCoord", "j", "boxRaw", "keypoints", "newKpt", "annotations", "coords", "efficientposecoords_exports", "blazeposecoords_exports", "movenetcoords_exports", "name", "indexes", "pt", "pt0", "kp", "pt1", "b", "landmark", "coord", "k", "key", "val", "rotation", "newPersons", "t1", "env", "match_exports", "__export", "distance", "match", "similarity", "descriptor1", "descriptor2", "options", "sum", "i", "diff", "normalizeDistance", "dist", "order", "min", "max", "root", "norm", "descriptor", "descriptors", "lowestDistance", "index", "res", "normalizedSimilarity", "join", "faces", "bodies", "hands", "gestures", "shape", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_h", "_i", "_j", "_k", "_l", "_m", "_n", "_o", "_p", "id", "persons", "face", "person", "body", "hand", "gesture", "x", "y", "extractXY", "box", "minX", "minY", "face", "body", "warmupBitmap", "instance", "b64toBlob", "base64", "type", "res", "blob", "face", "body", "bitmap", "warmupCanvas", "resolve", "src", "img", "env", "canvas", "log", "ctx", "tensor", "warmupNode", "atob", "str", "tfjs_esm_exports", "data", "expanded", "runInference", "runCompile", "allModels", "backendType", "webGLBackend", "numTensorsStart", "compiledModels", "modelName", "model", "key", "val", "shape", "dtype", "dim", "t", "e", "kernels", "numTensorsEnd", "warmup", "userConfig", "t0", "now", "mergeDeep", "t1", "_numTensors", "_analyzeMemoryLeaks", "_checkSanity", "_sanity", "Human", "userConfig", "__publicField", "__privateAdd", "msg", "__privateGet", "currentTensors", "previousTensors", "__privateSet", "leaked", "log", "input", "d", "e", "similarity", "distance", "match", "event", "_a", "env", "tfVersion", "v", "config", "version", "mergeDeep", "setModelLoadOptions", "tfjs_esm_exports", "Models", "triangulation", "uvmap", "currentBackend", "validate", "now", "getTensor", "process", "firstImageTensor", "secondImageTensor", "compare", "check", "timeStamp", "count", "model", "load", "current", "result", "calc", "getModelStats", "t0", "res", "warmup", "t1", "profile", "kernels", "total", "kernel", "kernelArr", "key", "a", "b", "resolve", "_b", "error", "timeStart", "img", "skip", "faceRes", "bodyRes", "handRes", "objectRes", "detectFace", "shape", "join"]
}
